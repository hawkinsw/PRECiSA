% This file is automatically generated by PRECiSA 
% maxDepth: 4 , prec: 10^-14 , displayPrec: 2

clgen_comp_single: THEORY
BEGIN

IMPORTING PRECiSA@bbiasp, PRECiSA@bbiadp, PRECiSA@precIOsa,  PRECiSA@strategies  

comp_single_r_A, comp_single_r_B, comp_single_r_X, comp_single_r_Y, comp_single_r_Z: real

h_0_aeexpr : string = "aeboundsp_add(comp_single_r_A, ulp_sp(comp_single_r_A)/2, comp_single_r_B, ulp_sp(comp_single_r_B)/2)"

h_0_lemma_str : string = "h_c_0 : LEMMA~%FORALL(comp_single_r_A, comp_single_r_B: real, A, B: unb_single):~%abs(StoR(A) - comp_single_r_A)<=ulp_sp(comp_single_r_A)/2 AND abs(StoR(B) - comp_single_r_B)<=ulp_sp(comp_single_r_B)/2~%AND TRUE~%AND TRUE~%AND comp_single_r_A ## [|1,10|] AND  comp_single_r_B ## [|1,10|]~%IMPLIES~%abs(StoR(h(A, B)) - (comp_single_r_A + comp_single_r_B))<= ~a~%"
                          
g_0_aeexpr : string = "aeboundsp_add(abs(comp_single_r_X), aeboundsp_abs(comp_single_r_X, ulp_sp(comp_single_r_X)/2), sqrt(comp_single_r_X), aeboundsp_sqt(comp_single_r_X, ulp_sp(comp_single_r_X)/2))"

g_0_lemma_str : string = "g_c_0 : LEMMA~%FORALL(comp_single_r_Z: real, Z: unb_single):~%abs(StoR(Z) - comp_single_r_Z)<=ulp_sp(comp_single_r_Z)/2~%AND ((comp_single_r_X - ulp_sp(comp_single_r_X)/2) >= 0)~%AND TRUE~%AND comp_single_r_Z ## [|1,10|]~%IMPLIES~%abs(StoR(g(Z)) - (abs(comp_single_r_X) + sqrt(comp_single_r_X)))<= ~a~%"
                          
f_0_aeexpr : string = "aeboundsp_mul((abs(comp_single_r_X) + sqrt(comp_single_r_X)), aeboundsp_add(abs(comp_single_r_X), aeboundsp_abs(comp_single_r_X, ulp_sp(comp_single_r_X)/2), sqrt(comp_single_r_X), aeboundsp_sqt(comp_single_r_X, ulp_sp(comp_single_r_X)/2)), comp_single_r_Y, ulp_sp(comp_single_r_Y)/2)"

f_0_lemma_str : string = "f_c_0 : LEMMA~%FORALL(comp_single_r_X, comp_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - comp_single_r_X)<=ulp_sp(comp_single_r_X)/2 AND abs(StoR(Y) - comp_single_r_Y)<=ulp_sp(comp_single_r_Y)/2~%AND ((comp_single_r_X - ulp_sp(comp_single_r_X)/2) >= 0)~%AND TRUE~%AND comp_single_r_X ## [|1,10|] AND  comp_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - ((abs(comp_single_r_X) + sqrt(comp_single_r_X)) * comp_single_r_Y))<= ~a~%"
                          
gen(sout: OStream, ranges:list[[string,ProperInterval]], maxdepth:nat, prec:posreal, displayprec:nat): void =
LET
max  :real = 0,
dummy:void = fprintf (sout, "% This file is automatically generated by PRECiSA ~%"),
dummy:void = fprintf (sout, "clemmas_comp_single: THEORY ~%"),
dummy:void = fprintf (sout, "BEGIN ~%"),
dummy:void = fprintf (sout, "IMPORTING cert_comp_single, PRECiSA@bbiasp, PRECiSA@bbiadp ~%"),
dummy:void = fprintf (sout, "~%%|- *_TCC* : PROOF"),
dummy:void = fprintf (sout, "~%%|- (precisa-gen-cert-tcc)"),
dummy:void = fprintf (sout, "~%%|- QED~%~%"),
dummy:void = printf ("Concrete bounds: ~%"),new  :real = fprint_concrete_lemma (sout)(h_0_lemma_str, h_0_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("h_0", "h_c_0") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("h_0",new)),
new  :real = fprint_concrete_lemma (sout)(g_0_lemma_str, g_0_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("g_0", "g_c_0") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("g_0",new)),
new  :real = fprint_concrete_lemma (sout)(f_0_lemma_str, f_0_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_0", "f_c_0") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_0",new)),
dummy:void = fprintf (sout, "END clemmas_comp_single ~%")IN
printf("Overall concrete bound: ~-20/pvs:d/~%",max)
main : void = 
LET sout = fopenout(create, "clemmas_comp_single.pvs"),
i1:ProperInterval = [|1,10|],
i2:ProperInterval = [|1,10|],
i3:ProperInterval = [|1,10|],
i4:ProperInterval = [|1,2|],
i5:ProperInterval = [|1,10|] IN 
gen (sout, (: ("comp_single_r_A",i1), ("comp_single_r_B",i2), ("comp_single_r_X",i3), ("comp_single_r_Y",i4), ("comp_single_r_Z",i5) :), 4, 10^-14, 2) & fclose(sout) & printf("File succesfully generated.")

END clgen_comp_single