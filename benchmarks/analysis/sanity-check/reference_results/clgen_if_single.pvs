% This file is automatically generated by PRECiSA 
% maxDepth: 4 , prec: 10^-14 , displayPrec: 2

clgen_if_single: THEORY
BEGIN

IMPORTING PRECiSA@bbiasp, PRECiSA@bbiadp, PRECiSA@precIOsa,  PRECiSA@strategies  

if_single_r_X, if_single_r_Y: real

f_0_aeexpr : string = "aeboundsp_add(if_single_r_X, ulp_sp(if_single_r_X)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2)"

f_0_lemma_str : string = "f_c_0 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND ((if_single_r_Y = if_single_r_X) AND NOT((if_single_r_X = (if_single_r_X + if_single_r_Y))))~%AND ((Y = X) AND NOT((X = Sadd(X, Y))))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_X + if_single_r_Y))<= ~a~%"
                          

f_1_aeexpr : string = "aeboundsp_add(if_single_r_Y, ulp_sp(if_single_r_Y)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2)"

f_1_lemma_str : string = "f_c_1 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND (NOT((if_single_r_Y = if_single_r_X)) AND NOT((if_single_r_X = (if_single_r_X + if_single_r_Y))))~%AND (NOT((Y = X)) AND NOT((X = Sadd(X, Y))))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_Y + if_single_r_Y))<= ~a~%"
                          

f_2_aeexpr : string = "(aeboundsp_add(if_single_r_Y, ulp_sp(if_single_r_Y)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2) + abs(((if_single_r_X + if_single_r_Y) - (if_single_r_Y + if_single_r_Y))))"

f_2_lemma_str : string = "f_c_2 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND ((if_single_r_Y = if_single_r_X) AND NOT((if_single_r_X = (if_single_r_X + if_single_r_Y))))~%AND (NOT((Y = X)) AND NOT((X = Sadd(X, Y))))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_X + if_single_r_Y))<= ~a~%"
                          

f_3_aeexpr : string = "(aeboundsp_add(if_single_r_X, ulp_sp(if_single_r_X)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2) + abs(((if_single_r_Y + if_single_r_Y) - (if_single_r_X + if_single_r_Y))))"

f_3_lemma_str : string = "f_c_3 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND (NOT((if_single_r_Y = if_single_r_X)) AND NOT((if_single_r_X = (if_single_r_X + if_single_r_Y))))~%AND ((Y = X) AND NOT((X = Sadd(X, Y))))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_Y + if_single_r_Y))<= ~a~%"
                          

f_4_aeexpr : string = "aeboundsp_mul(if_single_r_X, ulp_sp(if_single_r_X)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2)"

f_4_lemma_str : string = "f_c_4 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND (if_single_r_X = (if_single_r_X + if_single_r_Y))~%AND (X = Sadd(X, Y))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_X * if_single_r_Y))<= ~a~%"
                          

f_5_aeexpr : string = "(aeboundsp_mul(if_single_r_X, ulp_sp(if_single_r_X)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2) + abs(((if_single_r_X + if_single_r_Y) - (if_single_r_X * if_single_r_Y))))"

f_5_lemma_str : string = "f_c_5 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND ((if_single_r_Y = if_single_r_X) AND NOT((if_single_r_X = (if_single_r_X + if_single_r_Y))))~%AND (X = Sadd(X, Y))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_X + if_single_r_Y))<= ~a~%"
                          

f_6_aeexpr : string = "(aeboundsp_mul(if_single_r_X, ulp_sp(if_single_r_X)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2) + abs(((if_single_r_Y + if_single_r_Y) - (if_single_r_X * if_single_r_Y))))"

f_6_lemma_str : string = "f_c_6 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND (NOT((if_single_r_Y = if_single_r_X)) AND NOT((if_single_r_X = (if_single_r_X + if_single_r_Y))))~%AND (X = Sadd(X, Y))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_Y + if_single_r_Y))<= ~a~%"
                          

f_7_aeexpr : string = "(aeboundsp_add(if_single_r_X, ulp_sp(if_single_r_X)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2) + abs(((if_single_r_X * if_single_r_Y) - (if_single_r_X + if_single_r_Y))))"

f_7_lemma_str : string = "f_c_7 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND ((if_single_r_Y = if_single_r_X) AND (if_single_r_X = (if_single_r_X + if_single_r_Y)))~%AND ((Y = X) AND NOT((X = Sadd(X, Y))))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_X * if_single_r_Y))<= ~a~%"
                          

f_8_aeexpr : string = "(aeboundsp_add(if_single_r_Y, ulp_sp(if_single_r_Y)/2, if_single_r_Y, ulp_sp(if_single_r_Y)/2) + abs(((if_single_r_X * if_single_r_Y) - (if_single_r_Y + if_single_r_Y))))"

f_8_lemma_str : string = "f_c_8 : LEMMA~%FORALL(if_single_r_X, if_single_r_Y: real, X, Y: unb_single):~%abs(StoR(X) - if_single_r_X)<=ulp_sp(if_single_r_X)/2 AND abs(StoR(Y) - if_single_r_Y)<=ulp_sp(if_single_r_Y)/2~%AND (NOT((if_single_r_Y = if_single_r_X)) AND (if_single_r_X = (if_single_r_X + if_single_r_Y)))~%AND (NOT((Y = X)) AND NOT((X = Sadd(X, Y))))~%AND if_single_r_X ## [|1,10|] AND  if_single_r_Y ## [|1,2|]~%IMPLIES~%abs(StoR(f(X, Y)) - (if_single_r_X * if_single_r_Y))<= ~a~%"
                          
gen(sout: OStream, ranges:list[[string,ProperInterval]], maxdepth:nat, prec:posreal, displayprec:nat): void =
LET
max  :real = 0,
dummy:void = fprintf (sout, "% This file is automatically generated by PRECiSA ~%"),
dummy:void = fprintf (sout, "clemmas_if_single: THEORY ~%"),
dummy:void = fprintf (sout, "BEGIN ~%"),
dummy:void = fprintf (sout, "IMPORTING cert_if_single, PRECiSA@bbiasp, PRECiSA@bbiadp ~%"),
dummy:void = fprintf (sout, "~%%|- *_TCC* : PROOF"),
dummy:void = fprintf (sout, "~%%|- (precisa-gen-cert-tcc)"),
dummy:void = fprintf (sout, "~%%|- QED~%~%"),
dummy:void = printf ("Concrete bounds: ~%"),new  :real = fprint_concrete_lemma (sout)(f_0_lemma_str, f_0_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_0", "f_c_0") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_0",new)),
new  :real = fprint_concrete_lemma (sout)(f_1_lemma_str, f_1_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_1", "f_c_1") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_1",new)),
new  :real = fprint_concrete_lemma (sout)(f_2_lemma_str, f_2_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_2", "f_c_2") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_2",new)),
new  :real = fprint_concrete_lemma (sout)(f_3_lemma_str, f_3_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_3", "f_c_3") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_3",new)),
new  :real = fprint_concrete_lemma (sout)(f_4_lemma_str, f_4_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_4", "f_c_4") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_4",new)),
new  :real = fprint_concrete_lemma (sout)(f_5_lemma_str, f_5_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_5", "f_c_5") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_5",new)),
new  :real = fprint_concrete_lemma (sout)(f_6_lemma_str, f_6_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_6", "f_c_6") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_6",new)),
new  :real = fprint_concrete_lemma (sout)(f_7_lemma_str, f_7_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_7", "f_c_7") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_7",new)),
new  :real = fprint_concrete_lemma (sout)(f_8_lemma_str, f_8_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("f_8", "f_c_8") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("f_8",new)),
dummy:void = fprintf (sout, "END clemmas_if_single ~%")IN
printf("Overall concrete bound: ~-20/pvs:d/~%",max)
main : void = 
LET sout = fopenout(create, "clemmas_if_single.pvs"),
i1:ProperInterval = [|1,10|],
i2:ProperInterval = [|1,2|] IN 
gen (sout, (: ("if_single_r_X",i1), ("if_single_r_Y",i2) :), 4, 10^-14, 2) & fclose(sout) & printf("File succesfully generated.")

END clgen_if_single