% This file is automatically generated by PRECiSA 

winding_number_expr_cert: THEORY
BEGIN
IMPORTING float@extended_float_converter, PRECiSA@strategies, PRECiSA@bbiasp, PRECiSA@bbiadp

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

quadrant_expr_1 : LEMMA
FORALL(X: double, e_X: nonneg_real, r_X: real):
abs(safe_prjct_double(X)-r_X)<=e_X
AND (TRUE)
IMPLIES
abs(safe_prjct_double(X) - r_X) <= e_X

%|- quadrant_1: PROOF
%|- (precisa)
%|- QED


quadrant_expr_num_1 : LEMMA
FORALL(X: double, r_X: real):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2
AND (TRUE)
AND r_X ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(X) - r_X) <=1 / 274877906944

%|- quadrant_c_1 : PROOF
%|- (prove-concrete-lemma quadrant_expr_1 14 7)
%|- QED

quadrant_expr_2 : LEMMA
FORALL(Y: double, e_Y: nonneg_real, r_Y: real):
abs(safe_prjct_double(Y)-r_Y)<=e_Y
AND (TRUE)
IMPLIES
abs(safe_prjct_double(Y) - r_Y) <= e_Y

%|- quadrant_2: PROOF
%|- (precisa)
%|- QED


quadrant_expr_num_2 : LEMMA
FORALL(Y: double, r_Y: real):
abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND (TRUE)
AND r_Y ## [|-10000,10000|]
IMPLIES
abs(safe_prjct_double(Y) - r_Y) <=1 / 1099511627776

%|- quadrant_c_2 : PROOF
%|- (prove-concrete-lemma quadrant_expr_2 14 7)
%|- QED

winding_number_contrib_expr_1 : LEMMA
FORALL(THIS_x: double, P_V1_x: double, S_x: double, e_THIS_x, e_P_V1_x, e_S_x: nonneg_real, r_THIS_x, r_P_V1_x, r_S_x: real):
abs(safe_prjct_double(THIS_x)-r_THIS_x)<=e_THIS_x AND abs(safe_prjct_double(P_V1_x)-r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(S_x)-r_S_x)<=e_S_x
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(P_V1_x, S_x)
                      IN THIS_x) - LET r_THIS_x:real=(r_P_V1_x - r_S_x)
                                   IN r_THIS_x) <= LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                       Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                   IN Err_THIS_x

%|- winding_number_contrib_1: PROOF
%|- (precisa)
%|- QED


winding_number_contrib_expr_num_1 : LEMMA
FORALL(THIS_x: double, P_V1_x: double, S_x: double, r_THIS_x, r_P_V1_x, r_S_x: real):
abs(safe_prjct_double(THIS_x) - r_THIS_x)<=ulp_dp(r_THIS_x)/2 AND abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=ulp_dp(r_P_V1_x)/2 AND abs(safe_prjct_double(S_x) - r_S_x)<=ulp_dp(r_S_x)/2
AND (TRUE)
AND r_P_V1_x ## [|-60000,60000|] AND  r_S_x ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(P_V1_x, S_x)
                      IN THIS_x) - LET r_THIS_x:real=(r_P_V1_x - r_S_x)
                                   IN r_THIS_x) <=1 / 68719476736

%|- winding_number_contrib_c_1 : PROOF
%|- (prove-concrete-lemma winding_number_contrib_expr_1 14 7)
%|- QED

winding_number_contrib_expr_2 : LEMMA
FORALL(THIS_y: double, P_V1_y: double, S_y: double, e_THIS_y, e_P_V1_y, e_S_y: nonneg_real, r_THIS_y, r_P_V1_y, r_S_y: real):
abs(safe_prjct_double(THIS_y)-r_THIS_y)<=e_THIS_y AND abs(safe_prjct_double(P_V1_y)-r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(S_y)-r_S_y)<=e_S_y
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET THIS_y:double=sub_double(P_V1_y, S_y)
                      IN THIS_y) - LET r_THIS_y:real=(r_P_V1_y - r_S_y)
                                   IN r_THIS_y) <= LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                       Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                   IN Err_THIS_y

%|- winding_number_contrib_2: PROOF
%|- (precisa)
%|- QED


winding_number_contrib_expr_num_2 : LEMMA
FORALL(THIS_y: double, P_V1_y: double, S_y: double, r_THIS_y, r_P_V1_y, r_S_y: real):
abs(safe_prjct_double(THIS_y) - r_THIS_y)<=ulp_dp(r_THIS_y)/2 AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=ulp_dp(r_P_V1_y)/2 AND abs(safe_prjct_double(S_y) - r_S_y)<=ulp_dp(r_S_y)/2
AND (TRUE)
AND r_P_V1_y ## [|-60000,60000|] AND  r_S_y ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_y:double=sub_double(P_V1_y, S_y)
                      IN THIS_y) - LET r_THIS_y:real=(r_P_V1_y - r_S_y)
                                   IN r_THIS_y) <=1 / 68719476736

%|- winding_number_contrib_c_2 : PROOF
%|- (prove-concrete-lemma winding_number_contrib_expr_2 14 7)
%|- QED

winding_number_contrib_expr_3 : LEMMA
FORALL(NEXT_x: double, P_V2_x: double, S_x: double, e_NEXT_x, e_P_V2_x, e_S_x: nonneg_real, r_NEXT_x, r_P_V2_x, r_S_x: real):
abs(safe_prjct_double(NEXT_x)-r_NEXT_x)<=e_NEXT_x AND abs(safe_prjct_double(P_V2_x)-r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(S_x)-r_S_x)<=e_S_x
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET NEXT_x:double=sub_double(P_V2_x, S_x)
                      IN NEXT_x) - LET r_NEXT_x:real=(r_P_V2_x - r_S_x)
                                   IN r_NEXT_x) <= LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                       Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                   IN Err_NEXT_x

%|- winding_number_contrib_3: PROOF
%|- (precisa)
%|- QED


winding_number_contrib_expr_num_3 : LEMMA
FORALL(NEXT_x: double, P_V2_x: double, S_x: double, r_NEXT_x, r_P_V2_x, r_S_x: real):
abs(safe_prjct_double(NEXT_x) - r_NEXT_x)<=ulp_dp(r_NEXT_x)/2 AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=ulp_dp(r_P_V2_x)/2 AND abs(safe_prjct_double(S_x) - r_S_x)<=ulp_dp(r_S_x)/2
AND (TRUE)
AND r_P_V2_x ## [|-60000,60000|] AND  r_S_x ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET NEXT_x:double=sub_double(P_V2_x, S_x)
                      IN NEXT_x) - LET r_NEXT_x:real=(r_P_V2_x - r_S_x)
                                   IN r_NEXT_x) <=1 / 68719476736

%|- winding_number_contrib_c_3 : PROOF
%|- (prove-concrete-lemma winding_number_contrib_expr_3 14 7)
%|- QED

winding_number_contrib_expr_4 : LEMMA
FORALL(NEXT_y: double, P_V2_y: double, S_y: double, e_NEXT_y, e_P_V2_y, e_S_y: nonneg_real, r_NEXT_y, r_P_V2_y, r_S_y: real):
abs(safe_prjct_double(NEXT_y)-r_NEXT_y)<=e_NEXT_y AND abs(safe_prjct_double(P_V2_y)-r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_y)-r_S_y)<=e_S_y
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET NEXT_y:double=sub_double(P_V2_y, S_y)
                      IN NEXT_y) - LET r_NEXT_y:real=(r_P_V2_y - r_S_y)
                                   IN r_NEXT_y) <= LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                       Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                   IN Err_NEXT_y

%|- winding_number_contrib_4: PROOF
%|- (precisa)
%|- QED


winding_number_contrib_expr_num_4 : LEMMA
FORALL(NEXT_y: double, P_V2_y: double, S_y: double, r_NEXT_y, r_P_V2_y, r_S_y: real):
abs(safe_prjct_double(NEXT_y) - r_NEXT_y)<=ulp_dp(r_NEXT_y)/2 AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=ulp_dp(r_P_V2_y)/2 AND abs(safe_prjct_double(S_y) - r_S_y)<=ulp_dp(r_S_y)/2
AND (TRUE)
AND r_P_V2_y ## [|-60000,60000|] AND  r_S_y ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET NEXT_y:double=sub_double(P_V2_y, S_y)
                      IN NEXT_y) - LET r_NEXT_y:real=(r_P_V2_y - r_S_y)
                                   IN r_NEXT_y) <=1 / 68719476736

%|- winding_number_contrib_c_4 : PROOF
%|- (prove-concrete-lemma winding_number_contrib_expr_4 14 7)
%|- QED

winding_number_contrib_expr_5 : LEMMA
FORALL(DET: double, P_V1_x: double, S_x: double, P_V1_y: double, S_y: double, P_V2_x: double, P_V2_y: double, NEXT_x: double, THIS_x: double, NEXT_y: double, THIS_y: double, DISTANCE_x: double, DISTANCE_y: double, e_DET, e_P_V1_x, e_S_x, e_P_V1_y, e_S_y, e_P_V2_x, e_P_V2_y, e_NEXT_x, e_THIS_x, e_NEXT_y, e_THIS_y, e_DISTANCE_x, e_DISTANCE_y: nonneg_real, r_DET, r_P_V1_x, r_S_x, r_P_V1_y, r_S_y, r_P_V2_x, r_P_V2_y, r_NEXT_x, r_THIS_x, r_NEXT_y, r_THIS_y, r_DISTANCE_x, r_DISTANCE_y: real):
abs(safe_prjct_double(DET)-r_DET)<=e_DET AND abs(safe_prjct_double(P_V1_x)-r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(S_x)-r_S_x)<=e_S_x AND abs(safe_prjct_double(P_V1_y)-r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(S_y)-r_S_y)<=e_S_y AND abs(safe_prjct_double(P_V2_x)-r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y)-r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(NEXT_x)-r_NEXT_x)<=e_NEXT_x AND abs(safe_prjct_double(THIS_x)-r_THIS_x)<=e_THIS_x AND abs(safe_prjct_double(NEXT_y)-r_NEXT_y)<=e_NEXT_y AND abs(safe_prjct_double(THIS_y)-r_THIS_y)<=e_THIS_y AND abs(safe_prjct_double(DISTANCE_x)-r_DISTANCE_x)<=e_DISTANCE_x AND abs(safe_prjct_double(DISTANCE_y)-r_DISTANCE_y)<=e_DISTANCE_y
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(P_V1_x, S_x),
                          THIS_y:double=sub_double(P_V1_y, S_y),
                          NEXT_x:double=sub_double(P_V2_x, S_x),
                          NEXT_y:double=sub_double(P_V2_y, S_y),
                          DISTANCE_x:double=sub_double(NEXT_x, THIS_x),
                          DISTANCE_y:double=sub_double(NEXT_y, THIS_y),
                          DET:double=sub_double(mul_double(DISTANCE_x, THIS_y), mul_double(DISTANCE_y, THIS_x))
                      IN DET) - LET r_THIS_x:real=(r_P_V1_x - r_S_x),
                                    r_THIS_y:real=(r_P_V1_y - r_S_y),
                                    r_NEXT_x:real=(r_P_V2_x - r_S_x),
                                    r_NEXT_y:real=(r_P_V2_y - r_S_y),
                                    r_DISTANCE_x:real=(r_NEXT_x - r_THIS_x),
                                    r_DISTANCE_y:real=(r_NEXT_y - r_THIS_y),
                                    r_DET:real=((r_DISTANCE_x * r_THIS_y) - (r_DISTANCE_y * r_THIS_x))
                                IN r_DET) <= LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                 Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                             IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                    Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                       Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                   IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                          Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                      IN LET DISTANCE_x:real=(r_NEXT_x - r_THIS_x),
                                                             Err_DISTANCE_x:real=aebounddp_sub(r_NEXT_x, Err_NEXT_x, r_THIS_x, Err_THIS_x)
                                                         IN LET DISTANCE_y:real=(r_NEXT_y - r_THIS_y),
                                                                Err_DISTANCE_y:real=aebounddp_sub(r_NEXT_y, Err_NEXT_y, r_THIS_y, Err_THIS_y)
                                                            IN LET DET:real=((r_DISTANCE_x * r_THIS_y) - (r_DISTANCE_y * r_THIS_x)),
                                                                   Err_DET:real=aebounddp_sub((r_DISTANCE_x * r_THIS_y), aebounddp_mul(r_DISTANCE_x, Err_DISTANCE_x, r_THIS_y, Err_THIS_y), (r_DISTANCE_y * r_THIS_x), aebounddp_mul(r_DISTANCE_y, Err_DISTANCE_y, r_THIS_x, Err_THIS_x))
                                                               IN Err_DET

%|- winding_number_contrib_5: PROOF
%|- (precisa)
%|- QED


winding_number_contrib_expr_num_5 : LEMMA
FORALL(DET: double, P_V1_x: double, S_x: double, P_V1_y: double, S_y: double, P_V2_x: double, P_V2_y: double, NEXT_x: double, THIS_x: double, NEXT_y: double, THIS_y: double, DISTANCE_x: double, DISTANCE_y: double, r_DET, r_P_V1_x, r_S_x, r_P_V1_y, r_S_y, r_P_V2_x, r_P_V2_y, r_NEXT_x, r_THIS_x, r_NEXT_y, r_THIS_y, r_DISTANCE_x, r_DISTANCE_y: real):
abs(safe_prjct_double(DET) - r_DET)<=ulp_dp(r_DET)/2 AND abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=ulp_dp(r_P_V1_x)/2 AND abs(safe_prjct_double(S_x) - r_S_x)<=ulp_dp(r_S_x)/2 AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=ulp_dp(r_P_V1_y)/2 AND abs(safe_prjct_double(S_y) - r_S_y)<=ulp_dp(r_S_y)/2 AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=ulp_dp(r_P_V2_x)/2 AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=ulp_dp(r_P_V2_y)/2 AND abs(safe_prjct_double(NEXT_x) - r_NEXT_x)<=ulp_dp(r_NEXT_x)/2 AND abs(safe_prjct_double(THIS_x) - r_THIS_x)<=ulp_dp(r_THIS_x)/2 AND abs(safe_prjct_double(NEXT_y) - r_NEXT_y)<=ulp_dp(r_NEXT_y)/2 AND abs(safe_prjct_double(THIS_y) - r_THIS_y)<=ulp_dp(r_THIS_y)/2 AND abs(safe_prjct_double(DISTANCE_x) - r_DISTANCE_x)<=ulp_dp(r_DISTANCE_x)/2 AND abs(safe_prjct_double(DISTANCE_y) - r_DISTANCE_y)<=ulp_dp(r_DISTANCE_y)/2
AND (TRUE)
AND r_P_V1_x ## [|-60000,60000|] AND  r_P_V1_y ## [|-60000,60000|] AND  r_P_V2_x ## [|-60000,60000|] AND  r_P_V2_y ## [|-60000,60000|] AND  r_S_x ## [|-60000,60000|] AND  r_S_y ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(P_V1_x, S_x),
                          THIS_y:double=sub_double(P_V1_y, S_y),
                          NEXT_x:double=sub_double(P_V2_x, S_x),
                          NEXT_y:double=sub_double(P_V2_y, S_y),
                          DISTANCE_x:double=sub_double(NEXT_x, THIS_x),
                          DISTANCE_y:double=sub_double(NEXT_y, THIS_y),
                          DET:double=sub_double(mul_double(DISTANCE_x, THIS_y), mul_double(DISTANCE_y, THIS_x))
                      IN DET) - LET r_THIS_x:real=(r_P_V1_x - r_S_x),
                                    r_THIS_y:real=(r_P_V1_y - r_S_y),
                                    r_NEXT_x:real=(r_P_V2_x - r_S_x),
                                    r_NEXT_y:real=(r_P_V2_y - r_S_y),
                                    r_DISTANCE_x:real=(r_NEXT_x - r_THIS_x),
                                    r_DISTANCE_y:real=(r_NEXT_y - r_THIS_y),
                                    r_DET:real=((r_DISTANCE_x * r_THIS_y) - (r_DISTANCE_y * r_THIS_x))
                                IN r_DET) <=6069716502183937 / 295147905179352825856

%|- winding_number_contrib_c_5 : PROOF
%|- (prove-concrete-lemma winding_number_contrib_expr_5 14 7)
%|- QED

winding_number_contrib_expr_6 : LEMMA
FORALL(DET: double, P_V1_x: double, S_x: double, P_V1_y: double, S_y: double, P_V2_x: double, P_V2_y: double, NEXT_x: double, THIS_x: double, NEXT_y: double, THIS_y: double, DISTANCE_x: double, DISTANCE_y: double, e_DET, e_P_V1_x, e_S_x, e_P_V1_y, e_S_y, e_P_V2_x, e_P_V2_y, e_NEXT_x, e_THIS_x, e_NEXT_y, e_THIS_y, e_DISTANCE_x, e_DISTANCE_y: nonneg_real, r_DET, r_P_V1_x, r_S_x, r_P_V1_y, r_S_y, r_P_V2_x, r_P_V2_y, r_NEXT_x, r_THIS_x, r_NEXT_y, r_THIS_y, r_DISTANCE_x, r_DISTANCE_y: real):
abs(safe_prjct_double(DET)-r_DET)<=e_DET AND abs(safe_prjct_double(P_V1_x)-r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(S_x)-r_S_x)<=e_S_x AND abs(safe_prjct_double(P_V1_y)-r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(S_y)-r_S_y)<=e_S_y AND abs(safe_prjct_double(P_V2_x)-r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y)-r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(NEXT_x)-r_NEXT_x)<=e_NEXT_x AND abs(safe_prjct_double(THIS_x)-r_THIS_x)<=e_THIS_x AND abs(safe_prjct_double(NEXT_y)-r_NEXT_y)<=e_NEXT_y AND abs(safe_prjct_double(THIS_y)-r_THIS_y)<=e_THIS_y AND abs(safe_prjct_double(DISTANCE_x)-r_DISTANCE_x)<=e_DISTANCE_x AND abs(safe_prjct_double(DISTANCE_y)-r_DISTANCE_y)<=e_DISTANCE_y
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(P_V1_x, S_x),
                          THIS_y:double=sub_double(P_V1_y, S_y),
                          NEXT_x:double=sub_double(P_V2_x, S_x),
                          NEXT_y:double=sub_double(P_V2_y, S_y),
                          DISTANCE_x:double=sub_double(NEXT_x, THIS_x),
                          DISTANCE_y:double=sub_double(NEXT_y, THIS_y),
                          DET:double=sub_double(mul_double(DISTANCE_x, THIS_y), mul_double(DISTANCE_y, THIS_x))
                      IN DET) - LET r_THIS_x:real=(r_P_V1_x - r_S_x),
                                    r_THIS_y:real=(r_P_V1_y - r_S_y),
                                    r_NEXT_x:real=(r_P_V2_x - r_S_x),
                                    r_NEXT_y:real=(r_P_V2_y - r_S_y),
                                    r_DISTANCE_x:real=(r_NEXT_x - r_THIS_x),
                                    r_DISTANCE_y:real=(r_NEXT_y - r_THIS_y),
                                    r_DET:real=((r_DISTANCE_x * r_THIS_y) - (r_DISTANCE_y * r_THIS_x))
                                IN r_DET) <= LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                 Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                             IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                    Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                       Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                   IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                          Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                      IN LET DISTANCE_x:real=(r_NEXT_x - r_THIS_x),
                                                             Err_DISTANCE_x:real=aebounddp_sub(r_NEXT_x, Err_NEXT_x, r_THIS_x, Err_THIS_x)
                                                         IN LET DISTANCE_y:real=(r_NEXT_y - r_THIS_y),
                                                                Err_DISTANCE_y:real=aebounddp_sub(r_NEXT_y, Err_NEXT_y, r_THIS_y, Err_THIS_y)
                                                            IN LET DET:real=((r_DISTANCE_x * r_THIS_y) - (r_DISTANCE_y * r_THIS_x)),
                                                                   Err_DET:real=aebounddp_sub((r_DISTANCE_x * r_THIS_y), aebounddp_mul(r_DISTANCE_x, Err_DISTANCE_x, r_THIS_y, Err_THIS_y), (r_DISTANCE_y * r_THIS_x), aebounddp_mul(r_DISTANCE_y, Err_DISTANCE_y, r_THIS_x, Err_THIS_x))
                                                               IN Err_DET

%|- winding_number_contrib_6: PROOF
%|- (precisa)
%|- QED


winding_number_contrib_expr_num_6 : LEMMA
FORALL(DET: double, P_V1_x: double, S_x: double, P_V1_y: double, S_y: double, P_V2_x: double, P_V2_y: double, NEXT_x: double, THIS_x: double, NEXT_y: double, THIS_y: double, DISTANCE_x: double, DISTANCE_y: double, r_DET, r_P_V1_x, r_S_x, r_P_V1_y, r_S_y, r_P_V2_x, r_P_V2_y, r_NEXT_x, r_THIS_x, r_NEXT_y, r_THIS_y, r_DISTANCE_x, r_DISTANCE_y: real):
abs(safe_prjct_double(DET) - r_DET)<=ulp_dp(r_DET)/2 AND abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=ulp_dp(r_P_V1_x)/2 AND abs(safe_prjct_double(S_x) - r_S_x)<=ulp_dp(r_S_x)/2 AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=ulp_dp(r_P_V1_y)/2 AND abs(safe_prjct_double(S_y) - r_S_y)<=ulp_dp(r_S_y)/2 AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=ulp_dp(r_P_V2_x)/2 AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=ulp_dp(r_P_V2_y)/2 AND abs(safe_prjct_double(NEXT_x) - r_NEXT_x)<=ulp_dp(r_NEXT_x)/2 AND abs(safe_prjct_double(THIS_x) - r_THIS_x)<=ulp_dp(r_THIS_x)/2 AND abs(safe_prjct_double(NEXT_y) - r_NEXT_y)<=ulp_dp(r_NEXT_y)/2 AND abs(safe_prjct_double(THIS_y) - r_THIS_y)<=ulp_dp(r_THIS_y)/2 AND abs(safe_prjct_double(DISTANCE_x) - r_DISTANCE_x)<=ulp_dp(r_DISTANCE_x)/2 AND abs(safe_prjct_double(DISTANCE_y) - r_DISTANCE_y)<=ulp_dp(r_DISTANCE_y)/2
AND (TRUE)
AND r_P_V1_x ## [|-60000,60000|] AND  r_P_V1_y ## [|-60000,60000|] AND  r_P_V2_x ## [|-60000,60000|] AND  r_P_V2_y ## [|-60000,60000|] AND  r_S_x ## [|-60000,60000|] AND  r_S_y ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(P_V1_x, S_x),
                          THIS_y:double=sub_double(P_V1_y, S_y),
                          NEXT_x:double=sub_double(P_V2_x, S_x),
                          NEXT_y:double=sub_double(P_V2_y, S_y),
                          DISTANCE_x:double=sub_double(NEXT_x, THIS_x),
                          DISTANCE_y:double=sub_double(NEXT_y, THIS_y),
                          DET:double=sub_double(mul_double(DISTANCE_x, THIS_y), mul_double(DISTANCE_y, THIS_x))
                      IN DET) - LET r_THIS_x:real=(r_P_V1_x - r_S_x),
                                    r_THIS_y:real=(r_P_V1_y - r_S_y),
                                    r_NEXT_x:real=(r_P_V2_x - r_S_x),
                                    r_NEXT_y:real=(r_P_V2_y - r_S_y),
                                    r_DISTANCE_x:real=(r_NEXT_x - r_THIS_x),
                                    r_DISTANCE_y:real=(r_NEXT_y - r_THIS_y),
                                    r_DET:real=((r_DISTANCE_x * r_THIS_y) - (r_DISTANCE_y * r_THIS_x))
                                IN r_DET) <=6069716502183937 / 295147905179352825856

%|- winding_number_contrib_c_6 : PROOF
%|- (prove-concrete-lemma winding_number_contrib_expr_6 14 7)
%|- QED

winding_number_expr_1 : LEMMA
FORALL(I: int, Sx: double, e_I, e_Sx: nonneg_real, r_I, r_Sx: real):
abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sx)-r_Sx)<=e_Sx
AND ((I < 2))
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx)
                      IN sub_double(Px[I], Sx)) - LET r_THIS_x:real=(Px[r_I] - r_Sx)
                                                  IN (Px[r_I] - r_Sx)) <= LET THIS_x:real=(r_Px - r_Sx),
                                                                              Err_THIS_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                          IN aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)

%|- winding_number_1: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_1 : LEMMA
FORALL(I: int, Sx: double, r_I, r_Sx: real):
abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sx) - r_Sx)<=ulp_dp(r_Sx)/2
AND ((I < 2))
AND r_Sx ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx)
                      IN sub_double(Px[I], Sx)) - LET r_THIS_x:real=(Px[r_I] - r_Sx)
                                                  IN (Px[r_I] - r_Sx)) <=1 / 68719476736

%|- winding_number_c_1 : PROOF
%|- (prove-concrete-lemma winding_number_expr_1 14 7)
%|- QED

winding_number_expr_2 : LEMMA
FORALL(I: int, Sy: double, e_I, e_Sy: nonneg_real, r_I, r_Sy: real):
abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sy)-r_Sy)<=e_Sy
AND ((I < 2))
IMPLIES
abs(safe_prjct_double(LET THIS_y:double=sub_double(Py[I], Sy)
                      IN sub_double(Py[I], Sy)) - LET r_THIS_y:real=(Py[r_I] - r_Sy)
                                                  IN (Py[r_I] - r_Sy)) <= LET THIS_y:real=(r_Py - r_Sy),
                                                                              Err_THIS_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                          IN aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)

%|- winding_number_2: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_2 : LEMMA
FORALL(I: int, Sy: double, r_I, r_Sy: real):
abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sy) - r_Sy)<=ulp_dp(r_Sy)/2
AND ((I < 2))
AND r_Sy ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_y:double=sub_double(Py[I], Sy)
                      IN sub_double(Py[I], Sy)) - LET r_THIS_y:real=(Py[r_I] - r_Sy)
                                                  IN (Py[r_I] - r_Sy)) <=1 / 68719476736

%|- winding_number_c_2 : PROOF
%|- (prove-concrete-lemma winding_number_expr_2 14 7)
%|- QED

winding_number_expr_3 : LEMMA
FORALL(I: int, Sx: double, e_I, e_Sx: nonneg_real, r_I, r_Sx: real):
abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sx)-r_Sx)<=e_Sx
AND ((I < 2))
IMPLIES
abs(safe_prjct_double(LET NEXT_x:double=sub_double(Px[add_int(I, 1)], Sx)
                      IN sub_double(Px[add_int(I, 1)], Sx)) - LET r_NEXT_x:real=(Px[(r_I + 1)] - r_Sx)
                                                              IN (Px[(r_I + 1)] - r_Sx)) <= LET NEXT_x:real=(r_Px - r_Sx),
                                                                                                Err_NEXT_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                            IN aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)

%|- winding_number_3: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_3 : LEMMA
FORALL(I: int, Sx: double, r_I, r_Sx: real):
abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sx) - r_Sx)<=ulp_dp(r_Sx)/2
AND ((I < 2))
AND r_Sx ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET NEXT_x:double=sub_double(Px[add_int(I, 1)], Sx)
                      IN sub_double(Px[add_int(I, 1)], Sx)) - LET r_NEXT_x:real=(Px[(r_I + 1)] - r_Sx)
                                                              IN (Px[(r_I + 1)] - r_Sx)) <=1 / 68719476736

%|- winding_number_c_3 : PROOF
%|- (prove-concrete-lemma winding_number_expr_3 14 7)
%|- QED

winding_number_expr_4 : LEMMA
FORALL(I: int, Sy: double, e_I, e_Sy: nonneg_real, r_I, r_Sy: real):
abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sy)-r_Sy)<=e_Sy
AND ((I < 2))
IMPLIES
abs(safe_prjct_double(LET NEXT_y:double=sub_double(Py[add_int(I, 1)], Sy)
                      IN sub_double(Py[add_int(I, 1)], Sy)) - LET r_NEXT_y:real=(Py[(r_I + 1)] - r_Sy)
                                                              IN (Py[(r_I + 1)] - r_Sy)) <= LET NEXT_y:real=(r_Py - r_Sy),
                                                                                                Err_NEXT_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                            IN aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)

%|- winding_number_4: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_4 : LEMMA
FORALL(I: int, Sy: double, r_I, r_Sy: real):
abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sy) - r_Sy)<=ulp_dp(r_Sy)/2
AND ((I < 2))
AND r_Sy ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET NEXT_y:double=sub_double(Py[add_int(I, 1)], Sy)
                      IN sub_double(Py[add_int(I, 1)], Sy)) - LET r_NEXT_y:real=(Py[(r_I + 1)] - r_Sy)
                                                              IN (Py[(r_I + 1)] - r_Sy)) <=1 / 68719476736

%|- winding_number_c_4 : PROOF
%|- (prove-concrete-lemma winding_number_expr_4 14 7)
%|- QED

winding_number_expr_5 : LEMMA
FORALL(I: int, Sx: double, Sy: double, e_I, e_Sx, e_Sy: nonneg_real, r_I, r_Sx, r_Sy: real):
abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sx)-r_Sx)<=e_Sx AND abs(safe_prjct_double(Sy)-r_Sy)<=e_Sy
AND ((I < 2))
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx),
                          THIS_y:double=sub_double(Py[I], Sy),
                          NEXT_x:double=sub_double(Px[add_int(I, 1)], Sx),
                          NEXT_y:double=sub_double(Py[add_int(I, 1)], Sy),
                          DISTANCE_x:double=sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)),
                          DISTANCE_y:double=sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)),
                          DET:double=sub_double(mul_double(sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))
                      IN sub_double(mul_double(sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))) - LET r_THIS_x:real=(Px[r_I] - r_Sx),
                                                                                                                                                                                                                                                             r_THIS_y:real=(Py[r_I] - r_Sy),
                                                                                                                                                                                                                                                             r_NEXT_x:real=(Px[(r_I + 1)] - r_Sx),
                                                                                                                                                                                                                                                             r_NEXT_y:real=(Py[(r_I + 1)] - r_Sy),
                                                                                                                                                                                                                                                             r_DISTANCE_x:real=((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)),
                                                                                                                                                                                                                                                             r_DISTANCE_y:real=((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)),
                                                                                                                                                                                                                                                             r_DET:real=((((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))
                                                                                                                                                                                                                                                         IN ((((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))) <= LET THIS_x:real=(r_Px - r_Sx),
                                                                                                                                                                                                                                                                                                                                                                                                          Err_THIS_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                                                                                                                                                                                                                                                                                                                                      IN LET THIS_y:real=(r_Py - r_Sy),
                                                                                                                                                                                                                                                                                                                                                                                                             Err_THIS_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                                                                                                                                                                                                                                                                                                                                         IN LET NEXT_x:real=(r_Px - r_Sx),
                                                                                                                                                                                                                                                                                                                                                                                                                Err_NEXT_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                                                                                                                                                                                                                                                                                                                                            IN LET NEXT_y:real=(r_Py - r_Sy),
                                                                                                                                                                                                                                                                                                                                                                                                                   Err_NEXT_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                                                                                                                                                                                                                                                                                                                                               IN LET DISTANCE_x:real=((r_Px - r_Sx) - (r_Px - r_Sx)),
                                                                                                                                                                                                                                                                                                                                                                                                                      Err_DISTANCE_x:real=aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx))
                                                                                                                                                                                                                                                                                                                                                                                                                  IN LET DISTANCE_y:real=((r_Py - r_Sy) - (r_Py - r_Sy)),
                                                                                                                                                                                                                                                                                                                                                                                                                         Err_DISTANCE_y:real=aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy))
                                                                                                                                                                                                                                                                                                                                                                                                                     IN LET DET:real=((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)) - (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx))),
                                                                                                                                                                                                                                                                                                                                                                                                                            Err_DET:real=aebounddp_sub((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)), aebounddp_mul(((r_Px - r_Sx) - (r_Px - r_Sx)), aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx)), aebounddp_mul(((r_Py - r_Sy) - (r_Py - r_Sy)), aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)))
                                                                                                                                                                                                                                                                                                                                                                                                                        IN aebounddp_sub((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)), aebounddp_mul(((r_Px - r_Sx) - (r_Px - r_Sx)), aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx)), aebounddp_mul(((r_Py - r_Sy) - (r_Py - r_Sy)), aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)))

%|- winding_number_5: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_5 : LEMMA
FORALL(I: int, Sx: double, Sy: double, r_I, r_Sx, r_Sy: real):
abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sx) - r_Sx)<=ulp_dp(r_Sx)/2 AND abs(safe_prjct_double(Sy) - r_Sy)<=ulp_dp(r_Sy)/2
AND ((I < 2))
AND r_Sx ## [|-60000,60000|] AND  r_Sy ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx),
                          THIS_y:double=sub_double(Py[I], Sy),
                          NEXT_x:double=sub_double(Px[add_int(I, 1)], Sx),
                          NEXT_y:double=sub_double(Py[add_int(I, 1)], Sy),
                          DISTANCE_x:double=sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)),
                          DISTANCE_y:double=sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)),
                          DET:double=sub_double(mul_double(sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))
                      IN sub_double(mul_double(sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))) - LET r_THIS_x:real=(Px[r_I] - r_Sx),
                                                                                                                                                                                                                                                             r_THIS_y:real=(Py[r_I] - r_Sy),
                                                                                                                                                                                                                                                             r_NEXT_x:real=(Px[(r_I + 1)] - r_Sx),
                                                                                                                                                                                                                                                             r_NEXT_y:real=(Py[(r_I + 1)] - r_Sy),
                                                                                                                                                                                                                                                             r_DISTANCE_x:real=((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)),
                                                                                                                                                                                                                                                             r_DISTANCE_y:real=((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)),
                                                                                                                                                                                                                                                             r_DET:real=((((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))
                                                                                                                                                                                                                                                         IN ((((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))) <=4123168604160003 / 590295810358705651712

%|- winding_number_c_5 : PROOF
%|- (prove-concrete-lemma winding_number_expr_5 14 7)
%|- QED

winding_number_expr_6 : LEMMA
FORALL(I: int, Sx: double, Sy: double, e_I, e_Sx, e_Sy: nonneg_real, r_I, r_Sx, r_Sy: real):
abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sx)-r_Sx)<=e_Sx AND abs(safe_prjct_double(Sy)-r_Sy)<=e_Sy
AND ((I < 2))
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx),
                          THIS_y:double=sub_double(Py[I], Sy),
                          NEXT_x:double=sub_double(Px[add_int(I, 1)], Sx),
                          NEXT_y:double=sub_double(Py[add_int(I, 1)], Sy),
                          DISTANCE_x:double=sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)),
                          DISTANCE_y:double=sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)),
                          DET:double=sub_double(mul_double(sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))
                      IN sub_double(mul_double(sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))) - LET r_THIS_x:real=(Px[r_I] - r_Sx),
                                                                                                                                                                                                                                                             r_THIS_y:real=(Py[r_I] - r_Sy),
                                                                                                                                                                                                                                                             r_NEXT_x:real=(Px[(r_I + 1)] - r_Sx),
                                                                                                                                                                                                                                                             r_NEXT_y:real=(Py[(r_I + 1)] - r_Sy),
                                                                                                                                                                                                                                                             r_DISTANCE_x:real=((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)),
                                                                                                                                                                                                                                                             r_DISTANCE_y:real=((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)),
                                                                                                                                                                                                                                                             r_DET:real=((((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))
                                                                                                                                                                                                                                                         IN ((((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))) <= LET THIS_x:real=(r_Px - r_Sx),
                                                                                                                                                                                                                                                                                                                                                                                                          Err_THIS_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                                                                                                                                                                                                                                                                                                                                      IN LET THIS_y:real=(r_Py - r_Sy),
                                                                                                                                                                                                                                                                                                                                                                                                             Err_THIS_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                                                                                                                                                                                                                                                                                                                                         IN LET NEXT_x:real=(r_Px - r_Sx),
                                                                                                                                                                                                                                                                                                                                                                                                                Err_NEXT_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                                                                                                                                                                                                                                                                                                                                            IN LET NEXT_y:real=(r_Py - r_Sy),
                                                                                                                                                                                                                                                                                                                                                                                                                   Err_NEXT_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                                                                                                                                                                                                                                                                                                                                               IN LET DISTANCE_x:real=((r_Px - r_Sx) - (r_Px - r_Sx)),
                                                                                                                                                                                                                                                                                                                                                                                                                      Err_DISTANCE_x:real=aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx))
                                                                                                                                                                                                                                                                                                                                                                                                                  IN LET DISTANCE_y:real=((r_Py - r_Sy) - (r_Py - r_Sy)),
                                                                                                                                                                                                                                                                                                                                                                                                                         Err_DISTANCE_y:real=aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy))
                                                                                                                                                                                                                                                                                                                                                                                                                     IN LET DET:real=((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)) - (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx))),
                                                                                                                                                                                                                                                                                                                                                                                                                            Err_DET:real=aebounddp_sub((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)), aebounddp_mul(((r_Px - r_Sx) - (r_Px - r_Sx)), aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx)), aebounddp_mul(((r_Py - r_Sy) - (r_Py - r_Sy)), aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)))
                                                                                                                                                                                                                                                                                                                                                                                                                        IN aebounddp_sub((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)), aebounddp_mul(((r_Px - r_Sx) - (r_Px - r_Sx)), aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx)), aebounddp_mul(((r_Py - r_Sy) - (r_Py - r_Sy)), aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)))

%|- winding_number_6: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_6 : LEMMA
FORALL(I: int, Sx: double, Sy: double, r_I, r_Sx, r_Sy: real):
abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sx) - r_Sx)<=ulp_dp(r_Sx)/2 AND abs(safe_prjct_double(Sy) - r_Sy)<=ulp_dp(r_Sy)/2
AND ((I < 2))
AND r_Sx ## [|-60000,60000|] AND  r_Sy ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx),
                          THIS_y:double=sub_double(Py[I], Sy),
                          NEXT_x:double=sub_double(Px[add_int(I, 1)], Sx),
                          NEXT_y:double=sub_double(Py[add_int(I, 1)], Sy),
                          DISTANCE_x:double=sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)),
                          DISTANCE_y:double=sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)),
                          DET:double=sub_double(mul_double(sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))
                      IN sub_double(mul_double(sub_double(sub_double(Px[add_int(I, 1)], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[add_int(I, 1)], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))) - LET r_THIS_x:real=(Px[r_I] - r_Sx),
                                                                                                                                                                                                                                                             r_THIS_y:real=(Py[r_I] - r_Sy),
                                                                                                                                                                                                                                                             r_NEXT_x:real=(Px[(r_I + 1)] - r_Sx),
                                                                                                                                                                                                                                                             r_NEXT_y:real=(Py[(r_I + 1)] - r_Sy),
                                                                                                                                                                                                                                                             r_DISTANCE_x:real=((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)),
                                                                                                                                                                                                                                                             r_DISTANCE_y:real=((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)),
                                                                                                                                                                                                                                                             r_DET:real=((((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))
                                                                                                                                                                                                                                                         IN ((((Px[(r_I + 1)] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[(r_I + 1)] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))) <=4123168604160003 / 590295810358705651712

%|- winding_number_c_6 : PROOF
%|- (prove-concrete-lemma winding_number_expr_6 14 7)
%|- QED

winding_number_expr_7 : LEMMA
FORALL(I: int, Sx: double, e_I, e_Sx: nonneg_real, r_I, r_Sx: real):
abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sx)-r_Sx)<=e_Sx
AND (NOT((I < 2)))
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx)
                      IN sub_double(Px[I], Sx)) - LET r_THIS_x:real=(Px[r_I] - r_Sx)
                                                  IN (Px[r_I] - r_Sx)) <= LET THIS_x:real=(r_Px - r_Sx),
                                                                              Err_THIS_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                          IN aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)

%|- winding_number_7: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_7 : LEMMA
FORALL(I: int, Sx: double, r_I, r_Sx: real):
abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sx) - r_Sx)<=ulp_dp(r_Sx)/2
AND (NOT((I < 2)))
AND r_Sx ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx)
                      IN sub_double(Px[I], Sx)) - LET r_THIS_x:real=(Px[r_I] - r_Sx)
                                                  IN (Px[r_I] - r_Sx)) <=1 / 68719476736

%|- winding_number_c_7 : PROOF
%|- (prove-concrete-lemma winding_number_expr_7 14 7)
%|- QED

winding_number_expr_8 : LEMMA
FORALL(I: int, Sy: double, e_I, e_Sy: nonneg_real, r_I, r_Sy: real):
abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sy)-r_Sy)<=e_Sy
AND (NOT((I < 2)))
IMPLIES
abs(safe_prjct_double(LET THIS_y:double=sub_double(Py[I], Sy)
                      IN sub_double(Py[I], Sy)) - LET r_THIS_y:real=(Py[r_I] - r_Sy)
                                                  IN (Py[r_I] - r_Sy)) <= LET THIS_y:real=(r_Py - r_Sy),
                                                                              Err_THIS_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                          IN aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)

%|- winding_number_8: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_8 : LEMMA
FORALL(I: int, Sy: double, r_I, r_Sy: real):
abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sy) - r_Sy)<=ulp_dp(r_Sy)/2
AND (NOT((I < 2)))
AND r_Sy ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_y:double=sub_double(Py[I], Sy)
                      IN sub_double(Py[I], Sy)) - LET r_THIS_y:real=(Py[r_I] - r_Sy)
                                                  IN (Py[r_I] - r_Sy)) <=1 / 68719476736

%|- winding_number_c_8 : PROOF
%|- (prove-concrete-lemma winding_number_expr_8 14 7)
%|- QED

winding_number_expr_9 : LEMMA
FORALL(Sx: double, e_Sx: nonneg_real, r_Sx: real):
abs(safe_prjct_double(Sx)-r_Sx)<=e_Sx
AND (NOT((I < 2)))
IMPLIES
abs(safe_prjct_double(LET NEXT_x:double=sub_double(Px[0], Sx)
                      IN sub_double(Px[0], Sx)) - LET r_NEXT_x:real=(Px[0] - r_Sx)
                                                  IN (Px[0] - r_Sx)) <= LET NEXT_x:real=(r_Px - r_Sx),
                                                                            Err_NEXT_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                        IN aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)

%|- winding_number_9: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_9 : LEMMA
FORALL(Sx: double, r_Sx: real):
abs(safe_prjct_double(Sx) - r_Sx)<=ulp_dp(r_Sx)/2
AND (NOT((I < 2)))
AND r_Sx ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET NEXT_x:double=sub_double(Px[0], Sx)
                      IN sub_double(Px[0], Sx)) - LET r_NEXT_x:real=(Px[0] - r_Sx)
                                                  IN (Px[0] - r_Sx)) <=1 / 68719476736

%|- winding_number_c_9 : PROOF
%|- (prove-concrete-lemma winding_number_expr_9 14 7)
%|- QED

winding_number_expr_10 : LEMMA
FORALL(Sy: double, e_Sy: nonneg_real, r_Sy: real):
abs(safe_prjct_double(Sy)-r_Sy)<=e_Sy
AND (NOT((I < 2)))
IMPLIES
abs(safe_prjct_double(LET NEXT_y:double=sub_double(Py[0], Sy)
                      IN sub_double(Py[0], Sy)) - LET r_NEXT_y:real=(Py[0] - r_Sy)
                                                  IN (Py[0] - r_Sy)) <= LET NEXT_y:real=(r_Py - r_Sy),
                                                                            Err_NEXT_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                        IN aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)

%|- winding_number_10: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_10 : LEMMA
FORALL(Sy: double, r_Sy: real):
abs(safe_prjct_double(Sy) - r_Sy)<=ulp_dp(r_Sy)/2
AND (NOT((I < 2)))
AND r_Sy ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET NEXT_y:double=sub_double(Py[0], Sy)
                      IN sub_double(Py[0], Sy)) - LET r_NEXT_y:real=(Py[0] - r_Sy)
                                                  IN (Py[0] - r_Sy)) <=1 / 68719476736

%|- winding_number_c_10 : PROOF
%|- (prove-concrete-lemma winding_number_expr_10 14 7)
%|- QED

winding_number_expr_11 : LEMMA
FORALL(Sx: double, I: int, Sy: double, e_Sx, e_I, e_Sy: nonneg_real, r_Sx, r_I, r_Sy: real):
abs(safe_prjct_double(Sx)-r_Sx)<=e_Sx AND abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sy)-r_Sy)<=e_Sy
AND (NOT((I < 2)))
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx),
                          THIS_y:double=sub_double(Py[I], Sy),
                          NEXT_x:double=sub_double(Px[0], Sx),
                          NEXT_y:double=sub_double(Py[0], Sy),
                          DISTANCE_x:double=sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)),
                          DISTANCE_y:double=sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)),
                          DET:double=sub_double(mul_double(sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))
                      IN sub_double(mul_double(sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))) - LET r_THIS_x:real=(Px[r_I] - r_Sx),
                                                                                                                                                                                                                                     r_THIS_y:real=(Py[r_I] - r_Sy),
                                                                                                                                                                                                                                     r_NEXT_x:real=(Px[0] - r_Sx),
                                                                                                                                                                                                                                     r_NEXT_y:real=(Py[0] - r_Sy),
                                                                                                                                                                                                                                     r_DISTANCE_x:real=((Px[0] - r_Sx) - (Px[r_I] - r_Sx)),
                                                                                                                                                                                                                                     r_DISTANCE_y:real=((Py[0] - r_Sy) - (Py[r_I] - r_Sy)),
                                                                                                                                                                                                                                     r_DET:real=((((Px[0] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[0] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))
                                                                                                                                                                                                                                 IN ((((Px[0] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[0] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))) <= LET THIS_x:real=(r_Px - r_Sx),
                                                                                                                                                                                                                                                                                                                                                                  Err_THIS_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                                                                                                                                                                                                                                                                                              IN LET THIS_y:real=(r_Py - r_Sy),
                                                                                                                                                                                                                                                                                                                                                                     Err_THIS_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                                                                                                                                                                                                                                                                                                 IN LET NEXT_x:real=(r_Px - r_Sx),
                                                                                                                                                                                                                                                                                                                                                                        Err_NEXT_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                                                                                                                                                                                                                                                                                                    IN LET NEXT_y:real=(r_Py - r_Sy),
                                                                                                                                                                                                                                                                                                                                                                           Err_NEXT_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                                                                                                                                                                                                                                                                                                       IN LET DISTANCE_x:real=((r_Px - r_Sx) - (r_Px - r_Sx)),
                                                                                                                                                                                                                                                                                                                                                                              Err_DISTANCE_x:real=aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx))
                                                                                                                                                                                                                                                                                                                                                                          IN LET DISTANCE_y:real=((r_Py - r_Sy) - (r_Py - r_Sy)),
                                                                                                                                                                                                                                                                                                                                                                                 Err_DISTANCE_y:real=aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy))
                                                                                                                                                                                                                                                                                                                                                                             IN LET DET:real=((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)) - (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx))),
                                                                                                                                                                                                                                                                                                                                                                                    Err_DET:real=aebounddp_sub((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)), aebounddp_mul(((r_Px - r_Sx) - (r_Px - r_Sx)), aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx)), aebounddp_mul(((r_Py - r_Sy) - (r_Py - r_Sy)), aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)))
                                                                                                                                                                                                                                                                                                                                                                                IN aebounddp_sub((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)), aebounddp_mul(((r_Px - r_Sx) - (r_Px - r_Sx)), aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx)), aebounddp_mul(((r_Py - r_Sy) - (r_Py - r_Sy)), aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)))

%|- winding_number_11: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_11 : LEMMA
FORALL(Sx: double, I: int, Sy: double, r_Sx, r_I, r_Sy: real):
abs(safe_prjct_double(Sx) - r_Sx)<=ulp_dp(r_Sx)/2 AND abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sy) - r_Sy)<=ulp_dp(r_Sy)/2
AND (NOT((I < 2)))
AND r_Sx ## [|-60000,60000|] AND  r_Sy ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx),
                          THIS_y:double=sub_double(Py[I], Sy),
                          NEXT_x:double=sub_double(Px[0], Sx),
                          NEXT_y:double=sub_double(Py[0], Sy),
                          DISTANCE_x:double=sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)),
                          DISTANCE_y:double=sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)),
                          DET:double=sub_double(mul_double(sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))
                      IN sub_double(mul_double(sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))) - LET r_THIS_x:real=(Px[r_I] - r_Sx),
                                                                                                                                                                                                                                     r_THIS_y:real=(Py[r_I] - r_Sy),
                                                                                                                                                                                                                                     r_NEXT_x:real=(Px[0] - r_Sx),
                                                                                                                                                                                                                                     r_NEXT_y:real=(Py[0] - r_Sy),
                                                                                                                                                                                                                                     r_DISTANCE_x:real=((Px[0] - r_Sx) - (Px[r_I] - r_Sx)),
                                                                                                                                                                                                                                     r_DISTANCE_y:real=((Py[0] - r_Sy) - (Py[r_I] - r_Sy)),
                                                                                                                                                                                                                                     r_DET:real=((((Px[0] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[0] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))
                                                                                                                                                                                                                                 IN ((((Px[0] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[0] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))) <=4123168604160003 / 590295810358705651712

%|- winding_number_c_11 : PROOF
%|- (prove-concrete-lemma winding_number_expr_11 14 7)
%|- QED

winding_number_expr_12 : LEMMA
FORALL(Sx: double, I: int, Sy: double, e_Sx, e_I, e_Sy: nonneg_real, r_Sx, r_I, r_Sy: real):
abs(safe_prjct_double(Sx)-r_Sx)<=e_Sx AND abs(safe_prjct_double(I)-r_I)<=e_I AND abs(safe_prjct_double(Sy)-r_Sy)<=e_Sy
AND (NOT((I < 2)))
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx),
                          THIS_y:double=sub_double(Py[I], Sy),
                          NEXT_x:double=sub_double(Px[0], Sx),
                          NEXT_y:double=sub_double(Py[0], Sy),
                          DISTANCE_x:double=sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)),
                          DISTANCE_y:double=sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)),
                          DET:double=sub_double(mul_double(sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))
                      IN sub_double(mul_double(sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))) - LET r_THIS_x:real=(Px[r_I] - r_Sx),
                                                                                                                                                                                                                                     r_THIS_y:real=(Py[r_I] - r_Sy),
                                                                                                                                                                                                                                     r_NEXT_x:real=(Px[0] - r_Sx),
                                                                                                                                                                                                                                     r_NEXT_y:real=(Py[0] - r_Sy),
                                                                                                                                                                                                                                     r_DISTANCE_x:real=((Px[0] - r_Sx) - (Px[r_I] - r_Sx)),
                                                                                                                                                                                                                                     r_DISTANCE_y:real=((Py[0] - r_Sy) - (Py[r_I] - r_Sy)),
                                                                                                                                                                                                                                     r_DET:real=((((Px[0] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[0] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))
                                                                                                                                                                                                                                 IN ((((Px[0] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[0] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))) <= LET THIS_x:real=(r_Px - r_Sx),
                                                                                                                                                                                                                                                                                                                                                                  Err_THIS_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                                                                                                                                                                                                                                                                                              IN LET THIS_y:real=(r_Py - r_Sy),
                                                                                                                                                                                                                                                                                                                                                                     Err_THIS_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                                                                                                                                                                                                                                                                                                 IN LET NEXT_x:real=(r_Px - r_Sx),
                                                                                                                                                                                                                                                                                                                                                                        Err_NEXT_x:real=aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)
                                                                                                                                                                                                                                                                                                                                                                    IN LET NEXT_y:real=(r_Py - r_Sy),
                                                                                                                                                                                                                                                                                                                                                                           Err_NEXT_y:real=aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)
                                                                                                                                                                                                                                                                                                                                                                       IN LET DISTANCE_x:real=((r_Px - r_Sx) - (r_Px - r_Sx)),
                                                                                                                                                                                                                                                                                                                                                                              Err_DISTANCE_x:real=aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx))
                                                                                                                                                                                                                                                                                                                                                                          IN LET DISTANCE_y:real=((r_Py - r_Sy) - (r_Py - r_Sy)),
                                                                                                                                                                                                                                                                                                                                                                                 Err_DISTANCE_y:real=aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy))
                                                                                                                                                                                                                                                                                                                                                                             IN LET DET:real=((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)) - (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx))),
                                                                                                                                                                                                                                                                                                                                                                                    Err_DET:real=aebounddp_sub((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)), aebounddp_mul(((r_Px - r_Sx) - (r_Px - r_Sx)), aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx)), aebounddp_mul(((r_Py - r_Sy) - (r_Py - r_Sy)), aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)))
                                                                                                                                                                                                                                                                                                                                                                                IN aebounddp_sub((((r_Px - r_Sx) - (r_Px - r_Sx)) * (r_Py - r_Sy)), aebounddp_mul(((r_Px - r_Sx) - (r_Px - r_Sx)), aebounddp_sub((r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (((r_Py - r_Sy) - (r_Py - r_Sy)) * (r_Px - r_Sx)), aebounddp_mul(((r_Py - r_Sy) - (r_Py - r_Sy)), aebounddp_sub((r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy), (r_Py - r_Sy), aebounddp_sub(r_Py, e_Py, r_Sy, e_Sy)), (r_Px - r_Sx), aebounddp_sub(r_Px, e_Px, r_Sx, e_Sx)))

%|- winding_number_12: PROOF
%|- (precisa)
%|- QED


winding_number_expr_num_12 : LEMMA
FORALL(Sx: double, I: int, Sy: double, r_Sx, r_I, r_Sy: real):
abs(safe_prjct_double(Sx) - r_Sx)<=ulp_dp(r_Sx)/2 AND abs(I - r_I)<= 0 AND abs(safe_prjct_double(Sy) - r_Sy)<=ulp_dp(r_Sy)/2
AND (NOT((I < 2)))
AND r_Sx ## [|-60000,60000|] AND  r_Sy ## [|-60000,60000|]
IMPLIES
abs(safe_prjct_double(LET THIS_x:double=sub_double(Px[I], Sx),
                          THIS_y:double=sub_double(Py[I], Sy),
                          NEXT_x:double=sub_double(Px[0], Sx),
                          NEXT_y:double=sub_double(Py[0], Sy),
                          DISTANCE_x:double=sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)),
                          DISTANCE_y:double=sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)),
                          DET:double=sub_double(mul_double(sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))
                      IN sub_double(mul_double(sub_double(sub_double(Px[0], Sx), sub_double(Px[I], Sx)), sub_double(Py[I], Sy)), mul_double(sub_double(sub_double(Py[0], Sy), sub_double(Py[I], Sy)), sub_double(Px[I], Sx)))) - LET r_THIS_x:real=(Px[r_I] - r_Sx),
                                                                                                                                                                                                                                     r_THIS_y:real=(Py[r_I] - r_Sy),
                                                                                                                                                                                                                                     r_NEXT_x:real=(Px[0] - r_Sx),
                                                                                                                                                                                                                                     r_NEXT_y:real=(Py[0] - r_Sy),
                                                                                                                                                                                                                                     r_DISTANCE_x:real=((Px[0] - r_Sx) - (Px[r_I] - r_Sx)),
                                                                                                                                                                                                                                     r_DISTANCE_y:real=((Py[0] - r_Sy) - (Py[r_I] - r_Sy)),
                                                                                                                                                                                                                                     r_DET:real=((((Px[0] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[0] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))
                                                                                                                                                                                                                                 IN ((((Px[0] - r_Sx) - (Px[r_I] - r_Sx)) * (Py[r_I] - r_Sy)) - (((Py[0] - r_Sy) - (Py[r_I] - r_Sy)) * (Px[r_I] - r_Sx)))) <=4123168604160003 / 590295810358705651712

%|- winding_number_c_12 : PROOF
%|- (prove-concrete-lemma winding_number_expr_12 14 7)
%|- QED


END winding_number_expr_cert