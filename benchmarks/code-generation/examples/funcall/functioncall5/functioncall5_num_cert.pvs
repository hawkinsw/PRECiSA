% This file is automatically generated by PRECiSA 

% maxDepth: 7 , prec: 10^-14

functioncall5_num_cert: THEORY
BEGIN
IMPORTING cert_functioncall5, PRECiSA@bbiasp, PRECiSA@bbiadp, PRECiSA@strategies 

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Results: LET DET:double=sub_double(V1, V2)
                          IN -2, LET DET:double=sub_double(V1, V2)
                                 IN 2
% Real Results: LET DET:real=(r_V1 - r_V2)
                IN -2, LET DET:real=(r_V1 - r_V2)
                       IN 2
% Control Flow:  Stable
f_fp_c_0 : LEMMA
FORALL(r_V1, r_V2: real, V1: double, V2: double):
abs(safe_prjct_double(V1) - r_V1)<=ulp_dp(r_V1)/2 AND abs(safe_prjct_double(V2) - r_V2)<=ulp_dp(r_V2)/2
AND ((NOT(((r_V1 - r_V2) <= 0)) AND NOT((sub_double(V1, V2) <= integerToDouble(0)))) OR (((r_V1 - r_V2) <= 0) AND (sub_double(V1, V2) <= integerToDouble(0))))
AND r_V1 ## [|-60000,60000|] AND  r_V2 ## [|-60000,60000|]
IMPLIES
abs(f_fp(V1, V2) - f(r_V1, r_V2))<=0 / 1

%|- f_fp_c_0 : PROOF
%|- (prove-concrete-lemma f_fp_0 14 7)
%|- QED

f_fp_err_0 : LEMMA
FORALL(r_V1, r_V2: real, V1: double, V2: double):
abs(safe_prjct_double(V1) - r_V1)<=ulp_dp(r_V1)/2 AND abs(safe_prjct_double(V2) - r_V2)<=ulp_dp(r_V2)/2
AND ((NOT(((r_V1 - r_V2) <= 0)) AND NOT((sub_double(V1, V2) <= integerToDouble(0)))) OR (((r_V1 - r_V2) <= 0) AND (sub_double(V1, V2) <= integerToDouble(0))))
AND r_V1 ## [|-60000,60000|] AND  r_V2 ## [|-60000,60000|]
IMPLIES
LET DET:real=(r_V1 - r_V2),
    Err_DET:real=aebounddp_sub(r_V1, ulp_dp(r_V1)/2, r_V2, ulp_dp(r_V2)/2)
IN max((0 / 1), (0 / 1))<=0 / 1

% Floating-Point Results: LET A:int=f_fp(X, Y)
                          IN LET B:int=f_fp(Y, X)
                             IN LET C:double=mul_double(X, Y)
                                IN add_int(1, A), LET A:int=f_fp(X, Y)
                                                  IN LET B:int=f_fp(Y, X)
                                                     IN LET C:double=mul_double(X, Y)
                                                        IN add_int(2, B)
% Real Results: LET A:int=LET DET:real=(r_X - r_Y)
                          IN -2
                IN LET B:int=LET DET:real=(r_Y - r_X)
                             IN -2
                   IN LET C:real=(r_X * r_Y)
                      IN (1 + r_A), LET A:int=LET DET:real=(r_X - r_Y)
                                              IN -2
                                    IN LET B:int=LET DET:real=(r_Y - r_X)
                                                 IN -2
                                       IN LET C:real=(r_X * r_Y)
                                          IN (2 + r_B)
% Control Flow:  Stable
g_fp_c_0 : LEMMA
FORALL(r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2 AND abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND ((NOT(((r_X * r_Y) < 0)) AND NOT((mul_double(X, Y) < integerToDouble(0)))) OR (NOT(((r_X - r_Y) <= 0)) AND NOT((sub_double(X, Y) <= integerToDouble(0)))) OR (NOT(((r_Y - r_X) <= 0)) AND NOT((sub_double(Y, X) <= integerToDouble(0)))) OR (((r_X * r_Y) < 0) AND (mul_double(X, Y) < integerToDouble(0))) OR (((r_X - r_Y) <= 0) AND (sub_double(X, Y) <= integerToDouble(0))) OR (((r_Y - r_X) <= 0) AND (sub_double(Y, X) <= integerToDouble(0))))
AND r_X ## [|-60000,60000|] AND  r_Y ## [|-60000,60000|]
IMPLIES
abs(g_fp(X, Y) - g(r_X, r_Y))<=0 / 1

%|- g_fp_c_0 : PROOF
%|- (prove-concrete-lemma g_fp_0 14 7)
%|- QED

g_fp_err_0 : LEMMA
FORALL(r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2 AND abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND ((NOT(((r_X * r_Y) < 0)) AND NOT((mul_double(X, Y) < integerToDouble(0)))) OR (NOT(((r_X - r_Y) <= 0)) AND NOT((sub_double(X, Y) <= integerToDouble(0)))) OR (NOT(((r_Y - r_X) <= 0)) AND NOT((sub_double(Y, X) <= integerToDouble(0)))) OR (((r_X * r_Y) < 0) AND (mul_double(X, Y) < integerToDouble(0))) OR (((r_X - r_Y) <= 0) AND (sub_double(X, Y) <= integerToDouble(0))) OR (((r_Y - r_X) <= 0) AND (sub_double(Y, X) <= integerToDouble(0))))
AND r_X ## [|-60000,60000|] AND  r_Y ## [|-60000,60000|]
IMPLIES
LET A:int=LET DET:real=(r_X - r_Y)
          IN -2,
    Err_A:real=LET DET:real=(r_X - r_Y),
                   Err_DET:real=aebounddp_sub(r_X, ulp_dp(r_X)/2, r_Y, ulp_dp(r_Y)/2)
               IN max((0 / 1), (0 / 1))
IN LET B:int=LET DET:real=(r_Y - r_X)
             IN -2,
       Err_B:real=LET DET:real=(r_Y - r_X),
                      Err_DET:real=aebounddp_sub(r_Y, ulp_dp(r_Y)/2, r_X, ulp_dp(r_X)/2)
                  IN max((0 / 1), (0 / 1))
   IN LET C:real=(r_X * r_Y),
          Err_C:real=aebounddp_mul(r_X, ulp_dp(r_X)/2, r_Y, ulp_dp(r_Y)/2)
      IN max(aeboundi_add(1, (0 / 1), r_A, (0 / 1)), aeboundi_add(2, (0 / 1), r_B, (0 / 1)))<=0 / 1

% Floating-Point Results: LET A:int=f_fp(X, Y)
                          IN LET B:int=f_fp(Y, X)
                             IN LET C:double=mul_double(X, Y)
                                IN add_int(1, A), LET A:int=f_fp(X, Y)
                                                  IN LET B:int=f_fp(Y, X)
                                                     IN LET C:double=mul_double(X, Y)
                                                        IN add_int(2, B)
% Real Results: LET A:int=LET DET:real=(r_X - r_Y)
                          IN -2
                IN LET B:int=LET DET:real=(r_Y - r_X)
                             IN 2
                   IN LET C:real=(r_X * r_Y)
                      IN (1 + r_A), LET A:int=LET DET:real=(r_X - r_Y)
                                              IN -2
                                    IN LET B:int=LET DET:real=(r_Y - r_X)
                                                 IN 2
                                       IN LET C:real=(r_X * r_Y)
                                          IN (2 + r_B)
% Control Flow:  Stable
g_fp_c_1 : LEMMA
FORALL(r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2 AND abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND ((NOT(((r_X * r_Y) < 0)) AND NOT((mul_double(X, Y) < integerToDouble(0)))) OR (NOT(((r_X - r_Y) <= 0)) AND NOT((sub_double(X, Y) <= integerToDouble(0)))) OR (NOT(((r_Y - r_X) <= 0)) AND NOT((sub_double(Y, X) <= integerToDouble(0)))) OR (((r_X * r_Y) < 0) AND (mul_double(X, Y) < integerToDouble(0))) OR (((r_X - r_Y) <= 0) AND (sub_double(X, Y) <= integerToDouble(0))) OR (((r_Y - r_X) <= 0) AND (sub_double(Y, X) <= integerToDouble(0))))
AND r_X ## [|-60000,60000|] AND  r_Y ## [|-60000,60000|]
IMPLIES
abs(g_fp(X, Y) - g(r_X, r_Y))<=0 / 1

%|- g_fp_c_1 : PROOF
%|- (prove-concrete-lemma g_fp_1 14 7)
%|- QED

g_fp_err_1 : LEMMA
FORALL(r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2 AND abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND ((NOT(((r_X * r_Y) < 0)) AND NOT((mul_double(X, Y) < integerToDouble(0)))) OR (NOT(((r_X - r_Y) <= 0)) AND NOT((sub_double(X, Y) <= integerToDouble(0)))) OR (NOT(((r_Y - r_X) <= 0)) AND NOT((sub_double(Y, X) <= integerToDouble(0)))) OR (((r_X * r_Y) < 0) AND (mul_double(X, Y) < integerToDouble(0))) OR (((r_X - r_Y) <= 0) AND (sub_double(X, Y) <= integerToDouble(0))) OR (((r_Y - r_X) <= 0) AND (sub_double(Y, X) <= integerToDouble(0))))
AND r_X ## [|-60000,60000|] AND  r_Y ## [|-60000,60000|]
IMPLIES
LET A:int=LET DET:real=(r_X - r_Y)
          IN -2,
    Err_A:real=LET DET:real=(r_X - r_Y),
                   Err_DET:real=aebounddp_sub(r_X, ulp_dp(r_X)/2, r_Y, ulp_dp(r_Y)/2)
               IN max((0 / 1), (0 / 1))
IN LET B:int=LET DET:real=(r_Y - r_X)
             IN 2,
       Err_B:real=LET DET:real=(r_Y - r_X),
                      Err_DET:real=aebounddp_sub(r_Y, ulp_dp(r_Y)/2, r_X, ulp_dp(r_X)/2)
                  IN max((0 / 1), (0 / 1))
   IN LET C:real=(r_X * r_Y),
          Err_C:real=aebounddp_mul(r_X, ulp_dp(r_X)/2, r_Y, ulp_dp(r_Y)/2)
      IN max(aeboundi_add(1, (0 / 1), r_A, (0 / 1)), aeboundi_add(2, (0 / 1), r_B, (0 / 1)))<=0 / 1

% Floating-Point Results: LET A:int=f_fp(X, Y)
                          IN LET B:int=f_fp(Y, X)
                             IN LET C:double=mul_double(X, Y)
                                IN add_int(1, A), LET A:int=f_fp(X, Y)
                                                  IN LET B:int=f_fp(Y, X)
                                                     IN LET C:double=mul_double(X, Y)
                                                        IN add_int(2, B)
% Real Results: LET A:int=LET DET:real=(r_X - r_Y)
                          IN 2
                IN LET B:int=LET DET:real=(r_Y - r_X)
                             IN -2
                   IN LET C:real=(r_X * r_Y)
                      IN (1 + r_A), LET A:int=LET DET:real=(r_X - r_Y)
                                              IN 2
                                    IN LET B:int=LET DET:real=(r_Y - r_X)
                                                 IN -2
                                       IN LET C:real=(r_X * r_Y)
                                          IN (2 + r_B)
% Control Flow:  Stable
g_fp_c_2 : LEMMA
FORALL(r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2 AND abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND ((NOT(((r_X * r_Y) < 0)) AND NOT((mul_double(X, Y) < integerToDouble(0)))) OR (NOT(((r_X - r_Y) <= 0)) AND NOT((sub_double(X, Y) <= integerToDouble(0)))) OR (NOT(((r_Y - r_X) <= 0)) AND NOT((sub_double(Y, X) <= integerToDouble(0)))) OR (((r_X * r_Y) < 0) AND (mul_double(X, Y) < integerToDouble(0))) OR (((r_X - r_Y) <= 0) AND (sub_double(X, Y) <= integerToDouble(0))) OR (((r_Y - r_X) <= 0) AND (sub_double(Y, X) <= integerToDouble(0))))
AND r_X ## [|-60000,60000|] AND  r_Y ## [|-60000,60000|]
IMPLIES
abs(g_fp(X, Y) - g(r_X, r_Y))<=0 / 1

%|- g_fp_c_2 : PROOF
%|- (prove-concrete-lemma g_fp_2 14 7)
%|- QED

g_fp_err_2 : LEMMA
FORALL(r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2 AND abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND ((NOT(((r_X * r_Y) < 0)) AND NOT((mul_double(X, Y) < integerToDouble(0)))) OR (NOT(((r_X - r_Y) <= 0)) AND NOT((sub_double(X, Y) <= integerToDouble(0)))) OR (NOT(((r_Y - r_X) <= 0)) AND NOT((sub_double(Y, X) <= integerToDouble(0)))) OR (((r_X * r_Y) < 0) AND (mul_double(X, Y) < integerToDouble(0))) OR (((r_X - r_Y) <= 0) AND (sub_double(X, Y) <= integerToDouble(0))) OR (((r_Y - r_X) <= 0) AND (sub_double(Y, X) <= integerToDouble(0))))
AND r_X ## [|-60000,60000|] AND  r_Y ## [|-60000,60000|]
IMPLIES
LET A:int=LET DET:real=(r_X - r_Y)
          IN 2,
    Err_A:real=LET DET:real=(r_X - r_Y),
                   Err_DET:real=aebounddp_sub(r_X, ulp_dp(r_X)/2, r_Y, ulp_dp(r_Y)/2)
               IN max((0 / 1), (0 / 1))
IN LET B:int=LET DET:real=(r_Y - r_X)
             IN -2,
       Err_B:real=LET DET:real=(r_Y - r_X),
                      Err_DET:real=aebounddp_sub(r_Y, ulp_dp(r_Y)/2, r_X, ulp_dp(r_X)/2)
                  IN max((0 / 1), (0 / 1))
   IN LET C:real=(r_X * r_Y),
          Err_C:real=aebounddp_mul(r_X, ulp_dp(r_X)/2, r_Y, ulp_dp(r_Y)/2)
      IN max(aeboundi_add(1, (0 / 1), r_A, (0 / 1)), aeboundi_add(2, (0 / 1), r_B, (0 / 1)))<=0 / 1

% Floating-Point Results: LET A:int=f_fp(X, Y)
                          IN LET B:int=f_fp(Y, X)
                             IN LET C:double=mul_double(X, Y)
                                IN add_int(1, A), LET A:int=f_fp(X, Y)
                                                  IN LET B:int=f_fp(Y, X)
                                                     IN LET C:double=mul_double(X, Y)
                                                        IN add_int(2, B)
% Real Results: LET A:int=LET DET:real=(r_X - r_Y)
                          IN 2
                IN LET B:int=LET DET:real=(r_Y - r_X)
                             IN 2
                   IN LET C:real=(r_X * r_Y)
                      IN (1 + r_A), LET A:int=LET DET:real=(r_X - r_Y)
                                              IN 2
                                    IN LET B:int=LET DET:real=(r_Y - r_X)
                                                 IN 2
                                       IN LET C:real=(r_X * r_Y)
                                          IN (2 + r_B)
% Control Flow:  Stable
g_fp_c_3 : LEMMA
FORALL(r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2 AND abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND ((NOT(((r_X * r_Y) < 0)) AND NOT((mul_double(X, Y) < integerToDouble(0)))) OR (NOT(((r_X - r_Y) <= 0)) AND NOT((sub_double(X, Y) <= integerToDouble(0)))) OR (NOT(((r_Y - r_X) <= 0)) AND NOT((sub_double(Y, X) <= integerToDouble(0)))) OR (((r_X * r_Y) < 0) AND (mul_double(X, Y) < integerToDouble(0))) OR (((r_X - r_Y) <= 0) AND (sub_double(X, Y) <= integerToDouble(0))) OR (((r_Y - r_X) <= 0) AND (sub_double(Y, X) <= integerToDouble(0))))
AND r_X ## [|-60000,60000|] AND  r_Y ## [|-60000,60000|]
IMPLIES
abs(g_fp(X, Y) - g(r_X, r_Y))<=0 / 1

%|- g_fp_c_3 : PROOF
%|- (prove-concrete-lemma g_fp_3 14 7)
%|- QED

g_fp_err_3 : LEMMA
FORALL(r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=ulp_dp(r_X)/2 AND abs(safe_prjct_double(Y) - r_Y)<=ulp_dp(r_Y)/2
AND ((NOT(((r_X * r_Y) < 0)) AND NOT((mul_double(X, Y) < integerToDouble(0)))) OR (NOT(((r_X - r_Y) <= 0)) AND NOT((sub_double(X, Y) <= integerToDouble(0)))) OR (NOT(((r_Y - r_X) <= 0)) AND NOT((sub_double(Y, X) <= integerToDouble(0)))) OR (((r_X * r_Y) < 0) AND (mul_double(X, Y) < integerToDouble(0))) OR (((r_X - r_Y) <= 0) AND (sub_double(X, Y) <= integerToDouble(0))) OR (((r_Y - r_X) <= 0) AND (sub_double(Y, X) <= integerToDouble(0))))
AND r_X ## [|-60000,60000|] AND  r_Y ## [|-60000,60000|]
IMPLIES
LET A:int=LET DET:real=(r_X - r_Y)
          IN 2,
    Err_A:real=LET DET:real=(r_X - r_Y),
                   Err_DET:real=aebounddp_sub(r_X, ulp_dp(r_X)/2, r_Y, ulp_dp(r_Y)/2)
               IN max((0 / 1), (0 / 1))
IN LET B:int=LET DET:real=(r_Y - r_X)
             IN 2,
       Err_B:real=LET DET:real=(r_Y - r_X),
                      Err_DET:real=aebounddp_sub(r_Y, ulp_dp(r_Y)/2, r_X, ulp_dp(r_X)/2)
                  IN max((0 / 1), (0 / 1))
   IN LET C:real=(r_X * r_Y),
          Err_C:real=aebounddp_mul(r_X, ulp_dp(r_X)/2, r_Y, ulp_dp(r_Y)/2)
      IN max(aeboundi_add(1, (0 / 1), r_A, (0 / 1)), aeboundi_add(2, (0 / 1), r_B, (0 / 1)))<=0 / 1

END functioncall5_num_cert