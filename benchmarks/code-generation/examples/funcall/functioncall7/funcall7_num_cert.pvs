% This file is automatically generated by PRECiSA 

% maxDepth: 7 , prec: 10^-14

funcall7_num_cert: THEORY
BEGIN
IMPORTING cert_funcall7, PRECiSA@bbiasp, PRECiSA@bbiadp, PRECiSA@strategies 

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Results: LET t1:double=add_double(sx, vx)
                          IN add_double(t1, sx), LET t1:double=add_double(sx, vx)
                                                 IN add_double(t1, vx)
% Real Results: LET t1:real=(r_sx + r_vx)
                IN (r_t1 + r_sx), LET t1:real=(r_sx + r_vx)
                                  IN (r_t1 + r_vx)
% Control Flow:  Stable
f_fp_c_0 : LEMMA
FORALL(r_sx, r_vx: real, sx: double, vx: double):
abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND ((NOT(((r_sx + r_vx) <= 0)) AND NOT((add_double(sx, vx) <= integerToDouble(0)))) OR (((r_sx + r_vx) <= 0) AND (add_double(sx, vx) <= integerToDouble(0))))
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
abs(safe_prjct_double(f_fp(sx, vx)) - f(r_sx, r_vx))<=9 / 17592186044416

%|- f_fp_c_0 : PROOF
%|- (prove-concrete-lemma f_fp_0 14 7)
%|- QED

f_fp_err_0 : LEMMA
FORALL(r_sx, r_vx: real, sx: double, vx: double):
abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND ((NOT(((r_sx + r_vx) <= 0)) AND NOT((add_double(sx, vx) <= integerToDouble(0)))) OR (((r_sx + r_vx) <= 0) AND (add_double(sx, vx) <= integerToDouble(0))))
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
LET t1:real=(r_sx + r_vx),
    Err_t1:real=aebounddp_add(r_sx, ulp_dp(r_sx)/2, r_vx, ulp_dp(r_vx)/2)
IN max(aebounddp_add(r_t1, Err_t1, r_sx, ulp_dp(r_sx)/2), aebounddp_add(r_t1, Err_t1, r_vx, ulp_dp(r_vx)/2))<=9 / 17592186044416

% Floating-Point Results: LET y:double=f_fp(sx, vx)
                          IN add_double(y, 2)
% Real Results: LET y:real=LET t1:real=(r_sx + r_vx)
                           IN (r_t1 + r_sx)
                IN (r_y + 2)
% Control Flow:  Stable
g_fp_c_0 : LEMMA
FORALL(r_sx, r_vx: real, sx: double, vx: double):
abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND ((NOT(((r_sx + r_vx) <= 0)) AND NOT((add_double(sx, vx) <= integerToDouble(0)))) OR (((r_sx + r_vx) <= 0) AND (add_double(sx, vx) <= integerToDouble(0))))
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
abs(safe_prjct_double(g_fp(sx, vx)) - g(r_sx, r_vx))<=13 / 17592186044416

%|- g_fp_c_0 : PROOF
%|- (prove-concrete-lemma g_fp_0 14 7)
%|- QED

g_fp_err_0 : LEMMA
FORALL(r_sx, r_vx: real, sx: double, vx: double):
abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND ((NOT(((r_sx + r_vx) <= 0)) AND NOT((add_double(sx, vx) <= integerToDouble(0)))) OR (((r_sx + r_vx) <= 0) AND (add_double(sx, vx) <= integerToDouble(0))))
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
LET y:real=LET t1:real=(r_sx + r_vx)
           IN (r_t1 + r_sx),
    Err_y:real=LET t1:real=(r_sx + r_vx),
                   Err_t1:real=aebounddp_add(r_sx, ulp_dp(r_sx)/2, r_vx, ulp_dp(r_vx)/2)
               IN max(aebounddp_add(r_t1, Err_t1, r_sx, ulp_dp(r_sx)/2), aebounddp_add(r_t1, Err_t1, r_vx, ulp_dp(r_vx)/2))
IN aebounddp_add(r_y, Err_y, 2, (0 / 1))<=13 / 17592186044416

% Floating-Point Results: LET y:double=f_fp(sx, vx)
                          IN add_double(y, 2)
% Real Results: LET y:real=LET t1:real=(r_sx + r_vx)
                           IN (r_t1 + r_vx)
                IN (r_y + 2)
% Control Flow:  Stable
g_fp_c_1 : LEMMA
FORALL(r_sx, r_vx: real, sx: double, vx: double):
abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND ((NOT(((r_sx + r_vx) <= 0)) AND NOT((add_double(sx, vx) <= integerToDouble(0)))) OR (((r_sx + r_vx) <= 0) AND (add_double(sx, vx) <= integerToDouble(0))))
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
abs(safe_prjct_double(g_fp(sx, vx)) - g(r_sx, r_vx))<=13 / 17592186044416

%|- g_fp_c_1 : PROOF
%|- (prove-concrete-lemma g_fp_1 14 7)
%|- QED

g_fp_err_1 : LEMMA
FORALL(r_sx, r_vx: real, sx: double, vx: double):
abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND ((NOT(((r_sx + r_vx) <= 0)) AND NOT((add_double(sx, vx) <= integerToDouble(0)))) OR (((r_sx + r_vx) <= 0) AND (add_double(sx, vx) <= integerToDouble(0))))
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
LET y:real=LET t1:real=(r_sx + r_vx)
           IN (r_t1 + r_vx),
    Err_y:real=LET t1:real=(r_sx + r_vx),
                   Err_t1:real=aebounddp_add(r_sx, ulp_dp(r_sx)/2, r_vx, ulp_dp(r_vx)/2)
               IN max(aebounddp_add(r_t1, Err_t1, r_sx, ulp_dp(r_sx)/2), aebounddp_add(r_t1, Err_t1, r_vx, ulp_dp(r_vx)/2))
IN aebounddp_add(r_y, Err_y, 2, (0 / 1))<=13 / 17592186044416

END funcall7_num_cert