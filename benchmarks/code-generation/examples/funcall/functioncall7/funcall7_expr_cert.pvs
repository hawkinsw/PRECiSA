% This file is automatically generated by PRECiSA 

funcall7_expr_cert: THEORY
BEGIN
IMPORTING float@extended_float_converter, PRECiSA@strategies, PRECiSA@bbiasp, PRECiSA@bbiadp

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

f_expr_1 : LEMMA
FORALL(t1: double, sx: double, vx: double, e_t1, e_sx, e_vx: nonneg_real, r_t1, r_sx, r_vx: real):
abs(safe_prjct_double(t1)-r_t1)<=e_t1 AND abs(safe_prjct_double(sx)-r_sx)<=e_sx AND abs(safe_prjct_double(vx)-r_vx)<=e_vx
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET t1:double=add_double(sx, vx)
                      IN t1) - LET r_t1:real=(r_sx + r_vx)
                               IN r_t1) <= LET t1:real=(r_sx + r_vx),
                                               Err_t1:real=aebounddp_add(r_sx, e_sx, r_vx, e_vx)
                                           IN Err_t1

%|- f_1: PROOF
%|- (precisa)
%|- QED


f_expr_num_1 : LEMMA
FORALL(t1: double, sx: double, vx: double, r_t1, r_sx, r_vx: real):
abs(safe_prjct_double(t1) - r_t1)<=ulp_dp(r_t1)/2 AND abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND (TRUE)
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
abs(safe_prjct_double(LET t1:double=add_double(sx, vx)
                      IN t1) - LET r_t1:real=(r_sx + r_vx)
                               IN r_t1) <=1 / 4398046511104

%|- f_c_1 : PROOF
%|- (prove-concrete-lemma f_expr_1 14 7)
%|- QED

f_expr_2 : LEMMA
FORALL(t1: double, sx: double, vx: double, e_t1, e_sx, e_vx: nonneg_real, r_t1, r_sx, r_vx: real):
abs(safe_prjct_double(t1)-r_t1)<=e_t1 AND abs(safe_prjct_double(sx)-r_sx)<=e_sx AND abs(safe_prjct_double(vx)-r_vx)<=e_vx
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET t1:double=add_double(sx, vx)
                      IN t1) - LET r_t1:real=(r_sx + r_vx)
                               IN r_t1) <= LET t1:real=(r_sx + r_vx),
                                               Err_t1:real=aebounddp_add(r_sx, e_sx, r_vx, e_vx)
                                           IN Err_t1

%|- f_2: PROOF
%|- (precisa)
%|- QED


f_expr_num_2 : LEMMA
FORALL(t1: double, sx: double, vx: double, r_t1, r_sx, r_vx: real):
abs(safe_prjct_double(t1) - r_t1)<=ulp_dp(r_t1)/2 AND abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND (TRUE)
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
abs(safe_prjct_double(LET t1:double=add_double(sx, vx)
                      IN t1) - LET r_t1:real=(r_sx + r_vx)
                               IN r_t1) <=1 / 4398046511104

%|- f_c_2 : PROOF
%|- (prove-concrete-lemma f_expr_2 14 7)
%|- QED

g_expr_1 : LEMMA
FORALL(sx: double, vx: double, e_sx, e_vx: nonneg_real, r_sx, r_vx: real):
abs(safe_prjct_double(sx)-r_sx)<=e_sx AND abs(safe_prjct_double(vx)-r_vx)<=e_vx
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET t1:double=add_double(sx, vx)
                      IN add_double(sx, vx)) - LET r_t1:real=(r_sx + r_vx)
                                               IN (r_sx + r_vx)) <= LET t1:real=(r_sx + r_vx),
                                                                        Err_t1:real=aebounddp_add(r_sx, e_sx, r_vx, e_vx)
                                                                    IN aebounddp_add(r_sx, e_sx, r_vx, e_vx)

%|- g_1: PROOF
%|- (precisa)
%|- QED


g_expr_num_1 : LEMMA
FORALL(sx: double, vx: double, r_sx, r_vx: real):
abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND (TRUE)
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
abs(safe_prjct_double(LET t1:double=add_double(sx, vx)
                      IN add_double(sx, vx)) - LET r_t1:real=(r_sx + r_vx)
                                               IN (r_sx + r_vx)) <=1 / 4398046511104

%|- g_c_1 : PROOF
%|- (prove-concrete-lemma g_expr_1 14 7)
%|- QED

g_expr_2 : LEMMA
FORALL(sx: double, vx: double, e_sx, e_vx: nonneg_real, r_sx, r_vx: real):
abs(safe_prjct_double(sx)-r_sx)<=e_sx AND abs(safe_prjct_double(vx)-r_vx)<=e_vx
AND (TRUE)
IMPLIES
abs(safe_prjct_double(LET t1:double=add_double(sx, vx)
                      IN add_double(sx, vx)) - LET r_t1:real=(r_sx + r_vx)
                                               IN (r_sx + r_vx)) <= LET t1:real=(r_sx + r_vx),
                                                                        Err_t1:real=aebounddp_add(r_sx, e_sx, r_vx, e_vx)
                                                                    IN aebounddp_add(r_sx, e_sx, r_vx, e_vx)

%|- g_2: PROOF
%|- (precisa)
%|- QED


g_expr_num_2 : LEMMA
FORALL(sx: double, vx: double, r_sx, r_vx: real):
abs(safe_prjct_double(sx) - r_sx)<=ulp_dp(r_sx)/2 AND abs(safe_prjct_double(vx) - r_vx)<=ulp_dp(r_vx)/2
AND (TRUE)
AND r_sx ## [|1,1000|] AND  r_vx ## [|1,1000|]
IMPLIES
abs(safe_prjct_double(LET t1:double=add_double(sx, vx)
                      IN add_double(sx, vx)) - LET r_t1:real=(r_sx + r_vx)
                                               IN (r_sx + r_vx)) <=1 / 4398046511104

%|- g_c_2 : PROOF
%|- (prove-concrete-lemma g_expr_2 14 7)
%|- QED


END funcall7_expr_cert