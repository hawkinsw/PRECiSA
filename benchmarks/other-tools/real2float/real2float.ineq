let box_rigidbody1 x1 x2 x3 = [(-15, 15); (-15, 15); (-15, 15)];;
let obj_rigidbody1 x1 x2 x3 = [(-x1*x2 - 2 * x2 * x3 - x1 - x3, 5.33e-13)];;

let box_rigidbody2 x1 x2 x3 = [(-15, 15); (-15, 15); (-15, 15)];;
let obj_rigidbody2 x1 x2 x3 = [(2*x1*x2*x3 + 3*x3*x3 - x2*x1*x2*x3 + 3*x3*x3 - x2, 6.48e-11)];;

let box_kepler0 x1 x2 x3 x4 x5 x6 = [(4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36)];;
let obj_kepler0 x1 x2 x3 x4 x5 x6= [(x2 * x5 + x3 * x6 - x2 * x3 - x5 * x6 + x1 * ( - x1 + x2 + x3 - x4 + x5 + x6), 0)];;

let box_keplersingle x1 x2 x3 x4 x5 x6 = [(4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36)];;
let obj_keplersingle x1 x2 x3 x4 x5 x6= [(x2 * x5 + x3 * x6 - x2 * x3 - x5 * x6 + x1 * ( - x1 + x2 + x3 - x4 + x5 + x6), 4.70e-5)];;

let box_kepler1 x1 x2 x3 x4 = [(4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36)];;
let obj_kepler1 x1 x2 x3 x4 = [( x1 * x4 * (- x1 + x2 + x3 - x4) + x2 * (x1 - x2 + x3 + x4) + x3 * (x1 + x2 - x3 + x4) - x2 * x3 * x4 - x1 * x3 - x1 * x2 - x4, 0)];; 

let box_kepler2 x1 x2 x3 x4 x5 x6 = [(4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36); (4, 6.36)];;
let obj_kepler2 x1 x2 x3 x4 x5 x6= [(x1 * x4 * (- x1 + x2 + x3 - x4 + x5 + x6) + x2 * x5 * (x1 - x2 +x3 +x4- x5 +x6) + x3* x6* (x1 + x2 - x3 + x4 + x5 - x6) - x2* x3* x4 - x1* x3* x5 - x1* x2* x6 - x4* x5* x6, 0)];;

let box_sineTaylor x = [(-1.57079632679, 1.57079632679)];;
let obj_sineTaylor x = [( x - (x*x*x)/6 + (x*x*x*x*x)/120 - (x*x*x*x*x*x*x)/5040, 0)];;

let box_sineOrder3 z = [(-2, 2)];;
let obj_sineOrder3 z = [(0.954929658551372 * z -0.12900613773279798*(z*z*z) ,0)];;

let box_sqroot y = [(0, 1)];;
let obj_sqroot y = [(1.0 + 0.5*y - 0.125*y*y + 0.0625*y*y*y - 0.0390625*y*y*y*y, 0)];;

let box_himmilbeau x1 x2 = [(-5, 5); (-5, 5)];;
let obj_himmilbeau x1 x2 = [((x1*x1 + x2 - 11)*(x1*x1 + x2 - 11) + (x1 + x2*x2 - 7)* (x1 + x2*x2 - 7), 0)];;

let box_doppler1 u v t = [(-100, 100); (20, 20000);(-30, 50)];; 
let obj_doppler1 u v t = [(-(3314e-1 + 6e-1 * t) * v / (( 3314e-1 + 6e-1 * t + u) * (3314e-1 + 6e-1 * t + u)), 0)];;

let box_doppler2 u v t = [(-125, 125); (15, 25000);(-40, 60)];; 
let obj_doppler2 u v t = [(-(3314e-1 + 6e-1 * t) * v / (( 3314e-1 + 6e-1 * t + u) * (3314e-1 + 6e-1 * t + u)), 0)];;

let box_doppler3 u v t = [(-30, 120); (320, 20300);(-50, 30)];; 
let obj_doppler3 u v t = [(-(3314e-1 + 6e-1 * t) * v / (( 3314e-1 + 6e-1 * t + u) * (3314e-1 + 6e-1 * t + u)), 0)];;

let box_verhulst x = [(0.1, 0.3)];;
let obj_verhulst x = [( 4 * x / (1 + (x/1.11)), 4.67e-16)];;

let box_carbonGas v = [(0.1, 0.5)];;
let obj_carbonGas v = [(
(3.5e7 + 0.401 * (1000/v)**2) * (v - 1000 * 42.7e-6) - 1.3806503e-23 * 1000 * 300
,2.21e-08)];;

let box_predPrey x = [(0.1, 0.3)];;
let obj_predPrey x = [(4*x**2/(1 + (x/1.11)**2), 2.52e-16)];;

let box_turbine1 v w r = [(-4.5, -0.3); (0.4, 0.9); (3.8, 7.8)];;
let obj_turbine1 v w r = [(3 + 2 / (r * r) - 0.125 * (3 - 2 * v) * (w * w * r * r) / (1 - v) - 4.5,0)];;

let box_turbine2 v w r = [(-4.5, -0.3); (0.4, 0.9); (3.8, 7.8)];;
let obj_turbine2 v w r = [(6*v - 0.5 * v * (w*w*r*r) / (1-v) - 2.5, 0)];;

let box_turbine3 v w r = [(-4.5, -0.3); (0.4, 0.9); (3.8, 7.8)];;
let obj_turbine3 v w r = [(3 - 2/(r*r) - 0.125 * (1+2*v) * (w*w*r*r) / (1-v) - 0.5, 0)];;

let box_jet x1 x2 = [(-5, 5); (-20, 5)];;
let obj_jet x1 x2 = [(
x1 + ((2*x1*((3*x1*x1 + 2*x2 - x1)/(x1*x1 + 1))*    ((3*x1*x1 + 2*x2 - x1)/(x1*x1 + 1) - 3) + x1*x1*(4*((3*x1*x1 + 2*x2 - x1)/(x1*x1 + 1))-6))*    (x1*x1 + 1) + 3*x1*x1*((3*x1*x1 + 2*x2 - x1)/(x1*x1 + 1)) + x1*x1*x1 + x1 +    3*((3*x1*x1 + 2*x2 -x1)/(x1*x1 + 1))),0)];;

let box_floudas2_6 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 = [(0, 1); (0, 1); (0, 1); (0, 1); (0, 1); (0, 1); (0, 1); (0, 1); (0, 1); (0, 1)];;
let obj_floudas2_6  x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 = [(48 * x1 + 42 * x2 + 48  * x3 +  45  * x4 + 44  * x5 + 41  * x6 + 47  * x7 + 42  * x8 + 45  * x9 + 46 *x10 - 50 * (x1*x1 + x2*x2 + x3*x3 +x4*x4 + x5*x5 + x6*x6 + x7*x7 + x8*x8 + x9*x9 + x10*x10), 0)];;
let cstr_floudas2_6  x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 = [-4  +2 * x1 +6 * x2 + 1 * x3 + 0 *x4 +3 * x5 +3 * x6 +2 * x7 +6 * x8 +2 * x9 +2 * x10;22  -(6 * x1 -5 * x2 + 8 * x3 -3 *x4 +0 * x5 +1 * x6 +3 * x7 +8 * x8 +9 * x9 -3 * x10);-6  -(5 * x1 +6 * x2 + 5 * x3 + 3 *x4 +8 * x5 -8 * x6 +9 * x7 +2 * x8 +0 * x9 -9 * x10);-23 -(9 * x1 +5 * x2 + 0 * x3 -9 *x4 +1 * x5 -8 * x6 +3 * x7 -9 * x8 -9 * x9 -3 * x10);-12 -(-8 * x1 +7 * x2 -4 * x3 -5 *x4 -9 * x5 +1 * x6 -7 * x7 -1 * x8 +3 * x9 -2 * x10)];;

let box_floudas3_3 x1 x2 x3 x4 x5 x6 = [(0, 6); (0, 6); (1, 5); (0, 6); (1, 5); (0, 10)];;
let cstr_floudas3_3 x1 x2 x3 x4 x5 x6 = [(x3 - 3)*(x3 - 3) + x4 - 4; (x5 - 3)*(x5 - 3) + x6 - 4; 2 - x1 + 3 * x2; 2 + x1 - x2; 6 - x1 - x2; x1 + x2 - 2];;
let obj_floudas3_3 x1 x2 x3 x4 x5 x6 = [( -25 * (x1 - 2)*(x1 - 2) - (x2 - 2)*(x2 - 2) - (x3 - 1)*(x3 - 1) - (x4 - 4)*(x4 - 4) - (x5 - 1)*(x5 - 1) - (x6 - 4)*(x6 - 4), 0)];;

let box_floudas3_4 x1 x2 x3 = [(0, 2); (0, 2); (0, 3)];;
let obj_floudas3_4 x1 x2 x3 = [(-2 * x1 + x2 - x3, 0)];;
let cstr_floudas3_4 x1 x2 x3 = [4 - x1 - x2 - x3; 6 - 3 * x2 - x3; -0.75+2*x1-2*x3+4*x1*x1-4*x1*x2+4*x1*x3+2*x2*x2-2*x2*x3+2*x3*x3];;

let box_floudas4_6 x1 x2 = [(0, 3); (0, 4)];;
let cstr_floudas4_6 x1 x2 = [2 * x1**4 - 8 * x1**3 + 8 * x1**2 - x2; 4 * x1**4 - 32 * x1**3 + 88 * x1**2 - 96 * x1 + 36 - x2];;
let obj_floudas4_6 x1 x2 = [(-x1 - x2, 0)];;

let box_floudas4_7 x1 x2 = [(0, 2); (0, 3)];;
let obj_floudas4_7 x1 x2 = [(-12 * x1 - 7 * x2 + x2**2, 0)];;
let cstr_floudas4_7 x1 x2 = [-2 * x1**4 + 2 - x2];;


let box_logexp x = [(-8,8)];;
let obj_logexp x = [(log(1 + exp(x)), 0)];;

let box_sphere x r y z = [(-10, 10); (0, 10); (-1.570796, 1.570796); (-3.14159265, 3.14159265)];;
let obj_sphere x r y z = [(x + r * sin (y) * cos(z),0)];;

let box_hartman3 x1 x2 x3 = [(0, 1); (0, 1);(0, 1)];;
let obj_hartman3 x1 x2 x3 = [(
- (1.0 * exp(-(3.0 * (x1 - 0.3689) * (x1 - 0.3689) + 10.0 * (x2 - 0.117) * (x2 - 0.117) + 30.0 * (x3 - 0.2673) * (x3 - 0.2673)) ) + 1.2 * exp( -(0.1 * (x1 - 0.4699) * (x1 - 0.4699) + 10.0 * (x2 - 0.4387) * (x2 - 0.4387) + 35.0 * (x3 - 0.747) * (x3 - 0.747)) ) + 3.0 * exp( -(3.0 * (x1 - 0.1091) * (x1 - 0.1091) + 10.0 * (x2 - 0.8732) * (x2 - 0.8732) + 30.0 * (x3 - 0.5547) * (x3 - 0.5547)) ) + 3.2 * exp(  -(0.1 * (x1 - 0.03815) * (x1 - 0.03815) + 10.0 * (x2 - 0.5743) * (x2 - 0.5743) + 35.0 * (x3 - 0.8828) * (x3 - 0.8828)) ) )
, 0)];;

let box_hartman6 x1 x2 x3 x4 x5 x6 = [(0, 1); (0, 1);(0, 1);(0, 1);(0, 1);(0, 1)];;
let obj_hartman6 x1 x2 x3 x4 x5 x6 = [(
- (1.0 * exp(- ( 10.0 * (x1 - 0.1312)**2 + 3.0 * (x2 - 0.1696)**2 + 17.0 * (x3 - 0.5569)**2 + 3.5 * (x4 - 0.0124)**2 + 1.7 * (x5 - 0.8283)**2 + 8.0 * (x6 - 0.5886)**2)  ) + 1.2 * exp(-(  3.0 * (x1 - 0.2348)**2 + 3.5 * (x2 - 0.1451)**2 + 1.7 * (x3 - 0.3522)**2 + 10.0 * (x4 - 0.2883)**2 + 17.0 * (x5 - 0.3047)**2 + 8.0 * (x6 - 0.665)**2)  ) + 3.0 * exp(- (  3.0 * (x1 - 0.2348)**2 + 3.5 * (x2 - 0.1451)**2 + 1.7 * (x3 - 0.3522)**2 + 10.0 * (x4 - 0.2883)**2 + 17.0 * (x5 - 0.3047)**2 + 8.0 * (x6 - 0.665)**2)  ) + 3.2 * exp(- (  17.0 * (x1 - 0.4047)**2 + 8.0 * (x2 - 0.8828)**2 + 0.05 * (x3 - 0.8732)**2 + 10.0 * (x4 - 0.5743)**2 + 0.1 * (x5 - 0.1091)**2 + 14.0 * (x6 - 0.0381)**2)  ) )
, 0)];;

let box_cav10 x = [(0, 10)];;
let obj_cav10 x = [(if (x*x - x > 0) then x/10 else x*x+2, 0)];;

let box_perin x y = [(1,7); (-2, 7)];;
let cstr_perin x y = [x-1; y+2; x-y; 5-y-x];;
let obj_perin x y = [(if (x*x + y*y <= 4) then y * x else 0, 0)];; 

let box_simplesums u = [(0, 1)];;
let obj_simplesums u = [(
let x = 1.3 in
let y = 2.5 in
let z = x + y in
z + y, 1
)];;


let box_test01 x = [(0, 1)];;
let obj_test01 x = [(0.1, 0)];;

let box_schwefel x1 x2 x3 = [(-10,10); (-10, 10); (-10, 10)];;
let obj_schwefel x1 x2 x3 = [( (x1-x2)*(x1-x2)+(x2-1)*(x2-1)+(x1-x3*x3)*(x1 - x3*x3)+(x3-1)*(x3-1), 0)];; 

let box_magnetism x1 x2 x3 x4 x5 x6 x7 = [(-1, 1); (-1, 1);(-1, 1);(-1, 1);(-1, 1);(-1, 1); (-1, 1)];;
let obj_magnetism x1 x2 x3 x4 x5 x6 x7 = [(x1*x1+2*x2*x2+2*x3*x3+2*x4*x4+2*x5*x5+2*x6*x6+2*x7*x7-x1, 0)];;

let box_caprasse x1 x2 x3 x4 = [(-0.5, 0.5); (-0.5, 0.5); (-0.5, 0.5); (-0.5, 0.5)];;
let obj_caprasse x1 x2 x3 x4 = [(-x1 * x3*x3*x3 + 4 * x2 * x3 *x3 * x4 + 4 * x1 * x3 * x4*x4 + 2 * x2 * x4*x4*x4 + 4 * x1 *x3+ 4 * x3*x3 - 10*x2*x4 - 10 * x4*x4+2, 0)];;


let box_polycarp p_i_x p_i_y s_x s_y buff = [(1.0, 10.0);(1.0, 10.0);(1.0, 10.0);(1.0, 10.0);(0.1,0.3)];;
let obj_polycarp p_i_x p_i_y s_x s_y buff = [(if (p_i_y >= s_y-buff && abs(p_i_x-s_x)<buff) then p_i_x - (2.0*buff) else p_i_x, 0)];;

let box_stynlinski x y = [(-5.0, 5.0);(-5.0, 5.0)];;
let obj_stynlinski x y = [(if (y <= 0) then
(if (x <= 0) then
      -1.4717 + 2.83079*x + 0.786996*x*x + 2.83079*y - 1.07939*(1e-16)*x*y + 0.786996*y*y
    else
      -1.4717 - 2.33079*x + 0.786996*x*x + 2.83079*y + 9.1748*(1e-16)*x*y + 0.786996*y*y)
else
     (if (x <= 0) then
      -1.4717 + 2.83079*x + 0.786996*x*x - 2.33079*y + 3.23816*(1e-16)*x*y + 0.786996*y*y
    else
      -1.4717 - 2.33079*x + 0.786996*x*x - 2.33079*y + 1.72702*(1e-15)*x*y + 0.786996*y*y), 0)];;


let box_cpr_yz0 x = [(-5.0, 5.0)];;
let obj_cpr_yz0 x = [(floor(x),0)];;

let box_azimuth flata flatb lona lonb = [(0.0, 0.4);(0.5,1);(0,3.14159265);(-3.14159265, -0.5)];;
let obj_azimuth flata flatb lona lonb = [(atan((cos(flatb) * sin(lonb - lona)) / (cos(flata) * sin(flatb) - sin(flata) * cos(flatb) * cos(lonb - lona))),0)];;

let box_testcos x = [(0,1)];;
let obj_testcos x = [(cos(x),0)];;

let box_testsin x = [(0,1)];;
let obj_testsin x = [(sin(x),0)];;

let box_t_div_t1 t = [(0.0,999.0)];;
let obj_t_div_t1 t = [(t/(t+1.0),0)];;

