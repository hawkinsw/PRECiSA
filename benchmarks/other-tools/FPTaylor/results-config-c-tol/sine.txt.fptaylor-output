Date: Sat Jun 24 09:34:58 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c-tol.cfg sine.txt
FPTaylor, version 0.9.1+dev

Loading: sine.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64(x) - rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) / rnd64(6))))) + rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / rnd64(120))))) - rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / rnd64(5040)))))

Conservative bound: [-2.301135, 2.301135]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x) - rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) / 6)))) + rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / 120)))) - rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / 5040))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((x - (((x * x) * x) * (1 / 6))) + (((((x * x) * x) * x) * x) * (1 / 120))) - (((((((x * x) * x) * x) * x) * x) * x) * (1 / 5040)))
-1 (105): exp = -53: (121125957552905/633825300114114700748351602688)
1 (1): exp = -53: (((((((((((((((floor_power2(x) + (-(((1 / 6) * ((x * x) * floor_power2(x)))))) + (-(((1 / 6) * (x * (x * floor_power2(x))))))) + (-(((1 / 6) * (x * (x * floor_power2(x))))))) + ((1 / 120) * ((((x * x) * x) * x) * floor_power2(x)))) + ((1 / 120) * (x * (((x * x) * x) * floor_power2(x))))) + ((1 / 120) * (x * (x * ((x * x) * floor_power2(x)))))) + ((1 / 120) * (x * (x * (x * (x * floor_power2(x))))))) + ((1 / 120) * (x * (x * (x * (x * floor_power2(x))))))) + (-(((1 / 5040) * ((((((x * x) * x) * x) * x) * x) * floor_power2(x)))))) + (-(((1 / 5040) * (x * (((((x * x) * x) * x) * x) * floor_power2(x))))))) + (-(((1 / 5040) * (x * (x * ((((x * x) * x) * x) * floor_power2(x)))))))) + (-(((1 / 5040) * (x * (x * (x * (((x * x) * x) * floor_power2(x))))))))) + (-(((1 / 5040) * (x * (x * (x * (x * ((x * x) * floor_power2(x)))))))))) + (-(((1 / 5040) * (x * (x * (x * (x * (x * (x * floor_power2(x))))))))))) + (-(((1 / 5040) * (x * (x * (x * (x * (x * (x * floor_power2(x)))))))))))
2 (5): exp = -53: (((-(((1 / 6) * (x * floor_power2(((x * x) + interval(-3.48786849799775978113e-16, 3.48786849799775978113e-16))))))) + ((1 / 120) * (x * (x * (x * floor_power2(((x * x) + interval(-3.48786849799775978113e-16, 3.48786849799775978113e-16)))))))) + (-(((1 / 5040) * (x * (x * (x * (x * (x * floor_power2(((x * x) + interval(-3.48786849799775978113e-16, 3.48786849799775978113e-16))))))))))))
3 (9): exp = -53: (((-(((1 / 6) * floor_power2((((x * x) * x) + interval(-1.17059650354699134809e-15, 1.17059650354699134809e-15)))))) + ((1 / 120) * (x * (x * floor_power2((((x * x) * x) + interval(-1.17059650354699134809e-15, 1.17059650354699134809e-15))))))) + (-(((1 / 5040) * (x * (x * (x * (x * floor_power2((((x * x) * x) + interval(-1.17059650354699134809e-15, 1.17059650354699134809e-15)))))))))))
4 (13): exp = -53: (-(floor_power2(((((x * x) * x) * (1 / 6)) + interval(-2.32106851412003841768e-16, 2.32106851412003841768e-16)))))
5 (15): exp = -53: floor_power2(((x - (((x * x) * x) * (1 / 6))) + interval(-3.98640305105777322831e-16, 3.98640305105777322831e-16)))
6 (28): exp = -53: (((1 / 120) * (x * floor_power2(((((x * x) * x) * x) + interval(-2.61785406620017040442e-15, 2.61785406620017040442e-15))))) + (-(((1 / 5040) * (x * (x * (x * floor_power2(((((x * x) * x) * x) + interval(-2.61785406620017040442e-15, 2.61785406620017040442e-15))))))))))
7 (32): exp = -53: (((1 / 120) * floor_power2((((((x * x) * x) * x) * x) + interval(-5.48560059881160286477e-15, 5.48560059881160286477e-15)))) + (-(((1 / 5040) * (x * (x * floor_power2((((((x * x) * x) * x) * x) + interval(-5.48560059881160286477e-15, 5.48560059881160286477e-15)))))))))
8 (36): exp = -53: floor_power2(((((((x * x) * x) * x) * x) * (1 / 120)) + interval(-5.31148251542644082048e-17, 5.31148251542644082048e-17)))
9 (38): exp = -53: floor_power2((((x - (((x * x) * x) * (1 / 6))) + (((((x * x) * x) * x) * x) * (1 / 120))) + interval(-6.80738629088980378432e-16, 6.80738629088980378432e-16)))
10 (59): exp = -53: (-(((1 / 5040) * (x * floor_power2(((((((x * x) * x) * x) * x) * x) + interval(-1.10736277326489480383e-14, 1.10736277326489480383e-14)))))))
11 (63): exp = -53: (-(((1 / 5040) * floor_power2((((((((x * x) * x) * x) * x) * x) * x) + interval(-2.04573055694982555869e-14, 2.04573055694982555869e-14))))))
12 (67): exp = -53: (-(floor_power2(((((((((x * x) * x) * x) * x) * x) * x) * (1 / 5040)) + interval(-4.41144095414652878772e-18, 4.41144095414652878772e-18)))))
13 (69): exp = -53: floor_power2(((((x - (((x * x) * x) * (1 / 6))) + (((((x * x) * x) * x) * x) * (1 / 120))) - (((((((x * x) * x) * x) * x) * x) * x) * (1 / 5040))) + interval(-9.07628355837152424782e-16, 9.07628355837152424782e-16)))

Corresponding original subexpressions:
1: rnd64(x)
2: rnd64((rnd64(x) * rnd64(x)))
3: rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x)))
4: rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) / 6))
5: rnd(64,ne,1.000000,-53,0)((rnd64(x) - rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) / 6))))
6: rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x)))
7: rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x)))
8: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / 120))
9: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x) - rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) / 6)))) + rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / 120))))
10: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x)))
11: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x)))
12: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / 5040))
13: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x) - rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) / 6)))) + rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / 120)))) - rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) * rnd64(x))) / 5040))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 1.911031e-16 (low = 1.911031e-16, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 3.485384e+00 (low = 3.482516e+00, subopt = 0.1%)
total2: 2.121670e-32 (low = 2.121670e-32, subopt = 0.0%)
exact total: 3.869553e-16 (low = 3.866370e-16, subopt = 0.1%)

Elapsed time: 0.62522
*************************************

-------------------------------------------------------------------------------
Problem: sine

Optimization lower bounds for error models:
The absolute error model (exact): 3.866370e-16 (suboptimality = 0.1%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 3.869553e-16

Elapsed time: 0.63



real	0m0.630s
user	0m0.548s
sys	0m0.032s
