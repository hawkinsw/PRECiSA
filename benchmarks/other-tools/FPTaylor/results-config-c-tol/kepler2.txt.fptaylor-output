Date: Sat Jun 24 09:34:56 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c-tol.cfg kepler2.txt
FPTaylor, version 0.9.1+dev

Loading: kepler2.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((-(rnd64(x1)))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5))))) - rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6))))) - rnd64((rnd64((rnd64(x4) * rnd64(x5))) * rnd64(x6)))))

Conservative bound: [-871.597824, 1860.323072]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5))))) - rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6))))) - rnd64((rnd64((rnd64(x4) * rnd64(x5))) * rnd64(x6)))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) - ((x1 * x3) * x5)) - ((x1 * x2) * x6)) - ((x4 * x5) * x6))
-1 (168): exp = -53: (5445133424467657/2475880078570760549798248448)
1 (6): exp = -53: (((((((x1 * x4) * (-(floor_power2(x1)))) + (((((((-(x1)) + x2) + x3) - x4) + x5) + x6) * (x4 * floor_power2(x1)))) + ((x2 * x5) * floor_power2(x1))) + ((x3 * x6) * floor_power2(x1))) + (-((x5 * (x3 * floor_power2(x1)))))) + (-((x6 * (x2 * floor_power2(x1))))))
2 (13): exp = -53: (((((((x1 * x4) * (-(floor_power2(x4)))) + (((((((-(x1)) + x2) + x3) - x4) + x5) + x6) * (x1 * floor_power2(x4)))) + ((x2 * x5) * floor_power2(x4))) + ((x3 * x6) * floor_power2(x4))) + (-(((x2 * x3) * floor_power2(x4))))) + (-((x6 * (x5 * floor_power2(x4))))))
3 (4): exp = -53: (((((((-(x1)) + x2) + x3) - x4) + x5) + x6) * floor_power2(((x1 * x4) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))
4 (7): exp = -53: (((((((x1 * x4) * floor_power2(x2)) + ((x2 * x5) * (-(floor_power2(x2))))) + ((((((x1 - x2) + x3) + x4) - x5) + x6) * (x5 * floor_power2(x2)))) + ((x3 * x6) * floor_power2(x2))) + (-((x4 * (x3 * floor_power2(x2)))))) + (-((x6 * (x1 * floor_power2(x2))))))
5 (8): exp = -53: ((x1 * x4) * floor_power2((((-(x1)) + x2) + interval(-8.88178419700125232339e-16, 8.88178419700125232339e-16))))
6 (10): exp = -53: (((((((x1 * x4) * floor_power2(x3)) + ((x2 * x5) * floor_power2(x3))) + ((x3 * x6) * (-(floor_power2(x3))))) + ((((((x1 + x2) - x3) + x4) + x5) - x6) * (x6 * floor_power2(x3)))) + (-((x4 * (x2 * floor_power2(x3)))))) + (-((x5 * (x1 * floor_power2(x3))))))
7 (11): exp = -53: ((x1 * x4) * floor_power2(((((-(x1)) + x2) + x3) + interval(-1.55431223447521915659e-15, 1.55431223447521915659e-15))))
8 (14): exp = -53: ((x1 * x4) * floor_power2((((((-(x1)) + x2) + x3) - x4) + interval(-2.88657986402540700510e-15, 2.88657986402540700510e-15))))
9 (16): exp = -53: (((((((x1 * x4) * floor_power2(x5)) + ((x2 * x5) * (-(floor_power2(x5))))) + ((((((x1 - x2) + x3) + x4) - x5) + x6) * (x2 * floor_power2(x5)))) + ((x3 * x6) * floor_power2(x5))) + (-(((x1 * x3) * floor_power2(x5))))) + (-((x6 * (x4 * floor_power2(x5))))))
10 (17): exp = -53: ((x1 * x4) * floor_power2(((((((-(x1)) + x2) + x3) - x4) + x5) + interval(-3.77475828372553223744e-15, 3.77475828372553223744e-15))))
11 (19): exp = -53: (((((((x1 * x4) * floor_power2(x6)) + ((x2 * x5) * floor_power2(x6))) + ((x3 * x6) * (-(floor_power2(x6))))) + ((((((x1 + x2) - x3) + x4) + x5) - x6) * (x3 * floor_power2(x6)))) + (-(((x1 * x2) * floor_power2(x6))))) + (-(((x4 * x5) * floor_power2(x6)))))
12 (20): exp = -53: ((x1 * x4) * floor_power2((((((((-(x1)) + x2) + x3) - x4) + x5) + x6) + interval(-5.10702591327572008595e-15, 5.10702591327572008595e-15))))
13 (23): exp = -53: floor_power2((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + interval(-4.38904734778589452857e-13, 4.38904734778589452857e-13)))
14 (28): exp = -53: ((((((x1 - x2) + x3) + x4) - x5) + x6) * floor_power2(((x2 * x5) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))
15 (32): exp = -53: ((x2 * x5) * floor_power2(((x1 - x2) + interval(-8.88178419700125232339e-16, 8.88178419700125232339e-16))))
16 (35): exp = -53: ((x2 * x5) * floor_power2((((x1 - x2) + x3) + interval(-1.55431223447521915659e-15, 1.55431223447521915659e-15))))
17 (38): exp = -53: ((x2 * x5) * floor_power2(((((x1 - x2) + x3) + x4) + interval(-2.88657986402540700510e-15, 2.88657986402540700510e-15))))
18 (41): exp = -53: ((x2 * x5) * floor_power2((((((x1 - x2) + x3) + x4) - x5) + interval(-4.21884749357559485361e-15, 4.21884749357559485361e-15))))
19 (44): exp = -53: ((x2 * x5) * floor_power2(((((((x1 - x2) + x3) + x4) - x5) + x6) + interval(-5.55111512312578270212e-15, 5.55111512312578270212e-15))))
20 (47): exp = -53: floor_power2((((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6)) + interval(-4.56867965681340559954e-13, 4.56867965681340559954e-13)))
21 (49): exp = -53: floor_power2(((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + interval(-1.00945953818154710278e-12, 1.00945953818154710278e-12)))
22 (54): exp = -53: ((((((x1 + x2) - x3) + x4) + x5) - x6) * floor_power2(((x3 * x6) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))
23 (58): exp = -53: ((x3 * x6) * floor_power2(((x1 + x2) + interval(-8.88178419700125232339e-16, 8.88178419700125232339e-16))))
24 (61): exp = -53: ((x3 * x6) * floor_power2((((x1 + x2) - x3) + interval(-2.22044604925031308085e-15, 2.22044604925031308085e-15))))
25 (64): exp = -53: ((x3 * x6) * floor_power2(((((x1 + x2) - x3) + x4) + interval(-3.55271367880050092936e-15, 3.55271367880050092936e-15))))
26 (67): exp = -53: ((x3 * x6) * floor_power2((((((x1 + x2) - x3) + x4) + x5) + interval(-4.88498130835068877786e-15, 4.88498130835068877786e-15))))
27 (70): exp = -53: ((x3 * x6) * floor_power2(((((((x1 + x2) - x3) + x4) + x5) - x6) + interval(-7.10542735760100185871e-15, 7.10542735760100185871e-15))))
28 (73): exp = -53: floor_power2((((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6)) + interval(-5.19739273840969460036e-13, 5.19739273840969460036e-13)))
29 (75): exp = -53: floor_power2((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) + interval(-1.69972906860494323275e-12, 1.69972906860494323275e-12)))
30 (80): exp = -53: (-((x4 * floor_power2(((x2 * x3) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))))
31 (84): exp = -53: (-(floor_power2((((x2 * x3) * x4) + interval(-7.64849517054245051821e-14, 7.64849517054245051821e-14)))))
32 (86): exp = -53: floor_power2(((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) + interval(-2.03200940518400430972e-12, 2.03200940518400430972e-12)))
33 (91): exp = -53: (-((x5 * floor_power2(((x1 * x3) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))))
34 (95): exp = -53: (-(floor_power2((((x1 * x3) * x5) + interval(-7.64849517054245051821e-14, 7.64849517054245051821e-14)))))
35 (97): exp = -53: floor_power2((((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) - ((x1 * x3) * x5)) + interval(-2.36428974176306558864e-12, 2.36428974176306558864e-12)))
36 (102): exp = -53: (-((x6 * floor_power2(((x1 * x2) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))))
37 (106): exp = -53: (-(floor_power2((((x1 * x2) * x6) + interval(-7.64849517054245051821e-14, 7.64849517054245051821e-14)))))
38 (108): exp = -53: floor_power2(((((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) - ((x1 * x3) * x5)) - ((x1 * x2) * x6)) + interval(-2.58288324062051083781e-12, 2.58288324062051083781e-12)))
39 (113): exp = -53: (-((x6 * floor_power2(((x4 * x5) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))))
40 (117): exp = -53: (-(floor_power2((((x4 * x5) * x6) + interval(-7.64849517054245051821e-14, 7.64849517054245051821e-14)))))
41 (119): exp = -53: floor_power2((((((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) - ((x1 * x3) * x5)) - ((x1 * x2) * x6)) - ((x4 * x5) * x6)) + interval(-2.80147673947795689478e-12, 2.80147673947795689478e-12)))

Corresponding original subexpressions:
1: rnd64(x1)
2: rnd64(x4)
3: rnd64((rnd64(x1) * rnd64(x4)))
4: rnd64(x2)
5: rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2)))
6: rnd64(x3)
7: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3)))
8: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4)))
9: rnd64(x5)
10: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5)))
11: rnd64(x6)
12: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))
13: rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))
14: rnd64((rnd64(x2) * rnd64(x5)))
15: rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2)))
16: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3)))
17: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4)))
18: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5)))
19: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6)))
20: rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6)))))
21: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6)))))))
22: rnd64((rnd64(x3) * rnd64(x6)))
23: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2)))
24: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3)))
25: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4)))
26: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5)))
27: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6)))
28: rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6)))))
29: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6)))))))
30: rnd64((rnd64(x2) * rnd64(x3)))
31: rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4)))
32: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4)))))
33: rnd64((rnd64(x1) * rnd64(x3)))
34: rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5)))
35: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5)))))
36: rnd64((rnd64(x1) * rnd64(x2)))
37: rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6)))
38: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5))))) - rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6)))))
39: rnd64((rnd64(x4) * rnd64(x5)))
40: rnd64((rnd64((rnd64(x4) * rnd64(x5))) * rnd64(x6)))
41: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5))))) - rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6))))) - rnd64((rnd64((rnd64(x4) * rnd64(x5))) * rnd64(x6)))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 2.199272e-12 (low = 2.199272e-12, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 1.421493e+04 (low = 1.408376e+04, subopt = 0.9%)
total2: 2.441682e-28 (low = 2.441682e-28, subopt = 0.0%)
exact total: 1.578175e-12 (low = 1.563611e-12, subopt = 0.9%)

Elapsed time: 0.79051
*************************************

-------------------------------------------------------------------------------
Problem: kepler2

Optimization lower bounds for error models:
The absolute error model (exact): 1.563611e-12 (suboptimality = 0.9%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 1.578175e-12

Elapsed time: 0.79



real	0m0.797s
user	0m0.732s
sys	0m0.024s
