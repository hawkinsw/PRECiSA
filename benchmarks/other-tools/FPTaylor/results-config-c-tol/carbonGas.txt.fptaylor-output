Date: Sat Jun 24 09:32:54 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c-tol.cfg carbonGas.txt
FPTaylor, version 0.9.1+dev

Loading: carbonGas.txt
Variable T is a constant
Variable a is a constant
Variable b is a constant
Variable N is a constant
Variable p is a constant

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64(35000000) + rnd64((rnd64((rnd64((401/1000)) * rnd64((rnd64(1000) / rnd64(V))))) * rnd64((rnd64(1000) / rnd64(V))))))) * rnd64((rnd64(V) - rnd64((rnd64(1000) * rnd64((427/10000000)))))))) - rnd64((rnd64((rnd64((13806503/1000000000000000000000000000000)) * rnd64(1000))) * rnd64(300)))))

Conservative bound: [2097409.200000, 34343230.000000]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((35000000 + rnd64((rnd64((rnd64((401/1000)) * rnd64((1000 / rnd64(V))))) * rnd64((1000 / rnd64(V))))))) * rnd(64,ne,1.000000,-53,0)((rnd64(V) - rnd64((1000 * rnd64((427/10000000)))))))) - rnd64((rnd64((rnd64((13806503/1000000000000000000000000000000)) * 1000)) * 300))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((35000000 + (((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V)))) * (V - (1000 * (427/10000000)))) - (((13806503/1000000000000000000000000000000) * 1000) * 300))
-1 (58): exp = -53: (391375678932865/4722366482869645213696)
1 (21): exp = -53: ((((35000000 + (((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V)))) * (-((1000 * (-13123/1280000000))))) + ((V - (1000 * (427/10000000))) * ((1000 * (1 / V)) * ((1000 * (1 / V)) * (-26/125))))) + (-((300 * (1000 * (-158966299189426689359/17592186044416000000000000000000000000000000))))))
2 (20): exp = -53: ((((35000000 + (((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V)))) * floor_power2(V)) + ((V - (1000 * (427/10000000))) * (((401/1000) * (1000 * (1 / V))) * (1000 * (-((floor_power2(V) / (V * V)))))))) + ((V - (1000 * (427/10000000))) * ((1000 * (1 / V)) * ((401/1000) * (1000 * (-((floor_power2(V) / (V * V)))))))))
3 (13): exp = -53: (((V - (1000 * (427/10000000))) * (((401/1000) * (1000 * (1 / V))) * floor_power2(((1000 * (1 / V)) + interval(-2.77555756156289337054e-12, 2.77555756156289337054e-12))))) + ((V - (1000 * (427/10000000))) * ((1000 * (1 / V)) * ((401/1000) * floor_power2(((1000 * (1 / V)) + interval(-2.77555756156289337054e-12, 2.77555756156289337054e-12)))))))
4 (8): exp = -53: ((V - (1000 * (427/10000000))) * ((1000 * (1 / V)) * floor_power2((((401/1000) * (1000 * (1 / V))) + interval(-1.70863234671969744828e-12, 1.70863234671969744828e-12)))))
5 (16): exp = -53: ((V - (1000 * (427/10000000))) * floor_power2(((((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V))) + interval(-3.41371197976059722420e-08, 3.41371197976059722420e-08))))
6 (18): exp = -53: ((V - (1000 * (427/10000000))) * floor_power2(((35000000 + (((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V)))) + interval(-3.78624100960678863045e-08, 3.78624100960678863045e-08))))
7 (23): exp = -53: ((35000000 + (((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V)))) * (-(floor_power2(((1000 * (427/10000000)) + interval(-1.13823880876218218670e-18, 1.13823880876218218670e-18))))))
8 (25): exp = -53: ((35000000 + (((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V)))) * floor_power2(((V - (1000 * (427/10000000))) + interval(-3.23632613763447100787e-17, 3.23632613763447100787e-17))))
9 (28): exp = -53: floor_power2((((35000000 + (((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V)))) * (V - (1000 * (427/10000000)))) + interval(-2.52365553020023512645e-08, 2.52365553020023512645e-08)))
10 (32): exp = -53: (-((300 * floor_power2((((13806503/1000000000000000000000000000000) * 1000) + interval(-1.00321838942564280356e-36, 1.00321838942564280356e-36))))))
11 (35): exp = -53: (-(floor_power2(((((13806503/1000000000000000000000000000000) * 1000) * 300) + interval(-7.52355347543451328322e-34, 7.52355347543451328322e-34)))))
12 (37): exp = -53: floor_power2(((((35000000 + (((401/1000) * (1000 * (1 / V))) * (1000 * (1 / V)))) * (V - (1000 * (427/10000000)))) - (((13806503/1000000000000000000000000000000) * 1000) * 300)) + interval(-2.89618456004642653270e-08, 2.89618456004642653270e-08)))

Corresponding original subexpressions:
1: rnd64(0)
2: rnd64(V)
3: rnd64((1000 / rnd64(V)))
4: rnd64((rnd64((401/1000)) * rnd64((1000 / rnd64(V)))))
5: rnd64((rnd64((rnd64((401/1000)) * rnd64((1000 / rnd64(V))))) * rnd64((1000 / rnd64(V)))))
6: rnd(64,ne,1.000000,-53,0)((35000000 + rnd64((rnd64((rnd64((401/1000)) * rnd64((1000 / rnd64(V))))) * rnd64((1000 / rnd64(V)))))))
7: rnd64((1000 * rnd64((427/10000000))))
8: rnd(64,ne,1.000000,-53,0)((rnd64(V) - rnd64((1000 * rnd64((427/10000000))))))
9: rnd64((rnd(64,ne,1.000000,-53,0)((35000000 + rnd64((rnd64((rnd64((401/1000)) * rnd64((1000 / rnd64(V))))) * rnd64((1000 / rnd64(V))))))) * rnd(64,ne,1.000000,-53,0)((rnd64(V) - rnd64((1000 * rnd64((427/10000000))))))))
10: rnd64((rnd64((13806503/1000000000000000000000000000000)) * 1000))
11: rnd64((rnd64((rnd64((13806503/1000000000000000000000000000000)) * 1000)) * 300))
12: rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((35000000 + rnd64((rnd64((rnd64((401/1000)) * rnd64((1000 / rnd64(V))))) * rnd64((1000 / rnd64(V))))))) * rnd(64,ne,1.000000,-53,0)((rnd64(V) - rnd64((1000 * rnd64((427/10000000)))))))) - rnd64((rnd64((rnd64((13806503/1000000000000000000000000000000)) * 1000)) * 300))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 8.287702e-08 (low = 8.287702e-08, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 5.314662e+07 (low = 5.286796e+07, subopt = 0.5%)
total2: 9.201198e-24 (low = 9.201198e-24, subopt = 0.0%)
exact total: 5.900460e-09 (low = 5.869522e-09, subopt = 0.5%)

Elapsed time: 0.49664
*************************************

-------------------------------------------------------------------------------
Problem: carbon_gas

Optimization lower bounds for error models:
The absolute error model (exact): 5.869522e-09 (suboptimality = 0.5%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 5.900460e-09

Elapsed time: 0.50



real	0m0.502s
user	0m0.440s
sys	0m0.020s
