Date: Sat Jun 24 09:36:41 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c-tol.cfg turbine1.txt
FPTaylor, version 0.9.1+dev

Loading: turbine1.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64(3) + rnd64((rnd64(2) / rnd64((rnd64(r) * rnd64(r))))))) - rnd64((rnd64((rnd64((rnd64((1/8)) * rnd64((rnd64(3) - rnd64((rnd64(2) * rnd64(v))))))) * rnd64((rnd64((rnd64((rnd64(w) * rnd64(w))) * rnd64(r))) * rnd64(r))))) / rnd64((rnd64(1) - rnd64(v))))))) - rnd64((9/2))))

Conservative bound: [-58.329127, -1.550529]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((3 + rnd64((2 / rnd64((rnd64(r) * rnd64(r))))))) - rnd64((rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd(64,ne,1.000000,-53,0)((3 - (2 * rnd64(v)))))) * rnd64((rnd64((rnd64((rnd64(w) * rnd64(w))) * rnd64(r))) * rnd64(r))))) / rnd(64,ne,1.000000,-53,0)((1 - rnd64(v))))))) - (9/2)))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((3 + (2 * (1 / (r * r)))) - ((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (1 / (1 - v)))) - (9/2))
-1 (67): exp = -53: (2638383197758947/4951760157141521099596496896)
1 (2): exp = -53: ((((2 * (-(((r * floor_power2(r)) / ((r * r) * (r * r)))))) + (2 * (-(((r * floor_power2(r)) / ((r * r) * (r * r))))))) + (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (((w * w) * r) * floor_power2(r))))))) + (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * ((w * w) * floor_power2(r))))))))
2 (4): exp = -53: (2 * (-((floor_power2(((r * r) + interval(-6.92779167366097823219e-15, 6.92779167366097823219e-15))) / ((r * r) * (r * r))))))
3 (8): exp = -53: floor_power2(((2 * (1 / (r * r))) + interval(-1.00525868360255573858e-16, 1.00525868360255573858e-16)))
4 (10): exp = -53: floor_power2(((3 + (2 * (1 / (r * r)))) + interval(-1.14403656168070042939e-16, 1.14403656168070042939e-16)))
5 (34): exp = -53: ((-(((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (-(((-(floor_power2(v))) / ((1 - v) * (1 - v)))))))) + (-(((1 / (1 - v)) * ((((w * w) * r) * r) * ((1/8) * (-((2 * floor_power2(v))))))))))
6 (14): exp = -53: (-(((1 / (1 - v)) * ((((w * w) * r) * r) * ((1/8) * floor_power2(((3 - (2 * v)) + interval(-8.88178419700125232339e-16, 8.88178419700125232339e-16))))))))
7 (19): exp = -53: ((-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * (r * (w * floor_power2(w)))))))) + (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * (r * (w * floor_power2(w)))))))))
8 (21): exp = -53: (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * (r * floor_power2(((w * w) + interval(-9.99200722162641034293e-17, 9.99200722162641034293e-17)))))))))
9 (25): exp = -53: (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * (r * floor_power2((((w * w) * r) + interval(-1.57207580286922207145e-15, 1.57207580286922207145e-15))))))))
10 (29): exp = -53: (-(((1 / (1 - v)) * (((1/8) * (3 - (2 * v))) * floor_power2(((((w * w) * r) * r) + interval(-1.85318427270431242061e-14, 1.85318427270431242061e-14)))))))
11 (32): exp = -53: (-(((1 / (1 - v)) * floor_power2(((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) + interval(-4.40692815573129679785e-14, 4.40692815573129679785e-14))))))
12 (35): exp = -53: (-(((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (-((floor_power2(((1 - v) + interval(-4.44089209850062616169e-16, 4.44089209850062616169e-16))) / ((1 - v) * (1 - v))))))))
13 (39): exp = -53: (-(floor_power2((((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (1 / (1 - v))) + interval(-7.82140847814635974942e-14, 7.82140847814635974942e-14)))))
14 (41): exp = -53: floor_power2((((3 + (2 * (1 / (r * r)))) - ((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (1 / (1 - v)))) + interval(-8.21032467213572644859e-14, 8.21032467213572644859e-14)))
15 (43): exp = -53: floor_power2(((((3 + (2 * (1 / (r * r)))) - ((((1/8) * (3 - (2 * v))) * (((w * w) * r) * r)) * (1 / (1 - v)))) - (9/2)) + interval(-8.56559604001577654152e-14, 8.56559604001577654152e-14)))

Corresponding original subexpressions:
1: rnd64(r)
2: rnd64((rnd64(r) * rnd64(r)))
3: rnd64((2 / rnd64((rnd64(r) * rnd64(r)))))
4: rnd(64,ne,1.000000,-53,0)((3 + rnd64((2 / rnd64((rnd64(r) * rnd64(r)))))))
5: rnd64(v)
6: rnd(64,ne,1.000000,-53,0)((3 - (2 * rnd64(v))))
7: rnd64(w)
8: rnd64((rnd64(w) * rnd64(w)))
9: rnd64((rnd64((rnd64(w) * rnd64(w))) * rnd64(r)))
10: rnd64((rnd64((rnd64((rnd64(w) * rnd64(w))) * rnd64(r))) * rnd64(r)))
11: rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd(64,ne,1.000000,-53,0)((3 - (2 * rnd64(v)))))) * rnd64((rnd64((rnd64((rnd64(w) * rnd64(w))) * rnd64(r))) * rnd64(r)))))
12: rnd(64,ne,1.000000,-53,0)((1 - rnd64(v)))
13: rnd64((rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd(64,ne,1.000000,-53,0)((3 - (2 * rnd64(v)))))) * rnd64((rnd64((rnd64((rnd64(w) * rnd64(w))) * rnd64(r))) * rnd64(r))))) / rnd(64,ne,1.000000,-53,0)((1 - rnd64(v)))))
14: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((3 + rnd64((2 / rnd64((rnd64(r) * rnd64(r))))))) - rnd64((rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd(64,ne,1.000000,-53,0)((3 - (2 * rnd64(v)))))) * rnd64((rnd64((rnd64((rnd64(w) * rnd64(w))) * rnd64(r))) * rnd64(r))))) / rnd(64,ne,1.000000,-53,0)((1 - rnd64(v)))))))
15: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((3 + rnd64((2 / rnd64((rnd64(r) * rnd64(r))))))) - rnd64((rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd(64,ne,1.000000,-53,0)((3 - (2 * rnd64(v)))))) * rnd64((rnd64((rnd64((rnd64(w) * rnd64(w))) * rnd64(r))) * rnd64(r))))) / rnd(64,ne,1.000000,-53,0)((1 - rnd64(v))))))) - (9/2)))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 5.328172e-13 (low = 5.328172e-13, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 1.498567e+02 (low = 1.478019e+02, subopt = 1.4%)
total2: 5.915460e-29 (low = 5.915460e-29, subopt = 0.0%)
exact total: 1.663744e-14 (low = 1.640930e-14, subopt = 1.4%)

Elapsed time: 62.75982
*************************************

-------------------------------------------------------------------------------
Problem: turbine1

Optimization lower bounds for error models:
The absolute error model (exact): 1.640930e-14 (suboptimality = 1.4%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 1.663744e-14

Elapsed time: 62.76



real	1m2.766s
user	1m2.656s
sys	0m0.052s
