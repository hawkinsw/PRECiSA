Date: Sat Jun 24 09:41:38 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-a.cfg kepler2.txt
FPTaylor, version 0.9.1+dev

Loading: kepler2.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((-(rnd64(x1)))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5))))) - rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6))))) - rnd64((rnd64((rnd64(x4) * rnd64(x5))) * rnd64(x6)))))

Conservative bound: [-871.597824, 1860.323072]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5))))) - rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6))))) - rnd64((rnd64((rnd64(x4) * rnd64(x5))) * rnd64(x6)))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) - ((x1 * x3) * x5)) - ((x1 * x2) * x6)) - ((x4 * x5) * x6))
-1 (168): exp = -53: (3429057867979377/154742504910672534362390528)
1 (6): exp = -53: (((((((x1 * x4) * (-(4))) + (((((((-(x1)) + x2) + x3) - x4) + x5) + x6) * (x4 * 4))) + ((x2 * x5) * 4)) + ((x3 * x6) * 4)) + (-((x5 * (x3 * 4))))) + (-((x6 * (x2 * 4)))))
2 (13): exp = -53: (((((((x1 * x4) * (-(4))) + (((((((-(x1)) + x2) + x3) - x4) + x5) + x6) * (x1 * 4))) + ((x2 * x5) * 4)) + ((x3 * x6) * 4)) + (-(((x2 * x3) * 4)))) + (-((x6 * (x5 * 4)))))
3 (4): exp = -53: (((((((-(x1)) + x2) + x3) - x4) + x5) + x6) * (x1 * x4))
4 (7): exp = -53: (((((((x1 * x4) * 4) + ((x2 * x5) * (-(4)))) + ((((((x1 - x2) + x3) + x4) - x5) + x6) * (x5 * 4))) + ((x3 * x6) * 4)) + (-((x4 * (x3 * 4))))) + (-((x6 * (x1 * 4)))))
5 (8): exp = -53: ((x1 * x4) * ((-(x1)) + x2))
6 (10): exp = -53: (((((((x1 * x4) * 4) + ((x2 * x5) * 4)) + ((x3 * x6) * (-(4)))) + ((((((x1 + x2) - x3) + x4) + x5) - x6) * (x6 * 4))) + (-((x4 * (x2 * 4))))) + (-((x5 * (x1 * 4)))))
7 (11): exp = -53: ((x1 * x4) * (((-(x1)) + x2) + x3))
8 (14): exp = -53: ((x1 * x4) * ((((-(x1)) + x2) + x3) - x4))
9 (16): exp = -53: (((((((x1 * x4) * 4) + ((x2 * x5) * (-(4)))) + ((((((x1 - x2) + x3) + x4) - x5) + x6) * (x2 * 4))) + ((x3 * x6) * 4)) + (-(((x1 * x3) * 4)))) + (-((x6 * (x4 * 4)))))
10 (17): exp = -53: ((x1 * x4) * (((((-(x1)) + x2) + x3) - x4) + x5))
11 (19): exp = -53: (((((((x1 * x4) * 4) + ((x2 * x5) * 4)) + ((x3 * x6) * (-(4)))) + ((((((x1 + x2) - x3) + x4) + x5) - x6) * (x3 * 4))) + (-(((x1 * x2) * 4)))) + (-(((x4 * x5) * 4))))
12 (20): exp = -53: ((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6))
13 (23): exp = -53: ((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6))
14 (28): exp = -53: ((((((x1 - x2) + x3) + x4) - x5) + x6) * (x2 * x5))
15 (32): exp = -53: ((x2 * x5) * (x1 - x2))
16 (35): exp = -53: ((x2 * x5) * ((x1 - x2) + x3))
17 (38): exp = -53: ((x2 * x5) * (((x1 - x2) + x3) + x4))
18 (41): exp = -53: ((x2 * x5) * ((((x1 - x2) + x3) + x4) - x5))
19 (44): exp = -53: ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))
20 (47): exp = -53: ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))
21 (49): exp = -53: (((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6)))
22 (54): exp = -53: ((((((x1 + x2) - x3) + x4) + x5) - x6) * (x3 * x6))
23 (58): exp = -53: ((x3 * x6) * (x1 + x2))
24 (61): exp = -53: ((x3 * x6) * ((x1 + x2) - x3))
25 (64): exp = -53: ((x3 * x6) * (((x1 + x2) - x3) + x4))
26 (67): exp = -53: ((x3 * x6) * ((((x1 + x2) - x3) + x4) + x5))
27 (70): exp = -53: ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))
28 (73): exp = -53: ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))
29 (75): exp = -53: ((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6)))
30 (80): exp = -53: (-((x4 * (x2 * x3))))
31 (84): exp = -53: (-(((x2 * x3) * x4)))
32 (86): exp = -53: (((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4))
33 (91): exp = -53: (-((x5 * (x1 * x3))))
34 (95): exp = -53: (-(((x1 * x3) * x5)))
35 (97): exp = -53: ((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) - ((x1 * x3) * x5))
36 (102): exp = -53: (-((x6 * (x1 * x2))))
37 (106): exp = -53: (-(((x1 * x2) * x6)))
38 (108): exp = -53: (((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) - ((x1 * x3) * x5)) - ((x1 * x2) * x6))
39 (113): exp = -53: (-((x6 * (x4 * x5))))
40 (117): exp = -53: (-(((x4 * x5) * x6)))
41 (119): exp = -53: ((((((((x1 * x4) * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + ((x2 * x5) * (((((x1 - x2) + x3) + x4) - x5) + x6))) + ((x3 * x6) * (((((x1 + x2) - x3) + x4) + x5) - x6))) - ((x2 * x3) * x4)) - ((x1 * x3) * x5)) - ((x1 * x2) * x6)) - ((x4 * x5) * x6))

Corresponding original subexpressions:
1: rnd64(x1)
2: rnd64(x4)
3: rnd64((rnd64(x1) * rnd64(x4)))
4: rnd64(x2)
5: rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2)))
6: rnd64(x3)
7: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3)))
8: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4)))
9: rnd64(x5)
10: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5)))
11: rnd64(x6)
12: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))
13: rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))
14: rnd64((rnd64(x2) * rnd64(x5)))
15: rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2)))
16: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3)))
17: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4)))
18: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5)))
19: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6)))
20: rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6)))))
21: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6)))))))
22: rnd64((rnd64(x3) * rnd64(x6)))
23: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2)))
24: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3)))
25: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4)))
26: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5)))
27: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6)))
28: rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6)))))
29: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6)))))))
30: rnd64((rnd64(x2) * rnd64(x3)))
31: rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4)))
32: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4)))))
33: rnd64((rnd64(x1) * rnd64(x3)))
34: rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5)))
35: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5)))))
36: rnd64((rnd64(x1) * rnd64(x2)))
37: rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6)))
38: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5))))) - rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6)))))
39: rnd64((rnd64(x4) * rnd64(x5)))
40: rnd64((rnd64((rnd64(x4) * rnd64(x5))) * rnd64(x6)))
41: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6))))) + rnd64((rnd64((rnd64(x2) * rnd64(x5))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))) - rnd64(x5))) + rnd64(x6))))))) + rnd64((rnd64((rnd64(x3) * rnd64(x6))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))) + rnd64(x5))) - rnd64(x6))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64((rnd64(x1) * rnd64(x3))) * rnd64(x5))))) - rnd64((rnd64((rnd64(x1) * rnd64(x2))) * rnd64(x6))))) - rnd64((rnd64((rnd64(x4) * rnd64(x5))) * rnd64(x6)))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 2.215977e-11 (low = 2.215977e-11, subopt = 0.0%)

Solving the approximate optimization problem

Absolute errors:
1: exp = -53: 2.835767e+02 (low = 2.809371e+02, subopt = 0.9%)
2: exp = -53: 2.835767e+02 (low = 2.809371e+02, subopt = 0.9%)
3: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
4: exp = -53: 2.835767e+02 (low = 2.809371e+02, subopt = 0.9%)
5: exp = -53: 9.546106e+01 (low = 9.471527e+01, subopt = 0.8%)
6: exp = -53: 2.835767e+02 (low = 2.809371e+02, subopt = 0.9%)
7: exp = -53: 2.587510e+02 (low = 2.572595e+02, subopt = 0.6%)
8: exp = -53: 1.909221e+02 (low = 1.894305e+02, subopt = 0.8%)
9: exp = -53: 2.835767e+02 (low = 2.809371e+02, subopt = 0.9%)
10: exp = -53: 2.594968e+02 (low = 2.572595e+02, subopt = 0.9%)
11: exp = -53: 2.835767e+02 (low = 2.809371e+02, subopt = 0.9%)
12: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
13: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
14: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
15: exp = -53: 9.546106e+01 (low = 9.471527e+01, subopt = 0.8%)
16: exp = -53: 2.587510e+02 (low = 2.572595e+02, subopt = 0.6%)
17: exp = -53: 5.175021e+02 (low = 5.145189e+02, subopt = 0.6%)
18: exp = -53: 2.594968e+02 (low = 2.572595e+02, subopt = 0.9%)
19: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
20: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
21: exp = -53: 1.037987e+03 (low = 1.029038e+03, subopt = 0.9%)
22: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
23: exp = -53: 5.145189e+02 (low = 5.145189e+02, subopt = 0.0%)
24: exp = -53: 2.587510e+02 (low = 2.572595e+02, subopt = 0.6%)
25: exp = -53: 5.175021e+02 (low = 5.145189e+02, subopt = 0.6%)
26: exp = -53: 7.777447e+02 (low = 7.717784e+02, subopt = 0.8%)
27: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
28: exp = -53: 5.189936e+02 (low = 5.145189e+02, subopt = 0.9%)
29: exp = -53: 1.558473e+03 (low = 1.543557e+03, subopt = 1.0%)
30: exp = -53: 2.572595e+02 (low = 2.572595e+02, subopt = 0.0%)
31: exp = -53: 2.572595e+02 (low = 2.572595e+02, subopt = 0.0%)
32: exp = -53: 1.298213e+03 (low = 1.286297e+03, subopt = 0.9%)
33: exp = -53: 2.572595e+02 (low = 2.572595e+02, subopt = 0.0%)
34: exp = -53: 2.572595e+02 (low = 2.572595e+02, subopt = 0.0%)
35: exp = -53: 1.038720e+03 (low = 1.029038e+03, subopt = 0.9%)
36: exp = -53: 2.572595e+02 (low = 2.572595e+02, subopt = 0.0%)
37: exp = -53: 2.572595e+02 (low = 2.572595e+02, subopt = 0.0%)
38: exp = -53: 8.132668e+02 (low = 7.717784e+02, subopt = 5.1%)
39: exp = -53: 2.572595e+02 (low = 2.572595e+02, subopt = 0.0%)
40: exp = -53: 2.572595e+02 (low = 2.572595e+02, subopt = 0.0%)
41: exp = -53: 7.059496e+02 (low = 5.145189e+02, subopt = 27.1%)
total1: 2.096928e-12 (low = 2.057142e-12, subopt = 1.9%)
total2: 2.460228e-27 (low = 2.460228e-27, subopt = 0.0%)
total: 2.096928e-12 (low = 2.057142e-12, subopt = 1.9%)

Elapsed time: 17.94581
*************************************

-------------------------------------------------------------------------------
Problem: kepler2

Optimization lower bounds for error models:
The absolute error model (approximate): 2.057142e-12 (suboptimality = 1.9%)

Bounds (without rounding): [-inf, inf]

Absolute error (approximate): 2.096928e-12

Elapsed time: 17.95



real	0m17.952s
user	0m16.436s
sys	0m0.612s
