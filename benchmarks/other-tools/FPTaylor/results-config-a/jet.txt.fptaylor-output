Date: Sat Jun 24 09:41:14 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-a.cfg jet.txt
FPTaylor, version 0.9.1+dev

Loading: jet.txt

*************************************
Taylor form for: rnd64((rnd64(x1) + rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(2) * rnd64(x1))) * rnd64((rnd64(rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1)))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))))) * rnd64((rnd64((rnd64(rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1)))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))) - rnd64(3))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64((rnd64((rnd64(4) * rnd64((rnd64(rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1)))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))))) - rnd64(6))))))) * rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))) + rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) * rnd64((rnd64(rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1)))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1))) + rnd64((rnd64(3) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1)))))))))))

Conservative bound: [-4162995.000000, 4077105.000000]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1))) + rnd64((3 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (x1 + (((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + x1) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))))
-1 (297): exp = -53: (3822945427095683/295147905179352825856)
1 (1): exp = -53: ((((((((((((((((((((((((((((((((((((4 + (((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * (x1 * 4))) + (((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * (x1 * 4))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * 4))))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * 4)))))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (-(4)))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * 4)))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * 4))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (-(4))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * (2 * 4))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * 4)))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * 4))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (-(4))))))) + (((x1 * x1) + 1) * (((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6) * (x1 * 4)))) + (((x1 * x1) + 1) * (((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6) * (x1 * 4)))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * 4)))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * 4))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (-(4))))) + ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * ((3 * x1) * 4))) + ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * (x1 * (3 * 4)))) + ((x1 * x1) * 4)) + (x1 * (x1 * 4))) + (x1 * (x1 * 4))) + 4) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * 4) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (3 * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * 4)))) + (3 * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * 4))))) + (3 * ((1 / ((x1 * x1) + 1)) * (-(4)))))
2 (35): exp = -53: ((((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * x1))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * x1))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * x1))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * x1))))) + ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * (x1 * (3 * x1)))) + (3 * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * x1)))))
3 (39): exp = -53: ((((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * x1)))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * x1)))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * x1)))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * x1)))) + ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * ((3 * x1) * x1))) + (3 * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * x1))))
4 (41): exp = -53: (((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (2 * 16)))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (2 * 16)))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (2 * 16)))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (2 * 16)))) + (3 * ((1 / ((x1 * x1) + 1)) * (2 * 16))))
5 (43): exp = -53: (((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (((3 * x1) * x1) + (2 * x2))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (((3 * x1) * x1) + (2 * x2))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (((3 * x1) * x1) + (2 * x2))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (((3 * x1) * x1) + (2 * x2))))) + (3 * ((1 / ((x1 * x1) + 1)) * (((3 * x1) * x1) + (2 * x2)))))
6 (46): exp = -53: (((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * ((((3 * x1) * x1) + (2 * x2)) - x1)))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * ((((3 * x1) * x1) + (2 * x2)) - x1)))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * ((((3 * x1) * x1) + (2 * x2)) - x1)))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * ((((3 * x1) * x1) + (2 * x2)) - x1)))) + (3 * ((1 / ((x1 * x1) + 1)) * ((((3 * x1) * x1) + (2 * x2)) - x1))))
7 (106): exp = -53: ((((((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * (x1 * x1)) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * x1) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * x1) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * x1) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * (((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6) * (x1 * x1)))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * x1) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (x1 * (x1 * x1))) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * x1) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))
8 (108): exp = -53: ((((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((((x1 * x1) + 1) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((((x1 * x1) + 1) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((((x1 * x1) + 1) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((((x1 * x1) + 1) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((((x1 * x1) + 1) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))
9 (57): exp = -53: (((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))))
10 (31): exp = -53: (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))))
11 (59): exp = -53: (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)))
12 (62): exp = -53: (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)))
13 (96): exp = -53: (((x1 * x1) + 1) * ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6)))
14 (99): exp = -53: (((x1 * x1) + 1) * ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6)))
15 (101): exp = -53: (((x1 * x1) + 1) * ((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))))
16 (111): exp = -53: (((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1))
17 (148): exp = -53: (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))
18 (150): exp = -53: ((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))))
19 (159): exp = -53: ((x1 * x1) * x1)
20 (161): exp = -53: (((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1))
21 (164): exp = -53: ((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + x1)
22 (193): exp = -53: (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))
23 (195): exp = -53: (((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + x1) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))))
24 (197): exp = -53: (x1 + (((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + x1) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))))

Corresponding original subexpressions:
1: rnd64(x1)
2: rnd64((3 * rnd64(x1)))
3: rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1)))
4: rnd64(x2)
5: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2))))
6: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1)))
7: rnd64((rnd64(x1) * rnd64(x1)))
8: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))
9: rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))
10: rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))
11: rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3))
12: rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3))))
13: rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6))
14: rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6))))
15: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6))))))
16: rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))
17: rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))
18: rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))))
19: rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1)))
20: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1)))))
21: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1)))
22: rnd64((3 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))
23: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1))) + rnd64((3 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))))
24: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1))) + rnd64((3 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 1.295264e-05 (low = 1.295264e-05, subopt = 0.0%)

Solving the approximate optimization problem

Absolute errors:
1: exp = -53: 1.473680e+04 (low = 1.421827e+04, subopt = 3.5%)
2: exp = -53: 1.037807e+04 (low = 1.032115e+04, subopt = 0.5%)
3: exp = -53: 1.037807e+04 (low = 1.032115e+04, subopt = 0.5%)
4: exp = -53: 4.329134e+03 (low = 4.305231e+03, subopt = 0.6%)
5: exp = -53: 1.149926e+04 (low = 1.143577e+04, subopt = 0.6%)
6: exp = -53: 1.082415e+04 (low = 1.076308e+04, subopt = 0.6%)
7: exp = -53: 5.048780e+03 (low = 4.943464e+03, subopt = 2.1%)
8: exp = -53: 6.774842e+03 (low = 6.601538e+03, subopt = 2.6%)
9: exp = -53: 1.082415e+04 (low = 1.076308e+04, subopt = 0.6%)
10: exp = -53: 1.715234e+03 (low = 1.679852e+03, subopt = 2.1%)
11: exp = -53: 1.715234e+03 (low = 1.679852e+03, subopt = 2.1%)
12: exp = -53: 1.715234e+03 (low = 1.679852e+03, subopt = 2.1%)
13: exp = -53: 5.133898e+03 (low = 5.097559e+03, subopt = 0.7%)
14: exp = -53: 5.133898e+03 (low = 5.097559e+03, subopt = 0.7%)
15: exp = -53: 4.731607e+03 (low = 4.683874e+03, subopt = 1.0%)
16: exp = -53: 4.731607e+03 (low = 4.683874e+03, subopt = 1.0%)
17: exp = -53: 2.615765e+02 (low = 2.594745e+02, subopt = 0.8%)
18: exp = -53: 4.992200e+03 (low = 4.943454e+03, subopt = 1.0%)
19: exp = -53: 1.250000e+02 (low = 1.250000e+02, subopt = 0.0%)
20: exp = -53: 4.867931e+03 (low = 4.818454e+03, subopt = 1.0%)
21: exp = -53: 4.862941e+03 (low = 4.813454e+03, subopt = 1.0%)
22: exp = -53: 1.209375e+02 (low = 1.200000e+02, subopt = 0.8%)
23: exp = -53: 4.873365e+03 (low = 4.823837e+03, subopt = 1.0%)
24: exp = -53: 4.868374e+03 (low = 4.818837e+03, subopt = 1.0%)
total1: 1.494830e-11 (low = 1.476571e-11, subopt = 1.2%)
total2: 1.438032e-21 (low = 1.438032e-21, subopt = 0.0%)
total: 1.494830e-11 (low = 1.476571e-11, subopt = 1.2%)

Elapsed time: 9.69728
*************************************

-------------------------------------------------------------------------------
Problem: jet

Optimization lower bounds for error models:
The absolute error model (approximate): 1.476571e-11 (suboptimality = 1.2%)

Bounds (without rounding): [-inf, inf]

Absolute error (approximate): 1.494830e-11

Elapsed time: 9.70



real	0m9.704s
user	0m8.940s
sys	0m0.248s
