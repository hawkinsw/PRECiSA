Date: Sat Jun 24 09:32:09 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c.cfg doppler3.txt
FPTaylor, version 0.9.1+dev

Loading: doppler3.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((-(rnd64(rnd64((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))))))) * rnd64(v))) / rnd64((rnd64((rnd64(rnd64((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T)))))) + rnd64(u))) * rnd64((rnd64(rnd64((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T)))))) + rnd64(u)))))))

Conservative bound: [-96.294005, -0.437731]

Simplified rounding: rnd64((rnd64(((-(rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))))) * rnd64(v))) / rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((-(((1657/5) + ((3/5) * T)))) * v) * (1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))
-1 (58): exp = -53: (5215254724437551/2475880078570760549798248448)
1 (24): exp = -53: ((((((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (1024/5)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (T * (1/5))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (1024/5)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (T * (1/5))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-((1024/5)))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-((T * (1/5)))))))
2 (26): exp = -53: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * floor_power2(T))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * floor_power2(T))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(((3/5) * floor_power2(T)))))))
3 (28): exp = -53: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((3/5) * T) + interval(-3.24185123190545780801e-15, 3.24185123190545780801e-15)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((3/5) * T) + interval(-3.24185123190545780801e-15, 3.24185123190545780801e-15)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(floor_power2((((3/5) * T) + interval(-3.24185123190545780801e-15, 3.24185123190545780801e-15))))))))
4 (30): exp = -53: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((1657/5) + ((3/5) * T)) + interval(-2.77555756156289166660e-14, 2.77555756156289166660e-14)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2((((1657/5) + ((3/5) * T)) + interval(-2.77555756156289166660e-14, 2.77555756156289166660e-14)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(floor_power2((((1657/5) + ((3/5) * T)) + interval(-2.77555756156289166660e-14, 2.77555756156289166660e-14))))))))
5 (9): exp = -53: ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * ((-(((1657/5) + ((3/5) * T)))) * floor_power2(v)))
6 (11): exp = -53: ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * floor_power2((((-(((1657/5) + ((3/5) * T)))) * v) + interval(-1.77595378403339092008e-09, 1.77595378403339092008e-09))))
7 (32): exp = -53: ((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))))
8 (33): exp = -53: ((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(((((1657/5) + ((3/5) * T)) + u) + interval(-6.32827124036339354259e-14, 6.32827124036339354259e-14)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * floor_power2(((((1657/5) + ((3/5) * T)) + u) + interval(-6.32827124036339354259e-14, 6.32827124036339354259e-14)))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))))
9 (36): exp = -53: (((-(((1657/5) + ((3/5) * T)))) * v) * (-((floor_power2((((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) + interval(-8.60921112177948787017e-11, 8.60921112177948787017e-11))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))
10 (40): exp = -53: floor_power2(((((-(((1657/5) + ((3/5) * T)))) * v) * (1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))) + interval(-1.62006000439978772921e-13, 1.62006000439978772921e-13)))

Corresponding original subexpressions:
1: rnd64(0)
2: rnd64(T)
3: rnd64((rnd64((3/5)) * rnd64(T)))
4: rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T)))))
5: rnd64(v)
6: rnd64(((-(rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))))) * rnd64(v)))
7: rnd64(u)
8: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u)))
9: rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u)))))
10: rnd64((rnd64(((-(rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))))) * rnd64(v))) / rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u)))))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 2.106425e-12 (low = 2.106425e-12, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 5.971491e+02 (low = 5.919158e+02, subopt = 0.9%)
total2: 2.338601e-28 (low = 2.338601e-28, subopt = 0.0%)
exact total: 6.629686e-14 (low = 6.571586e-14, subopt = 0.9%)

Elapsed time: 1.44904
*************************************

-------------------------------------------------------------------------------
Problem: doppler3

Optimization lower bounds for error models:
The absolute error model (exact): 6.571586e-14 (suboptimality = 0.9%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 6.629686e-14

Elapsed time: 1.45



real	0m1.455s
user	0m1.364s
sys	0m0.048s
