Date: Sat Jun 24 09:32:13 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c.cfg kepler0.txt
FPTaylor, version 0.9.1+dev

Loading: kepler0.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3))))) - rnd64((rnd64(x5) * rnd64(x6))))) + rnd64((rnd64(x1) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((-(rnd64(x1)))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))))

Conservative bound: [-35.779200, 159.817600]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3))))) - rnd64((rnd64(x5) * rnd64(x6))))) + rnd64((rnd64(x1) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((((x2 * x5) + (x3 * x6)) - (x2 * x3)) - (x5 * x6)) + (x1 * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)))
-1 (66): exp = -53: (2744381022928897/79228162514264337593543950336)
1 (1): exp = -53: (((x5 * floor_power2(x2)) + (-((x3 * floor_power2(x2))))) + (x1 * floor_power2(x2)))
2 (2): exp = -53: (((x2 * floor_power2(x5)) + (-((x6 * floor_power2(x5))))) + (x1 * floor_power2(x5)))
3 (4): exp = -53: floor_power2(((x2 * x5) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15)))
4 (6): exp = -53: (((x6 * floor_power2(x3)) + (-((x2 * floor_power2(x3))))) + (x1 * floor_power2(x3)))
5 (7): exp = -53: (((x3 * floor_power2(x6)) + (-((x5 * floor_power2(x6))))) + (x1 * floor_power2(x6)))
6 (9): exp = -53: floor_power2(((x3 * x6) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15)))
7 (11): exp = -53: floor_power2((((x2 * x5) + (x3 * x6)) + interval(-1.84030568561866032707e-14, 1.84030568561866032707e-14)))
8 (16): exp = -53: (-(floor_power2(((x2 * x3) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15)))))
9 (18): exp = -53: floor_power2(((((x2 * x5) + (x3 * x6)) - (x2 * x3)) + interval(-3.47100126418809178087e-14, 3.47100126418809178087e-14)))
10 (23): exp = -53: (-(floor_power2(((x5 * x6) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15)))))
11 (25): exp = -53: floor_power2((((((x2 * x5) + (x3 * x6)) - (x2 * x3)) - (x5 * x6)) + interval(-5.10169684275752291914e-14, 5.10169684275752291914e-14)))
12 (28): exp = -53: ((x1 * (-(floor_power2(x1)))) + (((((((-(x1)) + x2) + x3) - x4) + x5) + x6) * floor_power2(x1)))
13 (30): exp = -53: (x1 * floor_power2((((-(x1)) + x2) + interval(-8.88178419700125232339e-16, 8.88178419700125232339e-16))))
14 (33): exp = -53: (x1 * floor_power2(((((-(x1)) + x2) + x3) + interval(-1.55431223447521915659e-15, 1.55431223447521915659e-15))))
15 (35): exp = -53: (x1 * (-(floor_power2(x4))))
16 (36): exp = -53: (x1 * floor_power2((((((-(x1)) + x2) + x3) - x4) + interval(-2.88657986402540700510e-15, 2.88657986402540700510e-15))))
17 (39): exp = -53: (x1 * floor_power2(((((((-(x1)) + x2) + x3) - x4) + x5) + interval(-3.77475828372553223744e-15, 3.77475828372553223744e-15))))
18 (42): exp = -53: (x1 * floor_power2((((((((-(x1)) + x2) + x3) - x4) + x5) + x6) + interval(-5.10702591327572008595e-15, 5.10702591327572008595e-15))))
19 (45): exp = -53: floor_power2(((x1 * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)) + interval(-5.15232301268043071371e-14, 5.15232301268043071371e-14)))
20 (47): exp = -53: floor_power2(((((((x2 * x5) + (x3 * x6)) - (x2 * x3)) - (x5 * x6)) + (x1 * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6))) + interval(-1.13198339590781152713e-13, 1.13198339590781152713e-13)))

Corresponding original subexpressions:
1: rnd64(x2)
2: rnd64(x5)
3: rnd64((rnd64(x2) * rnd64(x5)))
4: rnd64(x3)
5: rnd64(x6)
6: rnd64((rnd64(x3) * rnd64(x6)))
7: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6)))))
8: rnd64((rnd64(x2) * rnd64(x3)))
9: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3)))))
10: rnd64((rnd64(x5) * rnd64(x6)))
11: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3))))) - rnd64((rnd64(x5) * rnd64(x6)))))
12: rnd64(x1)
13: rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2)))
14: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3)))
15: rnd64(x4)
16: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4)))
17: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5)))
18: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))
19: rnd64((rnd64(x1) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))
20: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3))))) - rnd64((rnd64(x5) * rnd64(x6))))) + rnd64((rnd64(x1) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 3.463896e-14 (low = 3.463896e-14, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 6.727838e+02 (low = 6.685055e+02, subopt = 0.6%)
total2: 3.845697e-30 (low = 3.845697e-30, subopt = 0.0%)
exact total: 7.469400e-14 (low = 7.421902e-14, subopt = 0.6%)

Elapsed time: 2.81257
*************************************

-------------------------------------------------------------------------------
Problem: kepler0

Optimization lower bounds for error models:
The absolute error model (exact): 7.421902e-14 (suboptimality = 0.6%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 7.469400e-14

Elapsed time: 2.81



real	0m2.818s
user	0m2.752s
sys	0m0.024s
