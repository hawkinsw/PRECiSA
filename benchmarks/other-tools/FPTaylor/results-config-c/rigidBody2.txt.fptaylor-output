Date: Sat Jun 24 09:32:19 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c.cfg rigidBody2.txt
FPTaylor, version 0.9.1+dev

Loading: rigidBody2.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(2) * rnd64(x1))) * rnd64(x2))) * rnd64(x3))) + rnd64((rnd64((rnd64(3) * rnd64(x3))) * rnd64(x3))))) - rnd64((rnd64((rnd64((rnd64(x2) * rnd64(x1))) * rnd64(x2))) * rnd64(x3))))) + rnd64((rnd64((rnd64(3) * rnd64(x3))) * rnd64(x3))))) - rnd64(x2)))

Conservative bound: [-58740.000000, 58740.000000]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64(x2))) * rnd64(x3))) + rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3))))) - rnd64((rnd64((rnd64((rnd64(x2) * rnd64(x1))) * rnd64(x2))) * rnd64(x3))))) + rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3))))) - rnd64(x2)))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) - (((x2 * x1) * x2) * x3)) + ((3 * x3) * x3)) - x2)
-1 (70): exp = -53: (2443114836918275/154742504910672534362390528)
1 (1): exp = -53: ((x3 * (x2 * (2 * floor_power2(x1)))) + (-((x3 * (x2 * (x2 * floor_power2(x1)))))))
2 (3): exp = -53: ((((x3 * ((2 * x1) * floor_power2(x2))) + (-((x3 * ((x2 * x1) * floor_power2(x2)))))) + (-((x3 * (x2 * (x1 * floor_power2(x2))))))) + (-(floor_power2(x2))))
3 (5): exp = -53: (x3 * floor_power2((((2 * x1) * x2) + interval(-5.32907051820075202512e-14, 5.32907051820075202512e-14))))
4 (7): exp = -53: ((((((((2 * x1) * x2) * floor_power2(x3)) + ((3 * x3) * floor_power2(x3))) + (x3 * (3 * floor_power2(x3)))) + (-((((x2 * x1) * x2) * floor_power2(x3))))) + ((3 * x3) * floor_power2(x3))) + (x3 * (3 * floor_power2(x3))))
5 (9): exp = -53: floor_power2(((((2 * x1) * x2) * x3) + interval(-1.62536650805122937713e-12, 1.62536650805122937713e-12)))
6 (13): exp = -53: ((x3 * floor_power2(((3 * x3) + interval(-2.66453525910037569702e-15, 2.66453525910037569702e-15)))) + (x3 * floor_power2(((3 * x3) + interval(-2.66453525910037569702e-15, 2.66453525910037569702e-15)))))
7 (17): exp = -53: (floor_power2((((3 * x3) * x3) + interval(-1.33226762955018810094e-13, 1.33226762955018810094e-13))) + floor_power2((((3 * x3) * x3) + interval(-1.33226762955018810094e-13, 1.33226762955018810094e-13))))
8 (19): exp = -53: floor_power2((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) + interval(-2.27018404075352049776e-12, 2.27018404075352049776e-12)))
9 (24): exp = -53: (-((x3 * (x2 * floor_power2(((x2 * x1) + interval(-2.66453525910037601256e-14, 2.66453525910037601256e-14)))))))
10 (28): exp = -53: (-((x3 * floor_power2((((x2 * x1) * x2) + interval(-8.12683254025614688564e-13, 8.12683254025614688564e-13))))))
11 (32): exp = -53: (-(floor_power2(((((x2 * x1) * x2) * x3) + interval(-1.85984561085206255964e-11, 1.85984561085206255964e-11)))))
12 (34): exp = -53: floor_power2(((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) - (((x2 * x1) * x2) * x3)) + interval(-2.49613663072523453790e-11, 2.49613663072523453790e-11)))
13 (44): exp = -53: floor_power2((((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) - (((x2 * x1) * x2) * x3)) + ((3 * x3) * x3)) + interval(-2.87894152961598851304e-11, 2.87894152961598851304e-11)))
14 (47): exp = -53: floor_power2(((((((((2 * x1) * x2) * x3) + ((3 * x3) * x3)) - (((x2 * x1) * x2) * x3)) + ((3 * x3) * x3)) - x2) + interval(-3.24282822816712982073e-11, 3.24282822816712982073e-11)))

Corresponding original subexpressions:
1: rnd64(x1)
2: rnd64(x2)
3: rnd64(((2 * rnd64(x1)) * rnd64(x2)))
4: rnd64(x3)
5: rnd64((rnd64(((2 * rnd64(x1)) * rnd64(x2))) * rnd64(x3)))
6: rnd64((3 * rnd64(x3)))
7: rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3)))
8: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64(x2))) * rnd64(x3))) + rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3)))))
9: rnd64((rnd64(x2) * rnd64(x1)))
10: rnd64((rnd64((rnd64(x2) * rnd64(x1))) * rnd64(x2)))
11: rnd64((rnd64((rnd64((rnd64(x2) * rnd64(x1))) * rnd64(x2))) * rnd64(x3)))
12: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64(x2))) * rnd64(x3))) + rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3))))) - rnd64((rnd64((rnd64((rnd64(x2) * rnd64(x1))) * rnd64(x2))) * rnd64(x3)))))
13: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64(x2))) * rnd64(x3))) + rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3))))) - rnd64((rnd64((rnd64((rnd64(x2) * rnd64(x1))) * rnd64(x2))) * rnd64(x3))))) + rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3)))))
14: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64(x2))) * rnd64(x3))) + rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3))))) - rnd64((rnd64((rnd64((rnd64(x2) * rnd64(x1))) * rnd64(x2))) * rnd64(x3))))) + rnd64((rnd64((3 * rnd64(x3))) * rnd64(x3))))) - rnd64(x2)))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 1.578826e-11 (low = 1.578826e-11, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 3.248560e+05 (low = 3.219600e+05, subopt = 0.9%)
total2: 1.752849e-27 (low = 1.752849e-27, subopt = 0.0%)
exact total: 3.606626e-11 (low = 3.574474e-11, subopt = 0.9%)

Elapsed time: 0.46973
*************************************

-------------------------------------------------------------------------------
Problem: rigidBody2

Optimization lower bounds for error models:
The absolute error model (exact): 3.574474e-11 (suboptimality = 0.9%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 3.606626e-11

Elapsed time: 0.47



real	0m0.475s
user	0m0.408s
sys	0m0.024s
