Date: Sat Jun 24 09:32:11 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c.cfg jet.txt
FPTaylor, version 0.9.1+dev

Loading: jet.txt

*************************************
Taylor form for: rnd64((rnd64(x1) + rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(2) * rnd64(x1))) * rnd64((rnd64(rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1)))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))))) * rnd64((rnd64((rnd64(rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1)))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))) - rnd64(3))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64((rnd64((rnd64(4) * rnd64((rnd64(rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1)))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))))) - rnd64(6))))))) * rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))) + rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) * rnd64((rnd64(rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1)))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1))))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1))) + rnd64((rnd64(3) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(3) * rnd64(x1))) * rnd64(x1))) + rnd64((rnd64(2) * rnd64(x2))))) - rnd64(x1))) / rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(1)))))))))))

Conservative bound: [-4162995.000000, 4077105.000000]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1))) + rnd64((3 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (x1 + (((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + x1) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))))
-1 (297): exp = -53: (8788213298626799/1180591620717411303424)
1 (1): exp = -53: ((((((((((((((((((((((((((((((((((((floor_power2(x1) + (((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * (x1 * floor_power2(x1)))) + (((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * (x1 * floor_power2(x1)))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * floor_power2(x1)))))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * floor_power2(x1))))))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (-(floor_power2(x1))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * floor_power2(x1))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * floor_power2(x1)))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (-(floor_power2(x1)))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * (2 * floor_power2(x1)))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * floor_power2(x1))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * floor_power2(x1)))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (-(floor_power2(x1)))))))) + (((x1 * x1) + 1) * (((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6) * (x1 * floor_power2(x1))))) + (((x1 * x1) + 1) * (((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6) * (x1 * floor_power2(x1))))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * floor_power2(x1))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * floor_power2(x1)))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (-(floor_power2(x1)))))) + ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * ((3 * x1) * floor_power2(x1)))) + ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * (x1 * (3 * floor_power2(x1))))) + ((x1 * x1) * floor_power2(x1))) + (x1 * (x1 * floor_power2(x1)))) + (x1 * (x1 * floor_power2(x1)))) + floor_power2(x1)) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-(((x1 * floor_power2(x1)) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (3 * ((1 / ((x1 * x1) + 1)) * ((3 * x1) * floor_power2(x1))))) + (3 * ((1 / ((x1 * x1) + 1)) * (x1 * (3 * floor_power2(x1)))))) + (3 * ((1 / ((x1 * x1) + 1)) * (-(floor_power2(x1))))))
2 (35): exp = -53: ((((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (x1 * floor_power2(((3 * x1) + interval(-1.33226762955018784851e-15, 1.33226762955018784851e-15))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (x1 * floor_power2(((3 * x1) + interval(-1.33226762955018784851e-15, 1.33226762955018784851e-15))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (x1 * floor_power2(((3 * x1) + interval(-1.33226762955018784851e-15, 1.33226762955018784851e-15))))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (x1 * floor_power2(((3 * x1) + interval(-1.33226762955018784851e-15, 1.33226762955018784851e-15))))))) + ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * (x1 * floor_power2(((3 * x1) + interval(-1.33226762955018784851e-15, 1.33226762955018784851e-15)))))) + (3 * ((1 / ((x1 * x1) + 1)) * (x1 * floor_power2(((3 * x1) + interval(-1.33226762955018784851e-15, 1.33226762955018784851e-15)))))))
3 (39): exp = -53: ((((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * floor_power2((((3 * x1) * x1) + interval(-1.77635683940025078022e-14, 1.77635683940025078022e-14)))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * floor_power2((((3 * x1) * x1) + interval(-1.77635683940025078022e-14, 1.77635683940025078022e-14)))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * floor_power2((((3 * x1) * x1) + interval(-1.77635683940025078022e-14, 1.77635683940025078022e-14)))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * floor_power2((((3 * x1) * x1) + interval(-1.77635683940025078022e-14, 1.77635683940025078022e-14)))))) + ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) * floor_power2((((3 * x1) * x1) + interval(-1.77635683940025078022e-14, 1.77635683940025078022e-14))))) + (3 * ((1 / ((x1 * x1) + 1)) * floor_power2((((3 * x1) * x1) + interval(-1.77635683940025078022e-14, 1.77635683940025078022e-14))))))
4 (41): exp = -53: (((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * (2 * floor_power2(x2))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * (2 * floor_power2(x2))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * (2 * floor_power2(x2))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * (2 * floor_power2(x2))))) + (3 * ((1 / ((x1 * x1) + 1)) * (2 * floor_power2(x2)))))
5 (43): exp = -53: (((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * floor_power2(((((3 * x1) * x1) + (2 * x2)) + interval(-2.84217094304040137457e-14, 2.84217094304040137457e-14)))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * floor_power2(((((3 * x1) * x1) + (2 * x2)) + interval(-2.84217094304040137457e-14, 2.84217094304040137457e-14)))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * floor_power2(((((3 * x1) * x1) + (2 * x2)) + interval(-2.84217094304040137457e-14, 2.84217094304040137457e-14)))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * floor_power2(((((3 * x1) * x1) + (2 * x2)) + interval(-2.84217094304040137457e-14, 2.84217094304040137457e-14)))))) + (3 * ((1 / ((x1 * x1) + 1)) * floor_power2(((((3 * x1) * x1) + (2 * x2)) + interval(-2.84217094304040137457e-14, 2.84217094304040137457e-14))))))
6 (46): exp = -53: (((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((1 / ((x1 * x1) + 1)) * floor_power2((((((3 * x1) * x1) + (2 * x2)) - x1) + interval(-3.59712259978550782206e-14, 3.59712259978550782206e-14)))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * ((1 / ((x1 * x1) + 1)) * floor_power2((((((3 * x1) * x1) + (2 * x2)) - x1) + interval(-3.59712259978550782206e-14, 3.59712259978550782206e-14)))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * ((1 / ((x1 * x1) + 1)) * floor_power2((((((3 * x1) * x1) + (2 * x2)) - x1) + interval(-3.59712259978550782206e-14, 3.59712259978550782206e-14)))))))) + (((3 * x1) * x1) * ((1 / ((x1 * x1) + 1)) * floor_power2((((((3 * x1) * x1) + (2 * x2)) - x1) + interval(-3.59712259978550782206e-14, 3.59712259978550782206e-14)))))) + (3 * ((1 / ((x1 * x1) + 1)) * floor_power2((((((3 * x1) * x1) + (2 * x2)) - x1) + interval(-3.59712259978550782206e-14, 3.59712259978550782206e-14))))))
7 (106): exp = -53: ((((((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15)))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * (((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6) * floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15)))))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (x1 * floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15))))) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))
8 (108): exp = -53: ((((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * floor_power2((((x1 * x1) + 1) + interval(-6.21724893790087741523e-15, 6.21724893790087741523e-15)))) + (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2((((x1 * x1) + 1) + interval(-6.21724893790087741523e-15, 6.21724893790087741523e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2((((x1 * x1) + 1) + interval(-6.21724893790087741523e-15, 6.21724893790087741523e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2((((x1 * x1) + 1) + interval(-6.21724893790087741523e-15, 6.21724893790087741523e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))))) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2((((x1 * x1) + 1) + interval(-6.21724893790087741523e-15, 6.21724893790087741523e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1)))))))) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (-((floor_power2((((x1 * x1) + 1) + interval(-6.21724893790087741523e-15, 6.21724893790087741523e-15))) / (((x1 * x1) + 1) * ((x1 * x1) + 1))))))))
9 (57): exp = -53: (((((((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * floor_power2(((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) + interval(-1.00230934663159940263e-12, 1.00230934663159940263e-12))))) + (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * ((2 * x1) * floor_power2(((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) + interval(-1.00230934663159940263e-12, 1.00230934663159940263e-12))))))) + (((x1 * x1) + 1) * ((x1 * x1) * (4 * floor_power2(((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) + interval(-1.00230934663159940263e-12, 1.00230934663159940263e-12))))))) + (((3 * x1) * x1) * floor_power2(((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) + interval(-1.00230934663159940263e-12, 1.00230934663159940263e-12))))) + (3 * floor_power2(((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) + interval(-1.00230934663159940263e-12, 1.00230934663159940263e-12)))))
10 (31): exp = -53: (((x1 * x1) + 1) * (((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) * floor_power2((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) + interval(-1.02007291502560206884e-11, 1.02007291502560206884e-11)))))
11 (59): exp = -53: (((x1 * x1) + 1) * (((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * floor_power2((((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3) + interval(-1.00941477398920040449e-12, 1.00941477398920040449e-12)))))
12 (62): exp = -53: (((x1 * x1) + 1) * floor_power2(((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + interval(-2.48849740813742302230e-09, 2.48849740813742302230e-09))))
13 (96): exp = -53: (((x1 * x1) + 1) * ((x1 * x1) * floor_power2((((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6) + interval(-4.03765909595680161796e-12, 4.03765909595680161796e-12)))))
14 (99): exp = -53: (((x1 * x1) + 1) * floor_power2((((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6)) + interval(-1.04673603118500063610e-10, 1.04673603118500063610e-10))))
15 (101): exp = -53: (((x1 * x1) + 1) * floor_power2((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) + interval(-2.60863242118606278840e-09, 2.60863242118606278840e-09))))
16 (111): exp = -53: floor_power2(((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + interval(-6.94797712696993143843e-08, 6.94797712696993143843e-08)))
17 (148): exp = -53: floor_power2(((((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) + interval(-7.86903875393824785823e-11, 7.86903875393824785823e-11)))
18 (150): exp = -53: floor_power2((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + interval(-6.97922017955943387867e-08, 6.97922017955943387867e-08)))
19 (159): exp = -53: floor_power2((((x1 * x1) * x1) + interval(-4.21884749357559611579e-14, 4.21884749357559611579e-14)))
20 (161): exp = -53: floor_power2(((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + interval(-7.00250817331505017725e-08, 7.00250817331505017725e-08)))
21 (164): exp = -53: floor_power2((((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + x1) + interval(-7.02579128208935812515e-08, 7.02579128208935812515e-08)))
22 (193): exp = -53: floor_power2(((3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) + interval(-3.02824432196760121347e-12, 3.02824432196760121347e-12)))
23 (195): exp = -53: floor_power2(((((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + x1) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + interval(-7.04938001305788488614e-08, 7.04938001305788488614e-08)))
24 (197): exp = -53: floor_power2(((x1 + (((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1))))) + ((x1 * x1) * x1)) + x1) + (3 * (((((3 * x1) * x1) + (2 * x2)) - x1) * (1 / ((x1 * x1) + 1)))))) + interval(-7.07266312183219283404e-08, 7.07266312183219283404e-08)))

Corresponding original subexpressions:
1: rnd64(x1)
2: rnd64((3 * rnd64(x1)))
3: rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1)))
4: rnd64(x2)
5: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2))))
6: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1)))
7: rnd64((rnd64(x1) * rnd64(x1)))
8: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))
9: rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))
10: rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))
11: rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3))
12: rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3))))
13: rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6))
14: rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6))))
15: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6))))))
16: rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))
17: rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))
18: rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))))
19: rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1)))
20: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1)))))
21: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1)))
22: rnd64((3 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))
23: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1))) + rnd64((3 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))))
24: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(((2 * rnd64(x1)) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) - 3)))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd(64,ne,1.000000,-53,0)(((4 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))) - 6)))))) * rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))) + rnd64((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1)))))))) + rnd64((rnd64((rnd64(x1) * rnd64(x1))) * rnd64(x1))))) + rnd64(x1))) + rnd64((3 * rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((3 * rnd64(x1))) * rnd64(x1))) + (2 * rnd64(x2)))) - rnd64(x1))) / rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + 1))))))))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 7.443906e-06 (low = 7.443906e-06, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 9.281447e+04 (low = 9.192891e+04, subopt = 1.0%)
total2: 8.264396e-22 (low = 8.264396e-22, subopt = 0.0%)
exact total: 1.030448e-11 (low = 1.020616e-11, subopt = 1.0%)

Elapsed time: 2.45717
*************************************

-------------------------------------------------------------------------------
Problem: jet

Optimization lower bounds for error models:
The absolute error model (exact): 1.020616e-11 (suboptimality = 1.0%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 1.030448e-11

Elapsed time: 2.46



real	0m2.464s
user	0m2.388s
sys	0m0.032s
