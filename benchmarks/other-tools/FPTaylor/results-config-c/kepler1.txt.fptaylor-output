Date: Sat Jun 24 09:32:16 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c.cfg kepler1.txt
FPTaylor, version 0.9.1+dev

Loading: kepler1.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd64((rnd64((rnd64((rnd64((-(rnd64(x1)))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd64((rnd64((rnd64((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd64((rnd64((rnd64((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3))))) - rnd64((rnd64(x1) * rnd64(x2))))) - rnd64(x4)))

Conservative bound: [-490.320768, 282.739712]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3))))) - rnd64((rnd64(x1) * rnd64(x2))))) - rnd64(x4)))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) - (x1 * x3)) - (x1 * x2)) - x4)
-1 (108): exp = -53: (3653897041425209/9903520314283042199192993792)
1 (6): exp = -53: (((((((x1 * x4) * (-(floor_power2(x1)))) + (((((-(x1)) + x2) + x3) - x4) * (x4 * floor_power2(x1)))) + (x2 * floor_power2(x1))) + (x3 * floor_power2(x1))) + (-((x3 * floor_power2(x1))))) + (-((x2 * floor_power2(x1)))))
2 (13): exp = -53: (((((((x1 * x4) * (-(floor_power2(x4)))) + (((((-(x1)) + x2) + x3) - x4) * (x1 * floor_power2(x4)))) + (x2 * floor_power2(x4))) + (x3 * floor_power2(x4))) + (-(((x2 * x3) * floor_power2(x4))))) + (-(floor_power2(x4))))
3 (4): exp = -53: (((((-(x1)) + x2) + x3) - x4) * floor_power2(((x1 * x4) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))
4 (7): exp = -53: (((((((x1 * x4) * floor_power2(x2)) + (x2 * (-(floor_power2(x2))))) + ((((x1 - x2) + x3) + x4) * floor_power2(x2))) + (x3 * floor_power2(x2))) + (-((x4 * (x3 * floor_power2(x2)))))) + (-((x1 * floor_power2(x2)))))
5 (8): exp = -53: ((x1 * x4) * floor_power2((((-(x1)) + x2) + interval(-8.88178419700125232339e-16, 8.88178419700125232339e-16))))
6 (10): exp = -53: (((((((x1 * x4) * floor_power2(x3)) + (x2 * floor_power2(x3))) + (x3 * (-(floor_power2(x3))))) + ((((x1 + x2) - x3) + x4) * floor_power2(x3))) + (-((x4 * (x2 * floor_power2(x3)))))) + (-((x1 * floor_power2(x3)))))
7 (11): exp = -53: ((x1 * x4) * floor_power2(((((-(x1)) + x2) + x3) + interval(-1.55431223447521915659e-15, 1.55431223447521915659e-15))))
8 (14): exp = -53: ((x1 * x4) * floor_power2((((((-(x1)) + x2) + x3) - x4) + interval(-2.88657986402540700510e-15, 2.88657986402540700510e-15))))
9 (17): exp = -53: floor_power2((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + interval(-1.78155445951233724180e-13, 1.78155445951233724180e-13)))
10 (22): exp = -53: (x2 * floor_power2(((x1 - x2) + interval(-8.88178419700125232339e-16, 8.88178419700125232339e-16))))
11 (25): exp = -53: (x2 * floor_power2((((x1 - x2) + x3) + interval(-1.55431223447521915659e-15, 1.55431223447521915659e-15))))
12 (28): exp = -53: (x2 * floor_power2(((((x1 - x2) + x3) + x4) + interval(-2.88657986402540700510e-15, 2.88657986402540700510e-15))))
13 (31): exp = -53: floor_power2(((x2 * (((x1 - x2) + x3) + x4)) + interval(-3.07043279690333484671e-14, 3.07043279690333484671e-14)))
14 (33): exp = -53: floor_power2(((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + interval(-2.30176055993070128710e-13, 2.30176055993070128710e-13)))
15 (38): exp = -53: (x3 * floor_power2(((x1 + x2) + interval(-8.88178419700125232339e-16, 8.88178419700125232339e-16))))
16 (41): exp = -53: (x3 * floor_power2((((x1 + x2) - x3) + interval(-2.22044604925031308085e-15, 2.22044604925031308085e-15))))
17 (44): exp = -53: (x3 * floor_power2(((((x1 + x2) - x3) + x4) + interval(-3.55271367880050092936e-15, 3.55271367880050092936e-15))))
18 (47): exp = -53: floor_power2(((x3 * (((x1 + x2) - x3) + x4)) + interval(-3.49409390310029486021e-14, 3.49409390310029486021e-14)))
19 (49): exp = -53: floor_power2((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) + interval(-3.00644131812078143404e-13, 3.00644131812078143404e-13)))
20 (54): exp = -53: (-((x4 * floor_power2(((x2 * x3) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15))))))
21 (58): exp = -53: (-(floor_power2((((x2 * x3) * x4) + interval(-7.64849517054245051821e-14, 7.64849517054245051821e-14)))))
22 (60): exp = -53: floor_power2(((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) + interval(-4.33972502378310865404e-13, 4.33972502378310865404e-13)))
23 (65): exp = -53: (-(floor_power2(((x1 * x3) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15)))))
24 (67): exp = -53: floor_power2((((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) - (x1 * x3)) + interval(-4.71595740236808232850e-13, 4.71595740236808232850e-13)))
25 (72): exp = -53: (-(floor_power2(((x1 * x2) + interval(-5.64881474929279755053e-15, 5.64881474929279755053e-15)))))
26 (74): exp = -53: floor_power2(((((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) - (x1 * x3)) - (x1 * x2)) + interval(-5.09218978095305549809e-13, 5.09218978095305549809e-13)))
27 (77): exp = -53: floor_power2((((((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) - (x1 * x3)) - (x1 * x2)) - x4) + interval(-5.38084776735559619860e-13, 5.38084776735559619860e-13)))

Corresponding original subexpressions:
1: rnd64(x1)
2: rnd64(x4)
3: rnd64((rnd64(x1) * rnd64(x4)))
4: rnd64(x2)
5: rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2)))
6: rnd64(x3)
7: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3)))
8: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4)))
9: rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4)))))
10: rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2)))
11: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3)))
12: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4)))
13: rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4)))))
14: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4)))))))
15: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2)))
16: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3)))
17: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4)))
18: rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4)))))
19: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4)))))))
20: rnd64((rnd64(x2) * rnd64(x3)))
21: rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4)))
22: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4)))))
23: rnd64((rnd64(x1) * rnd64(x3)))
24: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3)))))
25: rnd64((rnd64(x1) * rnd64(x2)))
26: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3))))) - rnd64((rnd64(x1) * rnd64(x2)))))
27: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3))))) - rnd64((rnd64(x1) * rnd64(x2))))) - rnd64(x4)))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 3.689493e-13 (low = 3.689493e-13, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 2.578869e+03 (low = 2.433192e+03, subopt = 5.6%)
total2: 4.096160e-29 (low = 4.096160e-29, subopt = 0.0%)
exact total: 2.863120e-13 (low = 2.701386e-13, subopt = 5.6%)

Elapsed time: 1.64204
*************************************

-------------------------------------------------------------------------------
Problem: kepler1

Optimization lower bounds for error models:
The absolute error model (exact): 2.701386e-13 (suboptimality = 5.6%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 2.863120e-13

Elapsed time: 1.64



real	0m1.648s
user	0m1.580s
sys	0m0.024s
