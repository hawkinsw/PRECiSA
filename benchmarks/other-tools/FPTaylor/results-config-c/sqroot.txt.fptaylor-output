Date: Sat Jun 24 09:32:24 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c.cfg sqroot.txt
FPTaylor, version 0.9.1+dev

Loading: sqroot.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64(1) + rnd64((rnd64((1/2)) * rnd64(y))))) - rnd64((rnd64((rnd64((1/8)) * rnd64(y))) * rnd64(y))))) + rnd64((rnd64((rnd64((rnd64((1/16)) * rnd64(y))) * rnd64(y))) * rnd64(y))))) - rnd64((rnd64((rnd64((rnd64((rnd64((5/128)) * rnd64(y))) * rnd64(y))) * rnd64(y))) * rnd64(y)))))

Conservative bound: [0.835937, 1.562500]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((1 + rnd(64,ne,1.000000,0,-1022)(((1/2) * rnd64(y))))) - rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd64(y))) * rnd64(y))))) + rnd64((rnd64((rnd(64,ne,1.000000,0,-1022)(((1/16) * rnd64(y))) * rnd64(y))) * rnd64(y))))) - rnd64((rnd64((rnd64((rnd64(((5/128) * rnd64(y))) * rnd64(y))) * rnd64(y))) * rnd64(y)))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((1 + ((1/2) * y)) - (((1/8) * y) * y)) + ((((1/16) * y) * y) * y)) - (((((5/128) * y) * y) * y) * y))
-1 (68): exp = -53: (4714705859903493/162259276829213363391578010288128)
1 (1): exp = -53: (((((((((((1/2) * floor_power2(y)) + (-((((1/8) * y) * floor_power2(y))))) + (-((y * ((1/8) * floor_power2(y)))))) + ((((1/16) * y) * y) * floor_power2(y))) + (y * (((1/16) * y) * floor_power2(y)))) + (y * (y * ((1/16) * floor_power2(y))))) + (-((((((5/128) * y) * y) * y) * floor_power2(y))))) + (-((y * ((((5/128) * y) * y) * floor_power2(y)))))) + (-((y * (y * (((5/128) * y) * floor_power2(y))))))) + (-((y * (y * (y * ((5/128) * floor_power2(y))))))))
2 (4): exp = -53: floor_power2(((1 + ((1/2) * y)) + interval(-2.77555756156289196736e-17, 2.77555756156289196736e-17)))
3 (11): exp = -53: (-(floor_power2(((((1/8) * y) * y) + interval(-1.38777878078144598368e-17, 1.38777878078144598368e-17)))))
4 (13): exp = -53: floor_power2((((1 + ((1/2) * y)) - (((1/8) * y) * y)) + interval(-1.66533453693773505715e-16, 1.66533453693773505715e-16)))
5 (20): exp = -53: (y * floor_power2(((((1/16) * y) * y) + interval(-6.93889390390722991839e-18, 6.93889390390722991839e-18))))
6 (24): exp = -53: floor_power2((((((1/16) * y) * y) * y) + interval(-1.73472347597680740256e-17, 1.73472347597680740256e-17)))
7 (26): exp = -53: floor_power2(((((1 + ((1/2) * y)) - (((1/8) * y) * y)) + ((((1/16) * y) * y) * y)) + interval(-3.01841884819964483731e-16, 3.01841884819964483731e-16)))
8 (30): exp = -53: (-((y * (y * (y * floor_power2((((5/128) * y) + interval(-2.16840434497100886801e-18, 2.16840434497100886801e-18))))))))
9 (34): exp = -53: (-((y * (y * floor_power2(((((5/128) * y) * y) + interval(-7.80625564189563346560e-18, 7.80625564189563346560e-18)))))))
10 (38): exp = -53: (-((y * floor_power2((((((5/128) * y) * y) * y) + interval(-1.34441069388202565224e-17, 1.34441069388202565224e-17))))))
11 (42): exp = -53: (-(floor_power2(((((((5/128) * y) * y) * y) * y) + interval(-1.90819582357448811200e-17, 1.90819582357448811200e-17)))))
12 (44): exp = -53: floor_power2((((((1 + ((1/2) * y)) - (((1/8) * y) * y)) + ((((1/16) * y) * y) * y)) - (((((5/128) * y) * y) * y) * y)) + interval(-4.35415592470178630001e-16, 4.35415592470178630001e-16)))

Corresponding original subexpressions:
1: rnd64(y)
2: rnd(64,ne,1.000000,-53,0)((1 + rnd(64,ne,1.000000,0,-1022)(((1/2) * rnd64(y)))))
3: rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd64(y))) * rnd64(y)))
4: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((1 + rnd(64,ne,1.000000,0,-1022)(((1/2) * rnd64(y))))) - rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd64(y))) * rnd64(y)))))
5: rnd64((rnd(64,ne,1.000000,0,-1022)(((1/16) * rnd64(y))) * rnd64(y)))
6: rnd64((rnd64((rnd(64,ne,1.000000,0,-1022)(((1/16) * rnd64(y))) * rnd64(y))) * rnd64(y)))
7: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((1 + rnd(64,ne,1.000000,0,-1022)(((1/2) * rnd64(y))))) - rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd64(y))) * rnd64(y))))) + rnd64((rnd64((rnd(64,ne,1.000000,0,-1022)(((1/16) * rnd64(y))) * rnd64(y))) * rnd64(y)))))
8: rnd64(((5/128) * rnd64(y)))
9: rnd64((rnd64(((5/128) * rnd64(y))) * rnd64(y)))
10: rnd64((rnd64((rnd64(((5/128) * rnd64(y))) * rnd64(y))) * rnd64(y)))
11: rnd64((rnd64((rnd64((rnd64(((5/128) * rnd64(y))) * rnd64(y))) * rnd64(y))) * rnd64(y)))
12: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((1 + rnd(64,ne,1.000000,0,-1022)(((1/2) * rnd64(y))))) - rnd64((rnd(64,ne,1.000000,0,-1022)(((1/8) * rnd64(y))) * rnd64(y))))) + rnd64((rnd64((rnd(64,ne,1.000000,0,-1022)(((1/16) * rnd64(y))) * rnd64(y))) * rnd64(y))))) - rnd64((rnd64((rnd64((rnd64(((5/128) * rnd64(y))) * rnd64(y))) * rnd64(y))) * rnd64(y)))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 2.905662e-17 (low = 2.905662e-17, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 4.518418e+00 (low = 4.390625e+00, subopt = 2.8%)
total2: 3.225933e-33 (low = 3.225933e-33, subopt = 0.0%)
exact total: 5.016452e-16 (low = 4.874573e-16, subopt = 2.8%)

Elapsed time: 0.46816
*************************************

-------------------------------------------------------------------------------
Problem: sqroot

Optimization lower bounds for error models:
The absolute error model (exact): 4.874573e-16 (suboptimality = 2.8%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 5.016452e-16

Elapsed time: 0.47



real	0m0.473s
user	0m0.404s
sys	0m0.024s
