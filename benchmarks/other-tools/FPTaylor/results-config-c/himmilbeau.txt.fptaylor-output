Date: Sat Jun 24 09:32:10 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-c.cfg himmilbeau.txt
FPTaylor, version 0.9.1+dev

Loading: himmilbeau.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - rnd64(11))) * rnd64((rnd64((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - rnd64(11))))) + rnd64((rnd64((rnd64((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - rnd64(7))) * rnd64((rnd64((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - rnd64(7)))))))

Conservative bound: [-0.000000, 890.000000]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - 11)) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - 11)))) + rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - 7)) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - 7))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((((x1 * x1) + x2) - 11) * (((x1 * x1) + x2) - 11)) + (((x1 + (x2 * x2)) - 7) * ((x1 + (x2 * x2)) - 7)))
-1 (68): exp = -53: (5022569115680775/2475880078570760549798248448)
1 (12): exp = -53: (((((((((x1 * x1) + x2) - 11) * (x1 * floor_power2(x1))) + ((((x1 * x1) + x2) - 11) * (x1 * floor_power2(x1)))) + ((((x1 * x1) + x2) - 11) * (x1 * floor_power2(x1)))) + ((((x1 * x1) + x2) - 11) * (x1 * floor_power2(x1)))) + (((x1 + (x2 * x2)) - 7) * floor_power2(x1))) + (((x1 + (x2 * x2)) - 7) * floor_power2(x1)))
2 (14): exp = -53: (((((x1 * x1) + x2) - 11) * floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15)))) + ((((x1 * x1) + x2) - 11) * floor_power2(((x1 * x1) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15)))))
3 (16): exp = -53: (((((((((x1 * x1) + x2) - 11) * floor_power2(x2)) + ((((x1 * x1) + x2) - 11) * floor_power2(x2))) + (((x1 + (x2 * x2)) - 7) * (x2 * floor_power2(x2)))) + (((x1 + (x2 * x2)) - 7) * (x2 * floor_power2(x2)))) + (((x1 + (x2 * x2)) - 7) * (x2 * floor_power2(x2)))) + (((x1 + (x2 * x2)) - 7) * (x2 * floor_power2(x2))))
4 (17): exp = -53: (((((x1 * x1) + x2) - 11) * floor_power2((((x1 * x1) + x2) + interval(-6.66133814775094003140e-15, 6.66133814775094003140e-15)))) + ((((x1 * x1) + x2) - 11) * floor_power2((((x1 * x1) + x2) + interval(-6.66133814775094003140e-15, 6.66133814775094003140e-15)))))
5 (19): exp = -53: (((((x1 * x1) + x2) - 11) * floor_power2(((((x1 * x1) + x2) - 11) + interval(-8.43769498715119128494e-15, 8.43769498715119128494e-15)))) + ((((x1 * x1) + x2) - 11) * floor_power2(((((x1 * x1) + x2) - 11) + interval(-8.43769498715119128494e-15, 8.43769498715119128494e-15)))))
6 (22): exp = -53: floor_power2((((((x1 * x1) + x2) - 11) * (((x1 * x1) + x2) - 11)) + interval(-3.88133969408955231403e-13, 3.88133969408955231403e-13)))
7 (38): exp = -53: ((((x1 + (x2 * x2)) - 7) * floor_power2(((x2 * x2) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15)))) + (((x1 + (x2 * x2)) - 7) * floor_power2(((x2 * x2) + interval(-4.44089209850062695056e-15, 4.44089209850062695056e-15)))))
8 (40): exp = -53: ((((x1 + (x2 * x2)) - 7) * floor_power2(((x1 + (x2 * x2)) + interval(-6.66133814775094003140e-15, 6.66133814775094003140e-15)))) + (((x1 + (x2 * x2)) - 7) * floor_power2(((x1 + (x2 * x2)) + interval(-6.66133814775094003140e-15, 6.66133814775094003140e-15)))))
9 (42): exp = -53: ((((x1 + (x2 * x2)) - 7) * floor_power2((((x1 + (x2 * x2)) - 7) + interval(-8.43769498715119128494e-15, 8.43769498715119128494e-15)))) + (((x1 + (x2 * x2)) - 7) * floor_power2((((x1 + (x2 * x2)) - 7) + interval(-8.43769498715119128494e-15, 8.43769498715119128494e-15)))))
10 (45): exp = -53: floor_power2(((((x1 + (x2 * x2)) - 7) * ((x1 + (x2 * x2)) - 7)) + interval(-4.69846384021366954727e-13, 4.69846384021366954727e-13)))
11 (47): exp = -53: floor_power2(((((((x1 * x1) + x2) - 11) * (((x1 * x1) + x2) - 11)) + (((x1 + (x2 * x2)) - 7) * ((x1 + (x2 * x2)) - 7))) + interval(-9.43245481721535622073e-13, 9.43245481721535622073e-13)))

Corresponding original subexpressions:
1: rnd64(x1)
2: rnd64((rnd64(x1) * rnd64(x1)))
3: rnd64(x2)
4: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2)))
5: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - 11))
6: rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - 11)) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - 11))))
7: rnd64((rnd64(x2) * rnd64(x2)))
8: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2)))))
9: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - 7))
10: rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - 7)) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - 7))))
11: rnd(64,ne,1.000000,-53,0)((rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - 11)) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x1) * rnd64(x1))) + rnd64(x2))) - 11)))) + rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - 7)) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64((rnd64(x2) * rnd64(x2))))) - 7))))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 2.028600e-12 (low = 2.028600e-12, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 9.008000e+03 (low = 9.008000e+03, subopt = 0.0%)
total2: 2.252198e-28 (low = 2.252198e-28, subopt = 0.0%)
exact total: 1.000089e-12 (low = 1.000089e-12, subopt = 0.0%)

Elapsed time: 0.48809
*************************************

-------------------------------------------------------------------------------
Problem: himmilbeau

Optimization lower bounds for error models:
The absolute error model (exact): 1.000089e-12 (suboptimality = 0.0%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 1.000089e-12

Elapsed time: 0.49



real	0m0.493s
user	0m0.420s
sys	0m0.032s
