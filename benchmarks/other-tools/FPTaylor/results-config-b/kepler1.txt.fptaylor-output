Date: Sat Jun 24 09:31:52 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-b.cfg kepler1.txt
FPTaylor, version 0.9.1+dev

Loading: kepler1.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd64((rnd64((rnd64((rnd64((-(rnd64(x1)))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd64((rnd64((rnd64((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd64((rnd64((rnd64((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3))))) - rnd64((rnd64(x1) * rnd64(x2))))) - rnd64(x4)))

Conservative bound: [-490.320768, 282.739712]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3))))) - rnd64((rnd64(x1) * rnd64(x2))))) - rnd64(x4)))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = ((((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) - (x1 * x3)) - (x1 * x2)) - x4)
-1 (108): exp = -53: (634268081909097/154742504910672534362390528)
1 (6): exp = -53: (((((((x1 * x4) * (-(4))) + (((((-(x1)) + x2) + x3) - x4) * (x4 * 4))) + (x2 * 4)) + (x3 * 4)) + (-((x3 * 4)))) + (-((x2 * 4))))
2 (13): exp = -53: (((((((x1 * x4) * (-(4))) + (((((-(x1)) + x2) + x3) - x4) * (x1 * 4))) + (x2 * 4)) + (x3 * 4)) + (-(((x2 * x3) * 4)))) + (-(4)))
3 (4): exp = -53: (((((-(x1)) + x2) + x3) - x4) * (x1 * x4))
4 (7): exp = -53: (((((((x1 * x4) * 4) + (x2 * (-(4)))) + ((((x1 - x2) + x3) + x4) * 4)) + (x3 * 4)) + (-((x4 * (x3 * 4))))) + (-((x1 * 4))))
5 (8): exp = -53: ((x1 * x4) * ((-(x1)) + x2))
6 (10): exp = -53: (((((((x1 * x4) * 4) + (x2 * 4)) + (x3 * (-(4)))) + ((((x1 + x2) - x3) + x4) * 4)) + (-((x4 * (x2 * 4))))) + (-((x1 * 4))))
7 (11): exp = -53: ((x1 * x4) * (((-(x1)) + x2) + x3))
8 (14): exp = -53: ((x1 * x4) * ((((-(x1)) + x2) + x3) - x4))
9 (17): exp = -53: ((x1 * x4) * ((((-(x1)) + x2) + x3) - x4))
10 (22): exp = -53: (x2 * (x1 - x2))
11 (25): exp = -53: (x2 * ((x1 - x2) + x3))
12 (28): exp = -53: (x2 * (((x1 - x2) + x3) + x4))
13 (31): exp = -53: (x2 * (((x1 - x2) + x3) + x4))
14 (33): exp = -53: (((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4)))
15 (38): exp = -53: (x3 * (x1 + x2))
16 (41): exp = -53: (x3 * ((x1 + x2) - x3))
17 (44): exp = -53: (x3 * (((x1 + x2) - x3) + x4))
18 (47): exp = -53: (x3 * (((x1 + x2) - x3) + x4))
19 (49): exp = -53: ((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4)))
20 (54): exp = -53: (-((x4 * (x2 * x3))))
21 (58): exp = -53: (-(((x2 * x3) * x4)))
22 (60): exp = -53: (((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4))
23 (65): exp = -53: (-((x1 * x3)))
24 (67): exp = -53: ((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) - (x1 * x3))
25 (72): exp = -53: (-((x1 * x2)))
26 (74): exp = -53: (((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) - (x1 * x3)) - (x1 * x2))
27 (77): exp = -53: ((((((((x1 * x4) * ((((-(x1)) + x2) + x3) - x4)) + (x2 * (((x1 - x2) + x3) + x4))) + (x3 * (((x1 + x2) - x3) + x4))) - ((x2 * x3) * x4)) - (x1 * x3)) - (x1 * x2)) - x4)

Corresponding original subexpressions:
1: rnd64(x1)
2: rnd64(x4)
3: rnd64((rnd64(x1) * rnd64(x4)))
4: rnd64(x2)
5: rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2)))
6: rnd64(x3)
7: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3)))
8: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4)))
9: rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4)))))
10: rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2)))
11: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3)))
12: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4)))
13: rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4)))))
14: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4)))))))
15: rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2)))
16: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3)))
17: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4)))
18: rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4)))))
19: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4)))))))
20: rnd64((rnd64(x2) * rnd64(x3)))
21: rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4)))
22: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4)))))
23: rnd64((rnd64(x1) * rnd64(x3)))
24: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3)))))
25: rnd64((rnd64(x1) * rnd64(x2)))
26: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3))))) - rnd64((rnd64(x1) * rnd64(x2)))))
27: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64((rnd64(x1) * rnd64(x4))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))))) + rnd64((rnd64(x2) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) - rnd64(x2))) + rnd64(x3))) + rnd64(x4))))))) + rnd64((rnd64(x3) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64(x1) + rnd64(x2))) - rnd64(x3))) + rnd64(x4))))))) - rnd64((rnd64((rnd64(x2) * rnd64(x3))) * rnd64(x4))))) - rnd64((rnd64(x1) * rnd64(x3))))) - rnd64((rnd64(x1) * rnd64(x2))))) - rnd64(x4)))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 4.098861e-12 (low = 4.098861e-12, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 3.209341e+03 (low = 3.181646e+03, subopt = 0.9%)
total2: 4.550650e-28 (low = 4.550650e-28, subopt = 0.0%)
exact total: 3.563084e-13 (low = 3.532336e-13, subopt = 0.9%)

Elapsed time: 0.58756
*************************************

-------------------------------------------------------------------------------
Problem: kepler1

Optimization lower bounds for error models:
The absolute error model (exact): 3.532336e-13 (suboptimality = 0.9%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 3.563084e-13

Elapsed time: 0.59



real	0m0.593s
user	0m0.520s
sys	0m0.028s
