Date: Sat Jun 24 09:31:47 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-b.cfg doppler3.txt
FPTaylor, version 0.9.1+dev

Loading: doppler3.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((-(rnd64(rnd64((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))))))) * rnd64(v))) / rnd64((rnd64((rnd64(rnd64((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T)))))) + rnd64(u))) * rnd64((rnd64(rnd64((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T)))))) + rnd64(u)))))))

Conservative bound: [-96.294005, -0.437731]

Simplified rounding: rnd64((rnd64(((-(rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))))) * rnd64(v))) / rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((-(((1657/5) + ((3/5) * T)))) * v) * (1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))
-1 (58): exp = -53: (6448177567252481/1237940039285380274899124224)
1 (24): exp = -53: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * 256) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * 256) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(256)))))
2 (25): exp = -53: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (T * (1/2))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (T * (1/2))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-((T * (1/2)))))))
3 (26): exp = -53: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * 32)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * 32)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(((3/5) * 32))))))
4 (28): exp = -53: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * T)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((3/5) * T)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(((3/5) * T))))))
5 (30): exp = -53: (((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((1657/5) + ((3/5) * T))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * ((1657/5) + ((3/5) * T))) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))) + ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * (v * (-(((1657/5) + ((3/5) * T)))))))
6 (9): exp = -53: ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * ((-(((1657/5) + ((3/5) * T)))) * 16384))
7 (11): exp = -53: ((1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))) * ((-(((1657/5) + ((3/5) * T)))) * v))
8 (32): exp = -53: ((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * 64) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * 64) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))))
9 (33): exp = -53: ((((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))) + (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))))))
10 (36): exp = -53: (((-(((1657/5) + ((3/5) * T)))) * v) * (-((((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) / (((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)) * ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u)))))))
11 (40): exp = -53: (((-(((1657/5) + ((3/5) * T)))) * v) * (1 / ((((1657/5) + ((3/5) * T)) + u) * (((1657/5) + ((3/5) * T)) + u))))

Corresponding original subexpressions:
1: rnd64((1657/5))
2: rnd64((3/5))
3: rnd64(T)
4: rnd64((rnd64((3/5)) * rnd64(T)))
5: rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T)))))
6: rnd64(v)
7: rnd64(((-(rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))))) * rnd64(v)))
8: rnd64(u)
9: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u)))
10: rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u)))))
11: rnd64((rnd64(((-(rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))))) * rnd64(v))) / rnd64((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u))) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((1657/5)) + rnd64((rnd64((3/5)) * rnd64(T))))) + rnd64(u)))))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 5.208796e-12 (low = 5.208796e-12, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 7.401534e+02 (low = 7.340739e+02, subopt = 0.8%)
total2: 5.782926e-28 (low = 5.782926e-28, subopt = 0.0%)
exact total: 8.217353e-14 (low = 8.149857e-14, subopt = 0.8%)

Elapsed time: 1.90874
*************************************

-------------------------------------------------------------------------------
Problem: doppler3

Optimization lower bounds for error models:
The absolute error model (exact): 8.149857e-14 (suboptimality = 0.8%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 8.217353e-14

Elapsed time: 1.91



real	0m1.914s
user	0m1.844s
sys	0m0.028s
