Date: Sat Jun 24 09:31:52 EDT 2017
Command:  ~/FPTaylor/repo/fptaylor -c config-b.cfg kepler0.txt
FPTaylor, version 0.9.1+dev

Loading: kepler0.txt

*************************************
Taylor form for: rnd64((rnd64((rnd64((rnd64((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3))))) - rnd64((rnd64(x5) * rnd64(x6))))) + rnd64((rnd64(x1) * rnd64((rnd64((rnd64((rnd64((rnd64((rnd64((-(rnd64(x1)))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))))

Conservative bound: [-35.779200, 159.817600]

Simplified rounding: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3))))) - rnd64((rnd64(x5) * rnd64(x6))))) + rnd64((rnd64(x1) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))))
Building Taylor forms...
Simplifying Taylor forms...
success
v0 = (((((x2 * x5) + (x3 * x6)) - (x2 * x3)) - (x5 * x6)) + (x1 * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)))
-1 (66): exp = -53: (4546119941039857/9903520314283042199192993792)
1 (1): exp = -53: (((x5 * 4) + (-((x3 * 4)))) + (x1 * 4))
2 (2): exp = -53: (((x2 * 4) + (-((x6 * 4)))) + (x1 * 4))
3 (4): exp = -53: (x2 * x5)
4 (6): exp = -53: (((x6 * 4) + (-((x2 * 4)))) + (x1 * 4))
5 (7): exp = -53: (((x3 * 4) + (-((x5 * 4)))) + (x1 * 4))
6 (9): exp = -53: (x3 * x6)
7 (11): exp = -53: ((x2 * x5) + (x3 * x6))
8 (16): exp = -53: (-((x2 * x3)))
9 (18): exp = -53: (((x2 * x5) + (x3 * x6)) - (x2 * x3))
10 (23): exp = -53: (-((x5 * x6)))
11 (25): exp = -53: ((((x2 * x5) + (x3 * x6)) - (x2 * x3)) - (x5 * x6))
12 (28): exp = -53: ((x1 * (-(4))) + (((((((-(x1)) + x2) + x3) - x4) + x5) + x6) * 4))
13 (30): exp = -53: (x1 * ((-(x1)) + x2))
14 (33): exp = -53: (x1 * (((-(x1)) + x2) + x3))
15 (35): exp = -53: (x1 * (-(4)))
16 (36): exp = -53: (x1 * ((((-(x1)) + x2) + x3) - x4))
17 (39): exp = -53: (x1 * (((((-(x1)) + x2) + x3) - x4) + x5))
18 (42): exp = -53: (x1 * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6))
19 (45): exp = -53: (x1 * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6))
20 (47): exp = -53: (((((x2 * x5) + (x3 * x6)) - (x2 * x3)) - (x5 * x6)) + (x1 * ((((((-(x1)) + x2) + x3) - x4) + x5) + x6)))

Corresponding original subexpressions:
1: rnd64(x2)
2: rnd64(x5)
3: rnd64((rnd64(x2) * rnd64(x5)))
4: rnd64(x3)
5: rnd64(x6)
6: rnd64((rnd64(x3) * rnd64(x6)))
7: rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6)))))
8: rnd64((rnd64(x2) * rnd64(x3)))
9: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3)))))
10: rnd64((rnd64(x5) * rnd64(x6)))
11: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3))))) - rnd64((rnd64(x5) * rnd64(x6)))))
12: rnd64(x1)
13: rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2)))
14: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3)))
15: rnd64(x4)
16: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4)))
17: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5)))
18: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))
19: rnd64((rnd64(x1) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))
20: rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd64((rnd64(x2) * rnd64(x5))) + rnd64((rnd64(x3) * rnd64(x6))))) - rnd64((rnd64(x2) * rnd64(x3))))) - rnd64((rnd64(x5) * rnd64(x6))))) + rnd64((rnd64(x1) * rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)((rnd(64,ne,1.000000,-53,0)(((-(rnd64(x1))) + rnd64(x2))) + rnd64(x3))) - rnd64(x4))) + rnd64(x5))) + rnd64(x6)))))))

bounds: [-inf, inf]

Computing absolute errors
-1: exp = -53: 4.590408e-13 (low = 4.590408e-13, subopt = 0.0%)

Solving the exact optimization problem
exact bound (exp = -53): 8.506738e+02 (low = 8.425519e+02, subopt = 1.0%)
total2: 5.096377e-29 (low = 5.096377e-29, subopt = 0.0%)
exact total: 9.444376e-14 (low = 9.354205e-14, subopt = 1.0%)

Elapsed time: 0.53527
*************************************

-------------------------------------------------------------------------------
Problem: kepler0

Optimization lower bounds for error models:
The absolute error model (exact): 9.354205e-14 (suboptimality = 1.0%)

Bounds (without rounding): [-inf, inf]

Absolute error (exact): 9.444376e-14

Elapsed time: 0.54



real	0m0.541s
user	0m0.480s
sys	0m0.016s
