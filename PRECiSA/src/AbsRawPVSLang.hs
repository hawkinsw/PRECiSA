

module AbsRawPVSLang where

-- Haskell module generated by the BNF converter




newtype VarId = VarId String deriving (Eq, Ord, Show, Read)
newtype NonVarId = NonVarId String deriving (Eq, Ord, Show, Read)
data AExpr
    = Add AExpr AExpr
    | Sub AExpr AExpr
    | Mul AExpr AExpr
    | Div AExpr AExpr
    | Pow AExpr AExpr
    | Neg AExpr
    | Floor AExpr
    | Sqrt AExpr
    | Abs AExpr
    | Sin AExpr
    | Cos AExpr
    | Tan AExpr
    | ASin AExpr
    | ACos AExpr
    | ATan AExpr
    | Mod AExpr AExpr
    | Ln AExpr
    | Exp AExpr
    | StoR FAExpr
    | DtoR FAExpr
    | Pi1
    | Pi2
    | Int Integer
    | Rat Double
  deriving (Eq, Ord, Show, Read)

data FAExpr
    = SAdd FAExpr FAExpr
    | DAdd FAExpr FAExpr
    | IAdd FAExpr FAExpr
    | SSub FAExpr FAExpr
    | DSub FAExpr FAExpr
    | ISub FAExpr FAExpr
    | SMul FAExpr FAExpr
    | DMul FAExpr FAExpr
    | IMul FAExpr FAExpr
    | SDiv FAExpr FAExpr
    | DDiv FAExpr FAExpr
    | IDiv FAExpr FAExpr
    | SNeg FAExpr
    | DNeg FAExpr
    | INeg FAExpr
    | SFloor FAExpr
    | DFloor FAExpr
    | SSqrt FAExpr
    | DSqrt FAExpr
    | SAbs FAExpr
    | DAbs FAExpr
    | IAbs FAExpr
    | SSin FAExpr
    | DSin FAExpr
    | SCos FAExpr
    | DCos FAExpr
    | STan FAExpr
    | DTan FAExpr
    | SAcos FAExpr
    | DAcos FAExpr
    | SAsin FAExpr
    | DAsin FAExpr
    | SAtan FAExpr
    | DAtan FAExpr
    | SMod FAExpr FAExpr
    | DMod FAExpr FAExpr
    | IMod FAExpr FAExpr
    | SLn FAExpr
    | DLn FAExpr
    | SExp FAExpr
    | DExp FAExpr
    | FPow FAExpr FAExpr
    | FNegN FAExpr
    | FCallN NonVarId [FAExpr]
    | FCall0 NonVarId
    | RtoS AExpr
    | RtoD AExpr
    | ItoS FAExpr
    | ItoD FAExpr
    | FInt Integer
    | Var VarId
  deriving (Eq, Ord, Show, Read)

data FBExpr
    = FOr FBExpr FBExpr
    | FAnd FBExpr FBExpr
    | FNot FBExpr
    | FEq FAExpr FAExpr
    | FNeq FAExpr FAExpr
    | FLt FAExpr FAExpr
    | FLtE FAExpr FAExpr
    | FGt FAExpr FAExpr
    | FGtE FAExpr FAExpr
    | FBTrue
    | FBFalse
  deriving (Eq, Ord, Show, Read)

data BExpr
    = Or BExpr BExpr
    | And BExpr BExpr
    | Not BExpr
    | Eq AExpr AExpr
    | Neq AExpr AExpr
    | Lt AExpr AExpr
    | LtE AExpr AExpr
    | Gt AExpr AExpr
    | GtE AExpr AExpr
    | BTrue
    | BFalse
  deriving (Eq, Ord, Show, Read)

data FPtype
    = TypeInt
    | TypeInteger
    | UnbSingle
    | UnbDouble
    | UnbPosSingle
    | UnbPosDouble
    | UnbNzSingle
    | UnbNzDouble
  deriving (Eq, Ord, Show, Read)

data Subrange = SubrageType Integer Integer
  deriving (Eq, Ord, Show, Read)

data Arg
    = FArg [VarId] FPtype
    | FArgSubrange [VarId] Subrange
    | FArgGuard [VarId] FPtype BExpr
    | FArgNoType VarId
  deriving (Eq, Ord, Show, Read)

newtype Args = FArgs [Arg]
  deriving (Eq, Ord, Show, Read)

data ElsIf = ElsIf FBExpr Stm
  deriving (Eq, Ord, Show, Read)

data Stm
    = LetWithType VarId FPtype FAExpr Stm
    | Let VarId FAExpr Stm
    | If FBExpr Stm Stm
    | ListIf FBExpr Stm [ElsIf] Stm
    | For Integer Integer FAExpr NonVarId
    | Expr FAExpr
    | UnstWarning
  deriving (Eq, Ord, Show, Read)

data Decl
    = DeclN NonVarId Args FPtype Stm
    | Decl0 NonVarId FPtype Stm
  deriving (Eq, Ord, Show, Read)

newtype Imp = LibImp [NonVarId]
  deriving (Eq, Ord, Show, Read)

data VarDecl = VarDeclaration VarId FPtype
  deriving (Eq, Ord, Show, Read)

data Program
    = Prog NonVarId Imp [VarDecl] [Decl] NonVarId
    | ProgImp NonVarId [VarDecl] [Decl] NonVarId
  deriving (Eq, Ord, Show, Read)

