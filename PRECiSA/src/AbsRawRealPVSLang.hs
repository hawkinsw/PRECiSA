

module AbsRawRealPVSLang where

-- Haskell module generated by the BNF converter




newtype VarId = VarId String deriving (Eq, Ord, Show, Read)
newtype NonVarId = NonVarId String deriving (Eq, Ord, Show, Read)
data AExpr
    = Add AExpr AExpr
    | Sub AExpr AExpr
    | Mul AExpr AExpr
    | Div AExpr AExpr
    | Pow AExpr AExpr
    | Neg AExpr
    | Floor AExpr
    | Sqrt AExpr
    | Abs AExpr
    | Sin AExpr
    | Cos AExpr
    | Tan AExpr
    | ASin AExpr
    | ACos AExpr
    | ATan AExpr
    | Ln AExpr
    | Exp AExpr
    | Mod1 AExpr AExpr
    | Mod2 AExpr AExpr
    | ArrayElem VarId AExpr
    | FCallN NonVarId [AExpr]
    | FCall0 NonVarId
    | RtoS AExpr
    | RtoD AExpr
    | ItoS AExpr
    | ItoD AExpr
    | Pi1
    | Pi2
    | Int Integer
    | Rat Double
    | Var VarId
  deriving (Eq, Ord, Show, Read)

data BExpr
    = Or BExpr BExpr
    | And BExpr BExpr
    | Not BExpr
    | Eq AExpr AExpr
    | Neq AExpr AExpr
    | Lt AExpr AExpr
    | LtE AExpr AExpr
    | Gt AExpr AExpr
    | GtE AExpr AExpr
    | BTrue
    | BFalse
  deriving (Eq, Ord, Show, Read)

data Type
    = TypeReal
    | TypeInt
    | TypeInteger
    | TypePosNat
    | TypeBelow Integer
    | TypeArrayInteger Type
    | TypeArrayInt Type
    | TypeArrayBelow AExpr Type
  deriving (Eq, Ord, Show, Read)

data Subrange = SubrageType Integer Integer
  deriving (Eq, Ord, Show, Read)

data Arg
    = FArg [VarId] Type
    | FArgSubrange [VarId] Subrange
    | FArgGuard [VarId] Type BExpr
    | FArgNoType VarId
  deriving (Eq, Ord, Show, Read)

newtype Args = FArgs [Arg]
  deriving (Eq, Ord, Show, Read)

data ElsIf = ElsIf BExpr Stm
  deriving (Eq, Ord, Show, Read)

data Stm
    = LetWithType VarId Type AExpr Stm
    | Let VarId AExpr Stm
    | If BExpr Stm Stm
    | ListIf BExpr Stm [ElsIf] Stm
    | For Type AExpr AExpr AExpr VarId AExpr AExpr VarId Type Stm
    | Expr AExpr
    | UnstWarning
  deriving (Eq, Ord, Show, Read)

data Decl
    = DeclN NonVarId Args Type Stm
    | DeclRec NonVarId Args Type Stm
    | Decl0 NonVarId Type Stm
  deriving (Eq, Ord, Show, Read)

newtype Imp = LibImp [NonVarId]
  deriving (Eq, Ord, Show, Read)

data VarDecl = VarDeclaration VarId Type
  deriving (Eq, Ord, Show, Read)

data Program
    = Prog NonVarId Imp [VarDecl] [Decl] NonVarId
    | ProgImp NonVarId [VarDecl] [Decl] NonVarId
  deriving (Eq, Ord, Show, Read)

