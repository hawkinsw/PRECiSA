-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParRawPVSLang where
import AbsRawPVSLang
import LexRawPVSLang
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '/' { PT _ (TS _ 7) }
  '/=' { PT _ (TS _ 8) }
  ':' { PT _ (TS _ 9) }
  '<' { PT _ (TS _ 10) }
  '<=' { PT _ (TS _ 11) }
  '=' { PT _ (TS _ 12) }
  '>' { PT _ (TS _ 13) }
  '>=' { PT _ (TS _ 14) }
  'AND' { PT _ (TS _ 15) }
  'BEGIN' { PT _ (TS _ 16) }
  'Dabs' { PT _ (TS _ 17) }
  'Dacos' { PT _ (TS _ 18) }
  'Dadd' { PT _ (TS _ 19) }
  'Dasin' { PT _ (TS _ 20) }
  'Datan' { PT _ (TS _ 21) }
  'Dcos' { PT _ (TS _ 22) }
  'Ddiv' { PT _ (TS _ 23) }
  'Dexp' { PT _ (TS _ 24) }
  'Dfloor' { PT _ (TS _ 25) }
  'Dln' { PT _ (TS _ 26) }
  'Dmod' { PT _ (TS _ 27) }
  'Dmul' { PT _ (TS _ 28) }
  'Dneg' { PT _ (TS _ 29) }
  'Dsin' { PT _ (TS _ 30) }
  'Dsqrt' { PT _ (TS _ 31) }
  'Dsub' { PT _ (TS _ 32) }
  'Dtan' { PT _ (TS _ 33) }
  'DtoR' { PT _ (TS _ 34) }
  'ELSE' { PT _ (TS _ 35) }
  'ELSIF' { PT _ (TS _ 36) }
  'END' { PT _ (TS _ 37) }
  'ENDIF' { PT _ (TS _ 38) }
  'FALSE' { PT _ (TS _ 39) }
  'IF' { PT _ (TS _ 40) }
  'IMPORTING' { PT _ (TS _ 41) }
  'IN' { PT _ (TS _ 42) }
  'Iabs' { PT _ (TS _ 43) }
  'Iadd' { PT _ (TS _ 44) }
  'Idiv' { PT _ (TS _ 45) }
  'Imod' { PT _ (TS _ 46) }
  'Imul' { PT _ (TS _ 47) }
  'Ineg' { PT _ (TS _ 48) }
  'Isub' { PT _ (TS _ 49) }
  'ItoD' { PT _ (TS _ 50) }
  'ItoS' { PT _ (TS _ 51) }
  'LET' { PT _ (TS _ 52) }
  'NOT' { PT _ (TS _ 53) }
  'OR' { PT _ (TS _ 54) }
  'PI' { PT _ (TS _ 55) }
  'RtoD' { PT _ (TS _ 56) }
  'RtoS' { PT _ (TS _ 57) }
  'Sabs' { PT _ (TS _ 58) }
  'Sacos' { PT _ (TS _ 59) }
  'Sadd' { PT _ (TS _ 60) }
  'Sasin' { PT _ (TS _ 61) }
  'Satan' { PT _ (TS _ 62) }
  'Scos' { PT _ (TS _ 63) }
  'Sdiv' { PT _ (TS _ 64) }
  'Sexp' { PT _ (TS _ 65) }
  'Sfloor' { PT _ (TS _ 66) }
  'Sln' { PT _ (TS _ 67) }
  'Smod' { PT _ (TS _ 68) }
  'Smul' { PT _ (TS _ 69) }
  'Sneg' { PT _ (TS _ 70) }
  'Ssin' { PT _ (TS _ 71) }
  'Ssqrt' { PT _ (TS _ 72) }
  'Ssub' { PT _ (TS _ 73) }
  'Stan' { PT _ (TS _ 74) }
  'StoR' { PT _ (TS _ 75) }
  'THEN' { PT _ (TS _ 76) }
  'THEORY' { PT _ (TS _ 77) }
  'TRUE' { PT _ (TS _ 78) }
  'VAR' { PT _ (TS _ 79) }
  '^' { PT _ (TS _ 80) }
  'abs' { PT _ (TS _ 81) }
  'acos' { PT _ (TS _ 82) }
  'asin' { PT _ (TS _ 83) }
  'atan' { PT _ (TS _ 84) }
  'cos' { PT _ (TS _ 85) }
  'exp' { PT _ (TS _ 86) }
  'floor' { PT _ (TS _ 87) }
  'for' { PT _ (TS _ 88) }
  'int' { PT _ (TS _ 89) }
  'integer' { PT _ (TS _ 90) }
  'ln' { PT _ (TS _ 91) }
  'mod' { PT _ (TS _ 92) }
  'pi' { PT _ (TS _ 93) }
  'sin' { PT _ (TS _ 94) }
  'sqrt' { PT _ (TS _ 95) }
  'subrange' { PT _ (TS _ 96) }
  'tan' { PT _ (TS _ 97) }
  'unb_double' { PT _ (TS _ 98) }
  'unb_nz_double' { PT _ (TS _ 99) }
  'unb_nz_single' { PT _ (TS _ 100) }
  'unb_pos_double' { PT _ (TS _ 101) }
  'unb_pos_single' { PT _ (TS _ 102) }
  'unb_single' { PT _ (TS _ 103) }
  'warning' { PT _ (TS _ 104) }
  '|' { PT _ (TS _ 105) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_VarId { PT _ (T_VarId $$) }
L_NonVarId { PT _ (T_NonVarId $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
VarId    :: { VarId} : L_VarId { VarId ($1)}
NonVarId    :: { NonVarId} : L_NonVarId { NonVarId ($1)}

AExpr :: { AExpr }
AExpr : AExpr1 { $1 }
      | AExpr '+' AExpr1 { AbsRawPVSLang.Add $1 $3 }
      | AExpr '-' AExpr1 { AbsRawPVSLang.Sub $1 $3 }
AExpr1 :: { AExpr }
AExpr1 : AExpr2 { $1 }
       | AExpr1 '*' AExpr2 { AbsRawPVSLang.Mul $1 $3 }
       | AExpr1 '/' AExpr2 { AbsRawPVSLang.Div $1 $3 }
AExpr2 :: { AExpr }
AExpr2 : AExpr3 { $1 }
       | AExpr3 '^' AExpr2 { AbsRawPVSLang.Pow $1 $3 }
AExpr3 :: { AExpr }
AExpr3 : AExpr4 { $1 } | '-' AExpr4 { AbsRawPVSLang.Neg $2 }
AExpr4 :: { AExpr }
AExpr4 : AExpr5 { $1 }
       | 'floor' '(' AExpr ')' { AbsRawPVSLang.Floor $3 }
       | 'sqrt' '(' AExpr ')' { AbsRawPVSLang.Sqrt $3 }
       | 'abs' '(' AExpr ')' { AbsRawPVSLang.Abs $3 }
       | 'sin' '(' AExpr ')' { AbsRawPVSLang.Sin $3 }
       | 'cos' '(' AExpr ')' { AbsRawPVSLang.Cos $3 }
       | 'tan' '(' AExpr ')' { AbsRawPVSLang.Tan $3 }
       | 'asin' '(' AExpr ')' { AbsRawPVSLang.ASin $3 }
       | 'acos' '(' AExpr ')' { AbsRawPVSLang.ACos $3 }
       | 'atan' '(' AExpr ')' { AbsRawPVSLang.ATan $3 }
       | 'mod' '(' AExpr ',' AExpr ')' { AbsRawPVSLang.Mod $3 $5 }
       | 'ln' '(' AExpr ')' { AbsRawPVSLang.Ln $3 }
       | 'exp' '(' AExpr ')' { AbsRawPVSLang.Exp $3 }
AExpr5 :: { AExpr }
AExpr5 : AExpr6 { $1 }
       | 'StoR' '(' FAExpr ')' { AbsRawPVSLang.StoR $3 }
       | 'DtoR' '(' FAExpr ')' { AbsRawPVSLang.DtoR $3 }
AExpr6 :: { AExpr }
AExpr6 : AExpr7 { $1 }
       | 'pi' { AbsRawPVSLang.Pi1 }
       | 'PI' { AbsRawPVSLang.Pi2 }
       | Integer { AbsRawPVSLang.Int $1 }
       | Double { AbsRawPVSLang.Rat $1 }
AExpr7 :: { AExpr }
AExpr7 : '(' AExpr ')' { $2 }
ListFAExpr :: { [FAExpr] }
ListFAExpr : FAExpr { (:[]) $1 }
           | FAExpr ',' ListFAExpr { (:) $1 $3 }
FAExpr :: { FAExpr }
FAExpr : FAExpr1 { $1 }
       | 'Sadd' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.SAdd $3 $5 }
       | 'Dadd' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.DAdd $3 $5 }
       | 'Iadd' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.IAdd $3 $5 }
       | 'Ssub' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.SSub $3 $5 }
       | 'Dsub' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.DSub $3 $5 }
       | 'Isub' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.ISub $3 $5 }
       | 'Smul' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.SMul $3 $5 }
       | 'Dmul' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.DMul $3 $5 }
       | 'Imul' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.IMul $3 $5 }
       | 'Sdiv' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.SDiv $3 $5 }
       | 'Ddiv' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.DDiv $3 $5 }
       | 'Idiv' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.IDiv $3 $5 }
       | 'Sneg' '(' FAExpr ')' { AbsRawPVSLang.SNeg $3 }
       | 'Dneg' '(' FAExpr ')' { AbsRawPVSLang.DNeg $3 }
       | 'Ineg' '(' FAExpr ')' { AbsRawPVSLang.INeg $3 }
       | 'Sfloor' '(' FAExpr ')' { AbsRawPVSLang.SFloor $3 }
       | 'Dfloor' '(' FAExpr ')' { AbsRawPVSLang.DFloor $3 }
       | 'Ssqrt' '(' FAExpr ')' { AbsRawPVSLang.SSqrt $3 }
       | 'Dsqrt' '(' FAExpr ')' { AbsRawPVSLang.DSqrt $3 }
       | 'Sabs' '(' FAExpr ')' { AbsRawPVSLang.SAbs $3 }
       | 'Dabs' '(' FAExpr ')' { AbsRawPVSLang.DAbs $3 }
       | 'Iabs' '(' FAExpr ')' { AbsRawPVSLang.IAbs $3 }
       | 'Ssin' '(' FAExpr ')' { AbsRawPVSLang.SSin $3 }
       | 'Dsin' '(' FAExpr ')' { AbsRawPVSLang.DSin $3 }
       | 'Scos' '(' FAExpr ')' { AbsRawPVSLang.SCos $3 }
       | 'Dcos' '(' FAExpr ')' { AbsRawPVSLang.DCos $3 }
       | 'Stan' '(' FAExpr ')' { AbsRawPVSLang.STan $3 }
       | 'Dtan' '(' FAExpr ')' { AbsRawPVSLang.DTan $3 }
       | 'Sacos' '(' FAExpr ')' { AbsRawPVSLang.SAcos $3 }
       | 'Dacos' '(' FAExpr ')' { AbsRawPVSLang.DAcos $3 }
       | 'Sasin' '(' FAExpr ')' { AbsRawPVSLang.SAsin $3 }
       | 'Dasin' '(' FAExpr ')' { AbsRawPVSLang.DAsin $3 }
       | 'Satan' '(' FAExpr ')' { AbsRawPVSLang.SAtan $3 }
       | 'Datan' '(' FAExpr ')' { AbsRawPVSLang.DAtan $3 }
       | 'Smod' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.SMod $3 $5 }
       | 'Dmod' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.DMod $3 $5 }
       | 'Imod' '(' FAExpr ',' FAExpr ')' { AbsRawPVSLang.IMod $3 $5 }
       | 'Sln' '(' FAExpr ')' { AbsRawPVSLang.SLn $3 }
       | 'Dln' '(' FAExpr ')' { AbsRawPVSLang.DLn $3 }
       | 'Sexp' '(' FAExpr ')' { AbsRawPVSLang.SExp $3 }
       | 'Dexp' '(' FAExpr ')' { AbsRawPVSLang.DExp $3 }
FAExpr1 :: { FAExpr }
FAExpr1 : FAExpr2 { $1 }
        | FAExpr3 '^' FAExpr2 { AbsRawPVSLang.FPow $1 $3 }
FAExpr2 :: { FAExpr }
FAExpr2 : FAExpr3 { $1 } | '-' FAExpr4 { AbsRawPVSLang.FNegN $2 }
FAExpr3 :: { FAExpr }
FAExpr3 : FAExpr4 { $1 }
        | NonVarId '(' ListFAExpr ')' { AbsRawPVSLang.FCallN $1 $3 }
        | NonVarId { AbsRawPVSLang.FCall0 $1 }
FAExpr4 :: { FAExpr }
FAExpr4 : FAExpr5 { $1 }
        | 'RtoS' '(' AExpr ')' { AbsRawPVSLang.RtoS $3 }
        | 'RtoD' '(' AExpr ')' { AbsRawPVSLang.RtoD $3 }
        | 'ItoS' '(' FAExpr ')' { AbsRawPVSLang.ItoS $3 }
        | 'ItoD' '(' FAExpr ')' { AbsRawPVSLang.ItoD $3 }
FAExpr5 :: { FAExpr }
FAExpr5 : FAExpr6 { $1 }
        | Integer { AbsRawPVSLang.FInt $1 }
        | VarId { AbsRawPVSLang.Var $1 }
FAExpr6 :: { FAExpr }
FAExpr6 : '(' FAExpr ')' { $2 }
FBExpr :: { FBExpr }
FBExpr : FBExpr1 { $1 }
       | FBExpr 'OR' FBExpr1 { AbsRawPVSLang.FOr $1 $3 }
FBExpr1 :: { FBExpr }
FBExpr1 : FBExpr2 { $1 }
        | FBExpr1 'AND' FBExpr2 { AbsRawPVSLang.FAnd $1 $3 }
FBExpr2 :: { FBExpr }
FBExpr2 : FBExpr3 { $1 } | 'NOT' FBExpr3 { AbsRawPVSLang.FNot $2 }
FBExpr3 :: { FBExpr }
FBExpr3 : FBExpr4 { $1 }
        | FAExpr '=' FAExpr { AbsRawPVSLang.FEq $1 $3 }
        | FAExpr '/=' FAExpr { AbsRawPVSLang.FNeq $1 $3 }
        | FAExpr '<' FAExpr { AbsRawPVSLang.FLt $1 $3 }
        | FAExpr '<=' FAExpr { AbsRawPVSLang.FLtE $1 $3 }
        | FAExpr '>' FAExpr { AbsRawPVSLang.FGt $1 $3 }
        | FAExpr '>=' FAExpr { AbsRawPVSLang.FGtE $1 $3 }
FBExpr4 :: { FBExpr }
FBExpr4 : FBExpr5 { $1 }
        | 'TRUE' { AbsRawPVSLang.FBTrue }
        | 'FALSE' { AbsRawPVSLang.FBFalse }
FBExpr5 :: { FBExpr }
FBExpr5 : '(' FBExpr ')' { $2 }
BExpr :: { BExpr }
BExpr : BExpr1 { $1 }
      | BExpr 'OR' BExpr1 { AbsRawPVSLang.Or $1 $3 }
BExpr1 :: { BExpr }
BExpr1 : BExpr2 { $1 }
       | BExpr1 'AND' BExpr2 { AbsRawPVSLang.And $1 $3 }
BExpr2 :: { BExpr }
BExpr2 : BExpr3 { $1 } | 'NOT' BExpr3 { AbsRawPVSLang.Not $2 }
BExpr3 :: { BExpr }
BExpr3 : BExpr4 { $1 }
       | AExpr '=' AExpr { AbsRawPVSLang.Eq $1 $3 }
       | AExpr '/=' AExpr { AbsRawPVSLang.Neq $1 $3 }
       | AExpr '<' AExpr { AbsRawPVSLang.Lt $1 $3 }
       | AExpr '<=' AExpr { AbsRawPVSLang.LtE $1 $3 }
       | AExpr '>' AExpr { AbsRawPVSLang.Gt $1 $3 }
       | AExpr '>=' AExpr { AbsRawPVSLang.GtE $1 $3 }
BExpr4 :: { BExpr }
BExpr4 : BExpr5 { $1 }
       | 'TRUE' { AbsRawPVSLang.BTrue }
       | 'FALSE' { AbsRawPVSLang.BFalse }
BExpr5 :: { BExpr }
BExpr5 : '(' BExpr ')' { $2 }
FPtype :: { FPtype }
FPtype : 'int' { AbsRawPVSLang.TypeInt }
       | 'integer' { AbsRawPVSLang.TypeInteger }
       | 'unb_single' { AbsRawPVSLang.UnbSingle }
       | 'unb_double' { AbsRawPVSLang.UnbDouble }
       | 'unb_pos_single' { AbsRawPVSLang.UnbPosSingle }
       | 'unb_pos_double' { AbsRawPVSLang.UnbPosDouble }
       | 'unb_nz_single' { AbsRawPVSLang.UnbNzSingle }
       | 'unb_nz_double' { AbsRawPVSLang.UnbNzDouble }
Subrange :: { Subrange }
Subrange : 'subrange' '(' Integer ',' Integer ')' { AbsRawPVSLang.SubrageType $3 $5 }
ListArg :: { [Arg] }
ListArg : Arg { (:[]) $1 } | Arg ',' ListArg { (:) $1 $3 }
Arg :: { Arg }
Arg : ListVarId ':' FPtype { AbsRawPVSLang.FArg $1 $3 }
    | ListVarId ':' Subrange { AbsRawPVSLang.FArgSubrange $1 $3 }
    | ListVarId ':' FPtype '|' BExpr { AbsRawPVSLang.FArgGuard $1 $3 $5 }
    | VarId { AbsRawPVSLang.FArgNoType $1 }
Args :: { Args }
Args : ListArg { AbsRawPVSLang.FArgs $1 }
ListVarId :: { [VarId] }
ListVarId : VarId { (:[]) $1 } | VarId ',' ListVarId { (:) $1 $3 }
ElsIf :: { ElsIf }
ElsIf : 'ELSIF' FBExpr 'THEN' Stm { AbsRawPVSLang.ElsIf $2 $4 }
ListElsIf :: { [ElsIf] }
ListElsIf : ElsIf { (:[]) $1 } | ElsIf ListElsIf { (:) $1 $2 }
Stm :: { Stm }
Stm : Stm1 { $1 }
    | 'LET' VarId ':' FPtype '=' FAExpr 'IN' Stm { AbsRawPVSLang.LetWithType $2 $4 $6 $8 }
    | 'LET' VarId '=' FAExpr 'IN' Stm { AbsRawPVSLang.Let $2 $4 $6 }
Stm1 :: { Stm }
Stm1 : Stm2 { $1 }
     | 'IF' FBExpr 'THEN' Stm 'ELSE' Stm 'ENDIF' { AbsRawPVSLang.If $2 $4 $6 }
Stm2 :: { Stm }
Stm2 : Stm3 { $1 }
     | 'IF' FBExpr 'THEN' Stm ListElsIf 'ELSE' Stm 'ENDIF' { AbsRawPVSLang.ListIf $2 $4 $5 $7 }
Stm3 :: { Stm }
Stm3 : Stm4 { $1 }
     | 'for' '(' Integer ',' Integer ',' FAExpr ',' NonVarId ')' { AbsRawPVSLang.For $3 $5 $7 $9 }
Stm4 :: { Stm }
Stm4 : Stm5 { $1 } | FAExpr { AbsRawPVSLang.Expr $1 }
Stm5 :: { Stm }
Stm5 : '(' Stm ')' { $2 } | 'warning' { AbsRawPVSLang.UnstWarning }
ListDecl :: { [Decl] }
ListDecl : Decl { (:[]) $1 } | Decl ListDecl { (:) $1 $2 }
Decl :: { Decl }
Decl : NonVarId '(' Args ')' ':' FPtype '=' Stm { AbsRawPVSLang.DeclN $1 $3 $6 $8 }
     | NonVarId ':' FPtype '=' Stm { AbsRawPVSLang.Decl0 $1 $3 $5 }
ListNonVarId :: { [NonVarId] }
ListNonVarId : NonVarId { (:[]) $1 }
             | NonVarId ',' ListNonVarId { (:) $1 $3 }
Imp :: { Imp }
Imp : 'IMPORTING' ListNonVarId { AbsRawPVSLang.LibImp $2 }
VarDecl :: { VarDecl }
VarDecl : VarId ':' 'VAR' FPtype { AbsRawPVSLang.VarDeclaration $1 $4 }
ListVarDecl :: { [VarDecl] }
ListVarDecl : {- empty -} { [] }
            | ListVarDecl VarDecl { flip (:) $1 $2 }
Program :: { Program }
Program : NonVarId ':' 'THEORY' 'BEGIN' Imp ListVarDecl ListDecl 'END' NonVarId { AbsRawPVSLang.Prog $1 $5 (reverse $6) $7 $9 }
        | NonVarId ':' 'THEORY' 'BEGIN' ListVarDecl ListDecl 'END' NonVarId { AbsRawPVSLang.ProgImp $1 (reverse $5) $6 $8 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

