entrypoints Program;comment "%" ;token VarId       ( (upper) (letter | digit | '_' | '?')* ) ;token NonVarId    ( (lower) (letter | digit | '_' | '?' | '@')* ) ;{- Arithmetic Expressions -}coercions   AExpr 7 ;Add.        AExpr ::= AExpr "+" AExpr1 ;Sub.        AExpr ::= AExpr "-" AExpr1 ;Mul.        AExpr1 ::= AExpr1 "*" AExpr2 ;Div.        AExpr1 ::= AExpr1 "/" AExpr2 ;Pow.        AExpr2 ::= AExpr3 "^" AExpr2 ;Neg.        AExpr3 ::= "-" AExpr4 ;Floor.	    AExpr4 ::= "floor"  "(" AExpr ")" ;Sqrt.	    AExpr4 ::= "sqrt"   "(" AExpr ")" ;Abs.        AExpr4 ::= "abs"    "(" AExpr ")" ;Sin.        AExpr4 ::= "sin"    "(" AExpr ")" ;Cos.        AExpr4 ::= "cos"    "(" AExpr ")" ; Tan.        AExpr4 ::= "tan"    "(" AExpr ")" ; ASin.       AExpr4 ::= "asin"   "(" AExpr ")" ;ACos.       AExpr4 ::= "acos"   "(" AExpr ")" ;ATan.       AExpr4 ::= "atan"   "(" AExpr ")" ;Mod.        AExpr4 ::= "mod"    "(" AExpr "," AExpr ")" ;Ln.         AExpr4 ::= "ln"     "(" AExpr ")" ;Exp.        AExpr4 ::= "exp"    "(" AExpr ")" ;StoR.       AExpr5 ::= "StoR" "(" FAExpr ")" ;DtoR.       AExpr5 ::= "DtoR" "(" FAExpr ")" ;Pi1.        AExpr6 ::= "pi" ;Pi2.        AExpr6 ::= "PI" ;Int.        AExpr6 ::= Integer ;Rat.        AExpr6 ::= Double ;{- FP Arithmetic Expressions -}separator nonempty FAExpr "," ;coercions   FAExpr 6 ;SAdd.        FAExpr ::= "Sadd"    "(" FAExpr "," FAExpr ")" ;DAdd.        FAExpr ::= "Dadd"    "(" FAExpr "," FAExpr ")" ;IAdd.        FAExpr ::= "Iadd"    "(" FAExpr "," FAExpr ")" ;SSub.        FAExpr ::= "Ssub"    "(" FAExpr "," FAExpr ")" ;DSub.        FAExpr ::= "Dsub"    "(" FAExpr "," FAExpr ")" ;ISub.        FAExpr ::= "Isub"    "(" FAExpr "," FAExpr ")" ;SMul.        FAExpr ::= "Smul"    "(" FAExpr "," FAExpr ")" ;DMul.        FAExpr ::= "Dmul"    "(" FAExpr "," FAExpr ")" ;IMul.        FAExpr ::= "Imul"    "(" FAExpr "," FAExpr ")" ;SDiv.        FAExpr ::= "Sdiv"    "(" FAExpr "," FAExpr ")" ;DDiv.        FAExpr ::= "Ddiv"    "(" FAExpr "," FAExpr ")" ;IDiv.        FAExpr ::= "Idiv"    "(" FAExpr "," FAExpr ")" ;SNeg.        FAExpr ::= "Sneg"    "(" FAExpr ")" ;DNeg.        FAExpr ::= "Dneg"    "(" FAExpr ")" ;INeg.        FAExpr ::= "Ineg"    "(" FAExpr ")" ;SFloor.	     FAExpr ::= "Sfloor"  "(" FAExpr ")" ;DFloor.	     FAExpr ::= "Dfloor"  "(" FAExpr ")" ;SSqrt.	     FAExpr ::= "Ssqrt"   "(" FAExpr ")" ;DSqrt.	     FAExpr ::= "Dsqrt"   "(" FAExpr ")" ;SAbs.        FAExpr ::= "Sabs"    "(" FAExpr ")" ;DAbs.        FAExpr ::= "Dabs"    "(" FAExpr ")" ;IAbs.        FAExpr ::= "Iabs"    "(" FAExpr ")" ;SSin.        FAExpr ::= "Ssin"    "(" FAExpr ")" ;DSin.        FAExpr ::= "Dsin"    "(" FAExpr ")" ;SCos.        FAExpr ::= "Scos"    "(" FAExpr ")" ; DCos.        FAExpr ::= "Dcos"    "(" FAExpr ")" ;STan.        FAExpr ::= "Stan"    "(" FAExpr ")" ; DTan.        FAExpr ::= "Dtan"    "(" FAExpr ")" ; SAcos.       FAExpr ::= "Sacos"   "(" FAExpr ")" ;DAcos.       FAExpr ::= "Dacos"   "(" FAExpr ")" ;SAsin.       FAExpr ::= "Sasin"   "(" FAExpr ")" ;DAsin.       FAExpr ::= "Dasin"   "(" FAExpr ")" ;SAtan.       FAExpr ::= "Satan"   "(" FAExpr ")" ;DAtan.       FAExpr ::= "Datan"   "(" FAExpr ")" ;SMod.        FAExpr ::= "Smod"    "(" FAExpr "," FAExpr ")" ;DMod.        FAExpr ::= "Dmod"    "(" FAExpr "," FAExpr ")" ;IMod.        FAExpr ::= "Imod"    "(" FAExpr "," FAExpr ")" ;SLn.         FAExpr ::= "Sln"    "(" FAExpr ")" ;DLn.         FAExpr ::= "Dln"    "(" FAExpr ")" ;SExp.        FAExpr ::= "Sexp"    "(" FAExpr ")" ;DExp.        FAExpr ::= "Dexp"    "(" FAExpr ")" ;FPow.        FAExpr1 ::= FAExpr3 "^" FAExpr2 ;FNegN.       FAExpr2 ::= "-" FAExpr4 ;FCallN.      FAExpr3 ::= NonVarId "(" [FAExpr] ")" ;FCall0.      FAExpr3 ::= NonVarId ;RtoS.        FAExpr4 ::= "RtoS" "(" AExpr ")" ;RtoD.        FAExpr4 ::= "RtoD" "(" AExpr ")" ;ItoS.        FAExpr4 ::= "ItoS" "(" FAExpr ")" ;ItoD.        FAExpr4 ::= "ItoD" "(" FAExpr ")" ;FInt.        FAExpr5 ::= Integer ;Var.         FAExpr5 ::= VarId ;{- Boolean Expression (on FP expressions) -}coercions   FBExpr 5 ;FOr.         FBExpr ::= FBExpr "OR" FBExpr1 ;FAnd.        FBExpr1 ::= FBExpr1 "AND" FBExpr2 ;FNot.        FBExpr2 ::= "NOT" FBExpr3 ;FEq.         FBExpr3 ::= FAExpr "="  FAExpr ;FNeq.        FBExpr3 ::= FAExpr "/=" FAExpr ;FLt.         FBExpr3 ::= FAExpr "<"  FAExpr ;FLtE.        FBExpr3 ::= FAExpr "<=" FAExpr ;FGt.         FBExpr3 ::= FAExpr ">"  FAExpr ;FGtE.        FBExpr3 ::= FAExpr ">=" FAExpr ;FBTrue.      FBExpr4 ::= "TRUE" ;FBFalse.     FBExpr4 ::= "FALSE" ;{- Boolean Expression (on FP expressions) -}coercions   BExpr 5 ;Or.         BExpr ::= BExpr "OR" BExpr1 ;And.        BExpr1 ::= BExpr1 "AND" BExpr2 ;Not.        BExpr2 ::= "NOT" BExpr3 ;Eq.         BExpr3 ::= AExpr "="  AExpr ;Neq.        BExpr3 ::= AExpr "/=" AExpr ;Lt.         BExpr3 ::= AExpr "<"  AExpr ;LtE.        BExpr3 ::= AExpr "<=" AExpr ;Gt.         BExpr3 ::= AExpr ">"  AExpr ;GtE.        BExpr3 ::= AExpr ">=" AExpr ;BTrue.      BExpr4 ::= "TRUE" ;BFalse.     BExpr4 ::= "FALSE" ;{- PVS Program -}TypeInt.       FPtype ::= "int" ;TypeInteger.   FPtype ::= "integer" ;UnbSingle.     FPtype ::= "unb_single" ;UnbDouble.     FPtype ::= "unb_double" ;UnbPosSingle.  FPtype ::= "unb_pos_single" ;UnbPosDouble.  FPtype ::= "unb_pos_double" ;UnbNzSingle.   FPtype ::= "unb_nz_single" ;UnbNzDouble.   FPtype ::= "unb_nz_double" ;SubrageType.   Subrange ::= "subrange" "(" Integer "," Integer ")" ;separator nonempty Arg "," ;FArg.         Arg ::= [VarId] ":" FPtype ;FArgSubrange. Arg ::= [VarId] ":" Subrange ;FArgGuard.    Arg ::= [VarId] ":" FPtype "|" BExpr  ;FArgNoType.   Arg ::= VarId ;FArgs. Args ::= [Arg] ;{- FLambda. ForLambda ::= "LAMBDA" "(" VarId ":" "subrange" "(" Integer "," Integer ")" "," VarId ":" FPtype ")" ":" NonVarId "(" VarId "," VarId ")" ; -}separator nonempty VarId "," ;ElsIf.      ElsIf ::= "ELSIF" FBExpr "THEN" Stm ;separator nonempty ElsIf "" ;coercions   Stm 5 ;LetWithType. Stm  ::= "LET" VarId ":" FPtype "=" FAExpr "IN" Stm ;Let.         Stm  ::= "LET" VarId "=" FAExpr "IN" Stm ;If.          Stm1 ::= "IF" FBExpr "THEN" Stm "ELSE" Stm "ENDIF" ;ListIf.      Stm2 ::= "IF" FBExpr "THEN" Stm [ElsIf] "ELSE" Stm "ENDIF" ;For.         Stm3 ::= "for" "(" Integer "," Integer "," FAExpr "," NonVarId ")";Expr.        Stm4 ::= FAExpr ;UnstWarning. Stm5 ::= "warning" ;separator nonempty Decl "" ;DeclN.    Decl ::= NonVarId "(" Args ")" ":" FPtype "=" Stm ;Decl0.    Decl ::= NonVarId ":" FPtype "=" Stm  ;separator nonempty NonVarId "," ;LibImp.   Imp ::= "IMPORTING" [NonVarId] ;VarDeclaration. VarDecl ::= VarId ":" "VAR" FPtype ;separator VarDecl "" ;Prog.    Program ::= NonVarId ":" "THEORY" "BEGIN" Imp [VarDecl] [Decl] "END" NonVarId ; ProgImp. Program ::= NonVarId ":" "THEORY" "BEGIN" [VarDecl] [Decl] "END" NonVarId;