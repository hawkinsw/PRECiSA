-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParSpecLang where
import AbsSpecLang
import LexSpecLang
import ErrM

}

%name pSpec Spec
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '+inf' { PT _ (TS _ 3) }
  ',' { PT _ (TS _ 4) }
  '-' { PT _ (TS _ 5) }
  '-inf' { PT _ (TS _ 6) }
  ':' { PT _ (TS _ 7) }
  '[' { PT _ (TS _ 8) }
  ']' { PT _ (TS _ 9) }
  'in' { PT _ (TS _ 10) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_VarId { PT _ (T_VarId $$) }
L_NonVarId { PT _ (T_NonVarId $$) }


%%
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Rational }  : L_doubl  { (fst . head $ readFloat ($1)) :: Rational }

VarId    :: { VarId} : L_VarId { VarId ($1)}
NonVarId    :: { NonVarId} : L_NonVarId { NonVarId ($1)}

LBound :: { LBound }
LBound : Integer { LBInt $1 }
       | Double { LBDouble $1 }
       | '-' Integer { LBInt (-$2) }
       | '-' Double { LBDouble (-$2) }
       | '-inf' { LInf }

UBound :: { UBound }
UBound : Integer { UBInt $1 }
       | Double { UBDouble $1 }
       | '-' Integer { UBInt (-$2) }
       | '-' Double { UBDouble (-$2) }
       | '+inf' { UInf }

ListVarBind :: { [VarBind] }
ListVarBind : VarBind { (:[]) $1 }
            | VarBind ',' ListVarBind { (:) $1 $3 }

VarBind :: { VarBind }
VarBind : VarId 'in' '[' LBound ',' UBound ']' { makeVarBind $1 $4 $6 }

ListVarId :: { [VarId] }
ListVarId : VarId { (:[]) $1 } | VarId ',' ListVarId { (:) $1 $3 }

SpecBind :: { SpecBind }
SpecBind : NonVarId '(' ListVarId ')' ':' ListVarBind { makeSpecBind $1 $3 $6 }
         | NonVarId ':' ListVarBind { makeSpecBind $1 [] $3 }

ListSpecBind :: { [SpecBind] }
ListSpecBind : SpecBind { (:[]) $1 }
             | SpecBind ListSpecBind { (:) $1 $2 }

Spec :: { Spec }
Spec : ListSpecBind { Spec $1 }

{
rawparserSpec :: String -> Err Spec
rawparserSpec = pSpec . tokens

makeVarBind :: VarId -> LBound -> UBound -> VarBind
makeVarBind (VarId x) lb ub = VarBind x lb ub

makeSpecBind :: NonVarId -> [VarId] -> [VarBind] -> SpecBind
makeSpecBind (NonVarId f) vs vbs = SpecBind f vs vbs


returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad id $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

