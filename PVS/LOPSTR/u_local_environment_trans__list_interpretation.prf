(u_local_environment_trans__list_interpretation
 (t1ToT2_fpvar_rvar 0
  (t1ToT2_fpvar_rvar-1 nil 3755877208 ("" (judgement-tcc) nil nil) nil
   nil))
 (t1ToT2_var_index_id_TCC1 0
  (t1ToT2_var_index_id_TCC1-1 nil 3755877481
   ("" (use "t1ToT2_fpvar_rvar") nil nil)
   ((t1ToT2_fpvar_rvar formula-decl nil
     u_local_environment_trans__list_interpretation nil))
   nil))
 (translatedFrom?_TCC1 0
  (translatedFrom?_TCC1-1 nil 3755874297 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< formal-const-decl "(strict_well_founded?[T1])"
     u_local_environment_trans__list_interpretation nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (index1 formal-const-decl "[(variable?1) -> nat]"
     u_local_environment_trans__list_interpretation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (variable?1 formal-const-decl "PRED[T1]"
     u_local_environment_trans__list_interpretation nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T1 formal-nonempty-type-decl nil
     u_local_environment_trans__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (<< formal-const-decl "(strict_well_founded?[T2])"
     u_local_environment_trans__list_interpretation nil)
    (index2 formal-const-decl "[(variable?2) -> nat]"
     u_local_environment_trans__list_interpretation nil)
    (variable?2 formal-const-decl "PRED[T2]"
     u_local_environment_trans__list_interpretation nil)
    (T2 formal-nonempty-type-decl nil
     u_local_environment_trans__list_interpretation nil))
   nil))
 (translate_TCC1 0
  (translate_TCC1-1 nil 3755874297
   ("" (skeep :preds? t)
    (("" (split 1)
      (("1" (skeep :preds? t)
        (("1" (rewrite "map_length")
          (("1" (inst -2 "i")
            (("1" (expand "bounded_by?")
              (("1" (skeep :preds? t)
                (("1" (split -2)
                  (("1" (expand "get")
                    (("1" (rewrite "map_nth_rw")
                      (("1" (expand "size")
                        (("1"
                          (case "length(shrink(map(t1ToT2)(fle),i)) = length(shrink(fle,i))")
                          (("1" (replace -1 :hide? t)
                            (("1" (inst -4 "nth(fle,i)")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (rewrite "t1ToT2_var_index_id")
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (expand "get")
                                (("2"
                                  (rewrite "t1ToT2_rvar_fpvar")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (expand "shrink")
                              (("2"
                                (rewrite "takeFromRight_length")
                                (("1"
                                  (rewrite "takeFromRight_length")
                                  (("1"
                                    (rewrite "map_length")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2"
                                    (rewrite "map_length")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (expand "size")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "t1ToT2_var")
                    (("2" (expand "get")
                      (("2" (rewrite "map_nth_rw")
                        (("2" (inst -1 "nth(fle,i)")
                          (("2" (assert)
                            (("2" (skeep -1)
                              (("2"
                                (inst -6 "local")
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (expand "size")
                                    (("1"
                                      (case
                                       "length(shrink(map(t1ToT2)(fle),i)) = length(shrink(fle,i))")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (rewrite
                                           "t1ToT2_var_index_id")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand "shrink")
                                          (("2"
                                            (rewrite
                                             "takeFromRight_length")
                                            (("2"
                                              (rewrite
                                               "takeFromRight_length")
                                              (("2"
                                                (rewrite "map_length")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "get")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "size") (("2" (rewrite "map_length") nil nil)) nil)
       ("3" (skeep :preds? t)
        (("3" (expand "get") (("3" (rewrite "map_nth_rw") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((map_length formula-decl nil more_map_props nil)
    (t1ToT2 formal-const-decl "[T1 -> T2]"
     u_local_environment_trans__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (variable?1 formal-const-decl "PRED[T1]"
     u_local_environment_trans__list_interpretation nil)
    (index1 formal-const-decl "[(variable?1) -> nat]"
     u_local_environment_trans__list_interpretation nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< formal-const-decl "(strict_well_founded?[T1])"
     u_local_environment_trans__list_interpretation nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (T1 formal-nonempty-type-decl nil
     u_local_environment_trans__list_interpretation nil)
    (T2 formal-nonempty-type-decl nil
     u_local_environment_trans__list_interpretation nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (variable?2 formal-const-decl "PRED[T2]"
     u_local_environment_trans__list_interpretation nil)
    (index2 formal-const-decl "[(variable?2) -> nat]"
     u_local_environment_trans__list_interpretation nil)
    (<< formal-const-decl "(strict_well_founded?[T2])"
     u_local_environment_trans__list_interpretation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (t1ToT2_var_index_id formula-decl nil
     u_local_environment_trans__list_interpretation nil)
    (t1ToT2_rvar_fpvar formula-decl nil
     u_local_environment_trans__list_interpretation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (takeFromRight_length formula-decl nil more_list_props
     "structures/")
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (local skolem-const-decl "(variable?1)"
     u_local_environment_trans__list_interpretation nil)
    (t1ToT2_var formula-decl nil
     u_local_environment_trans__list_interpretation nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (fle skolem-const-decl
     "ule1[T1, variable?1, index1, <<].LocalEnvironment"
     u_local_environment_trans__list_interpretation nil)
    (i skolem-const-decl "below(length[T2](map(t1ToT2)(fle)))"
     u_local_environment_trans__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "T" u_local_environment__list_interpretation nil))
   nil)))

