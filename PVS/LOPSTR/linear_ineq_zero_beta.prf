(linear_ineq_zero_beta
 (IMP_expressions_semantics_TCC1 0
  (IMP_expressions_semantics_TCC1-1 nil 3756750709
   ("" (use "lt_fp_lt_r") nil nil)
   ((lt_fp_lt_r formula-decl nil linear_ineq_zero_beta nil)) nil))
 (triangular_lemma_1 0
  (triangular_lemma_1-1 nil 3756729233
   ("" (skeep)
    (("" (case "le_r(zero_r,c)")
      (("1" (assert)
        (("1" (hide -1)
          (("1" (rewrite "abs_def")
            (("1" (lift-if -1)
              (("1" (split -1)
                (("1" (flatten)
                  (("1" (lemma "subtraction_le_r")
                    (("1" (inst -1 "a" "b" "c")
                      (("1" (assert)
                        (("1" (use "lt_subtraction_r")
                          (("1" (assert)
                            (("1" (rewrite "le_r_def" -2)
                              (("1"
                                (case "transitive?(lt_r)")
                                (("1"
                                  (expand "transitive?")
                                  (("1"
                                    (inst? -1 :where 1)
                                    (("1"
                                      (inst? -1 :where -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred "lt_r")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (case "lt_r(minus(a, b),zero_r)")
                    (("1" (lemma "subtraction_lt_r")
                      (("1" (inst -1 "a" "b")
                        (("1" (assert)
                          (("1" (rewrite "lt_subtraction_r" :dir rl)
                            (("1" (case "lt_r(zero_r,a)")
                              (("1"
                                (case "transitive?(lt_r)")
                                (("1"
                                  (expand "transitive?")
                                  (("1"
                                    (inst? -1 :where 2)
                                    (("1"
                                      (inst? -1 :where -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred "lt_r")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "le_r(zero_r,c)")
                                (("1"
                                  (rewrite "le_r_def" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "transitive?(lt_r)")
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (inst? -1 :where -2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (typepred "lt_r")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "abs_le_zero_r")
        (("2" (case "transitive?(le_r)")
          (("1" (expand "transitive?")
            (("1" (inst? -1 :where 1)
              (("1" (inst? -1 :where -2) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (use "le_r_total_order") (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_r formal-const-decl "RealNumber" linear_ineq_zero_beta nil)
    (le_r const-decl "bool" le_r nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (le const-decl "bool" le "orders/")
    (subtraction_lt_r formula-decl nil linear_ineq_zero_beta nil)
    (lt_subtraction_r formula-decl nil linear_ineq_zero_beta nil)
    (le_r_def formula-decl nil le_r nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (subtraction_le_r formula-decl nil linear_ineq_zero_beta nil)
    (abs_def formula-decl nil linear_ineq_zero_beta nil)
    (minus formal-const-decl "[RealNumber, RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (abs formal-const-decl "[RealNumber -> RealNumber]"
         linear_ineq_zero_beta nil)
    (le_r_total_order formula-decl nil le_r nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (total_order? const-decl "bool" orders nil)
    (abs_le_zero_r formula-decl nil linear_ineq_zero_beta nil))
   shostak))
 (triangular_lemma_2 0
  (triangular_lemma_2-1 nil 3756732755
   ("" (skeep)
    (("" (rewrite "abs_def")
      (("" (lift-if -1)
        (("" (split -1)
          (("1" (flatten)
            (("1" (assert)
              (("1" (lemma "subtraction_le_r")
                (("1" (inst -1 "a" "b" "c")
                  (("1" (assert)
                    (("1" (use "subtraction_le_isolate_2_r")
                      (("1" (assert)
                        (("1" (rewrite "subtraction_le_zero_r" :dir rl)
                          (("1" (assert)
                            (("1" (case "le_r(Ropp(c),zero_r)")
                              (("1"
                                (case "lt_r(zero_r,a)")
                                (("1"
                                  (rewrite "le_r_def" -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "transitive?(lt_r)")
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (inst? -1 :where -2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (typepred "lt_r")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "le_r_def" -4)
                                  (("2"
                                    (split -4)
                                    (("1"
                                      (rewrite "subtraction_eq_zero_r")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (rewrite "lt_subtractionp_ltz_r")
                                      (("2"
                                        (case "transitive?(lt_r)")
                                        (("1"
                                          (expand "transitive?")
                                          (("1"
                                            (inst? -1 :where 1)
                                            (("1"
                                              (inst? -1 :where -2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (typepred "lt_r")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "transitive?(le_r)")
                                (("1"
                                  (expand "transitive?")
                                  (("1"
                                    (inst? -1 :where 1)
                                    (("1"
                                      (inst? -1 :where -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (use "le_r_total_order")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (case "le_r(minus(b,c),a)")
              (("1" (case "lt_r(Ropp(c),minus(b,c))")
                (("1" (rewrite "le_r_def" -2)
                  (("1" (assert)
                    (("1" (case "transitive?(lt_r)")
                      (("1" (expand "transitive?")
                        (("1" (inst? -1 :where 2)
                          (("1" (inst? -1 :where -2)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred "lt_r") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (rewrite "substraction_both_sides_zero_lt_x" :dir rl)
                  nil nil))
                nil)
               ("2" (rewrite "ropp_subtraction")
                (("2" (rewrite "subtraction_le_r") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_def formula-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (minus formal-const-decl "[RealNumber, RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (subtraction_le_isolate_2_r formula-decl nil linear_ineq_zero_beta
     nil)
    (subtraction_le_zero_r formula-decl nil linear_ineq_zero_beta nil)
    (zero_r formal-const-decl "RealNumber" linear_ineq_zero_beta nil)
    (Ropp formal-const-decl "[RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (le_r const-decl "bool" le_r nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lt_subtractionp_ltz_r formula-decl nil linear_ineq_zero_beta nil)
    (subtraction_eq_zero_r formula-decl nil linear_ineq_zero_beta nil)
    (le_r_def formula-decl nil le_r nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (le const-decl "bool" le "orders/")
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (total_order? const-decl "bool" orders nil)
    (le_r_total_order formula-decl nil le_r nil)
    (subtraction_le_r formula-decl nil linear_ineq_zero_beta nil)
    (substraction_both_sides_zero_lt_x formula-decl nil
     linear_ineq_zero_beta nil)
    (ropp_subtraction formula-decl nil linear_ineq_zero_beta nil))
   shostak))
 (triangular_lemma_3 0
  (triangular_lemma_3-1 nil 3756747661
   ("" (skeep)
    (("" (case "le_r(zero_r,minus(a,b))")
      (("1" (case "lt_r(b,Ropp(c))")
        (("1" (case "le_r(Ropp(c),zero_r)")
          (("1" (hide-all-but (1 -1 -2))
            (("1" (rewrite "le_r_def" -1)
              (("1" (assert)
                (("1" (case "transitive?(lt_r)")
                  (("1" (expand "transitive?")
                    (("1" (inst? -1 :where 1)
                      (("1" (inst? -1 :where -3)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred "lt_r") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "ropp_le_r")
            (("2" (rewrite "ropp_ropp_idemp")
              (("2" (rewrite "ropp_id")
                (("2" (use "abs_le_zero_r")
                  (("2" (case "transitive?(le_r)")
                    (("1" (expand "transitive?")
                      (("1" (inst? -1 :where 1)
                        (("1" (inst? -1 :where -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (use "le_r_total_order")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "le_r(b,a)")
          (("1" (rewrite "le_r_def" -1)
            (("1" (assert)
              (("1" (case "transitive?(lt_r)")
                (("1" (expand "transitive?")
                  (("1" (inst? -1 :where 1)
                    (("1" (inst? -1 :where -2) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (typepred "lt_r") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "le_r_def" -1)
            (("2" (split -1)
              (("1" (use "subtraction_eq_zero_r")
                (("1" (assert) nil nil)) nil)
               ("2" (rewrite "lt_subtraction_r" :dir rl)
                (("2" (rewrite "le_r_def" 1) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "abs_def")
        (("2" (assert)
          (("2" (lemma "ropp_le_r")
            (("2" (inst -1 "Ropp(minus(a, b))" "c")
              (("2" (replace -1 :hide? t)
                (("2" (rewrite "ropp_ropp_idemp")
                  (("2" (case "lt_r(a,minus(a,b))")
                    (("1" (hide -2 -3)
                      (("1" (rewrite "lt_subtraction_r")
                        (("1" (rewrite "subtratcion_cancellation_1")
                          (("1" (rewrite "ropp_vs_zero")
                            (("1" (rewrite "ropp_ropp_idemp") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "le_r_def" -1)
                      (("2" (assert)
                        (("2" (case "transitive?(lt_r)")
                          (("1" (expand "transitive?")
                            (("1" (inst? -1 :where 1)
                              (("1"
                                (inst? -1 :where -3)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (typepred "lt_r")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus formal-const-decl "[RealNumber, RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (zero_r formal-const-decl "RealNumber" linear_ineq_zero_beta nil)
    (le_r const-decl "bool" le_r nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (subtraction_eq_zero_r formula-decl nil linear_ineq_zero_beta nil)
    (lt_subtraction_r formula-decl nil linear_ineq_zero_beta nil)
    (le_r_def formula-decl nil le_r nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (ropp_ropp_idemp formula-decl nil linear_ineq_zero_beta nil)
    (abs_le_zero_r formula-decl nil linear_ineq_zero_beta nil)
    (le const-decl "bool" le "orders/")
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (total_order? const-decl "bool" orders nil)
    (le_r_total_order formula-decl nil le_r nil)
    (abs formal-const-decl "[RealNumber -> RealNumber]"
         linear_ineq_zero_beta nil)
    (ropp_id formula-decl nil linear_ineq_zero_beta nil)
    (ropp_le_r formula-decl nil linear_ineq_zero_beta nil)
    (Ropp formal-const-decl "[RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (subtratcion_cancellation_1 formula-decl nil linear_ineq_zero_beta
     nil)
    (ropp_vs_zero formula-decl nil linear_ineq_zero_beta nil)
    (abs_def formula-decl nil linear_ineq_zero_beta nil))
   shostak))
 (triangular_lemma_4 0
  (triangular_lemma_4-1 nil 3756749998
   ("" (skeep)
    (("" (case "le_r(zero_r,minus(a,b))")
      (("1" (rewrite "abs_def")
        (("1" (assert)
          (("1" (case "lt_r(a,minus(a,b))")
            (("1" (rewrite "le_r_def" -3)
              (("1" (assert)
                (("1" (case "transitive?(lt_r)")
                  (("1" (expand "transitive?")
                    (("1" (inst? -1 :where 1)
                      (("1" (inst? -1 :where -2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred "lt_r") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "addition_both_sides_zero_lt_opp_x")
              (("2" (inst? -1 :where 1)
                (("2" (replace -1 :hide? t :dir rl)
                  (("2" (rewrite "ropp_vs_zero" 1)
                    (("2" (rewrite "ropp_ropp_idemp") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "le_r(zero_r,c)")
        (("1" (case "lt_r(a,zero_r)")
          (("1" (rewrite "le_r_def" -2)
            (("1" (assert)
              (("1" (case "transitive?(lt_r)")
                (("1" (expand "transitive?")
                  (("1" (inst? -1 :where 2)
                    (("1" (inst? -1 :where -2) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (typepred "lt_r") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "lt_r(a,b)")
            (("1" (case "transitive?(lt_r)")
              (("1" (expand "transitive?")
                (("1" (inst? -1 :where 1)
                  (("1" (inst? -1 :where -2) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (typepred "lt_r") (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "le_r" 3)
              (("2" (expand "le" 3)
                (("2" (rewrite "lt_subtractionp_ltz_r") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (use "abs_le_zero_r")
          (("2" (case "transitive?(le_r)")
            (("1" (expand "transitive?")
              (("1" (inst? -1 :where 1)
                (("1" (inst? -1 :where -2) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (use "le_r_total_order") (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus formal-const-decl "[RealNumber, RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (zero_r formal-const-decl "RealNumber" linear_ineq_zero_beta nil)
    (le_r const-decl "bool" le_r nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (addition_both_sides_zero_lt_opp_x formula-decl nil
     linear_ineq_zero_beta nil)
    (ropp_ropp_idemp formula-decl nil linear_ineq_zero_beta nil)
    (ropp_vs_zero formula-decl nil linear_ineq_zero_beta nil)
    (Ropp formal-const-decl "[RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (le_r_def formula-decl nil le_r nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (abs_def formula-decl nil linear_ineq_zero_beta nil)
    (abs_le_zero_r formula-decl nil linear_ineq_zero_beta nil)
    (total_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (le_r_total_order formula-decl nil le_r nil)
    (abs formal-const-decl "[RealNumber -> RealNumber]"
         linear_ineq_zero_beta nil)
    (lt_subtractionp_ltz_r formula-decl nil linear_ineq_zero_beta nil)
    (le const-decl "bool" le "orders/"))
   shostak))
 (fpBExprRestriction_TCC1 0
  (fpBExprRestriction_TCC1-1 nil 3752245690
   ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (fpBExprRestriction_TCC2 0
  (fpBExprRestriction_TCC2-1 nil 3752245690
   ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (fpBExprRestriction_TCC3 0
  (fpBExprRestriction_TCC3-1 nil 3752245690
   ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (accumulatedRoundoffErrorBound?_TCC1 0
  (accumulatedRoundoffErrorBound?_TCC1-1 nil 3756123392
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_expr_FtoR")
      (("" (assert)
        (("" (expand "consistentLocalEnvironments?")
          (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((evaluable_in_expr_FtoR formula-decl nil expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil))
   nil))
 (error_TCC1 0
  (error_TCC1-2 nil 3756041075
   ("" (use "accumulated_roundoff_error_bound_calculator_existence")
    nil nil)
   ((accumulated_roundoff_error_bound_calculator_existence formula-decl
     nil linear_ineq_zero_beta nil))
   nil)
  (error_TCC1-1 nil 3752253363
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_fpaexpr_wellformed_eq")
      (("" (replace -1 :hide? t) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((evaluable_in_fpaexpr_wellformed_eq formula-decl nil
     expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil))
   nil))
 (assures_positive_flow_on_TCC1 0
  (assures_positive_flow_on_TCC1-1 nil 3755956119
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_fp_evaluable_in_r") (("" (assert) nil nil))
      nil))
    nil)
   ((evaluable_in_fp_evaluable_in_r formula-decl nil
     expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil))
   nil))
 (assures_negative_flow_on_TCC1 0
  (assures_negative_flow_on_TCC1-1 nil 3755956119
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_not")
      (("" (replace -1 :hide? t) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((evaluable_in_not formula-decl nil expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil))
   nil))
 (assures_negative_flow_on_TCC2 0
  (assures_negative_flow_on_TCC2-1 nil 3755956119
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_r_not")
      (("" (replace -1 :hide? t)
        (("" (use "evaluable_in_fp_evaluable_in_r")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((evaluable_in_r_not formula-decl nil expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (FPBExpr type-decl nil expressions nil)
    (RBExpr type-decl nil expressions nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (evaluable_in_fp_evaluable_in_r formula-decl nil
     expressions_semantics nil))
   nil))
 (beta_TCC1 0
  (beta_TCC1-1 nil 3752245690
   ("" (skeep :preds? t)
    (("" (hide -1)
      (("" (use "evaluable_in_wellformed_eq")
        (("" (replace -1 :hide? t)
          (("" (use "evaluable_in_wellformed_eq")
            (("" (replace -1 :hide? t)
              (("" (split 1)
                (("1" (inst?) nil nil) ("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil))
   nil))
 (beta_TCC2 0
  (beta_TCC2-1 nil 3752249755
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t) (("" (inst?) nil nil)) nil)) nil))
    nil)
   nil nil))
 (beta_TCC3 0
  (beta_TCC3-2 nil 3755972791 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (le const-decl "bool" le "orders/")
    (le_fp const-decl "bool" le_fp nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (wellFormed? def-decl "bool" expressions nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (val def-decl "bool" expressions_semantics nil)
    (assures_positive_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (val def-decl "bool" expressions_semantics nil)
    (assures_negative_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil))
   nil)
  (beta_TCC3-1 nil 3752249755
   ("" (skeep*)
    (("" (replace -1 :hide? t)
      (("" (typepred "v(fpLocalEnv)(expr)")
        (("" (split -1)
          (("1" (flatten)
            (("1" (assert)
              (("1" (expand "beta_ok")
                (("1" (skeep*)
                  (("1" (insteep -)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (expand "assures_positive_flow_on")
                          (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((FtoR def-decl "RBExpr" expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (beta_TCC4 0
  (beta_TCC4-1 nil 3752249755 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (le const-decl "bool" le "orders/")
    (le_fp const-decl "bool" le_fp nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (wellFormed? def-decl "bool" expressions nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (val def-decl "bool" expressions_semantics nil)
    (assures_positive_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (val def-decl "bool" expressions_semantics nil)
    (assures_negative_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil))
   nil))
 (beta_TCC5 0
  (beta_TCC5-2 nil 3755972681
   ("" (skeep*)
    (("" (replace -1 :hide? t)
      (("" (typepred "v(inputRest,fpLocalEnv)(expr)")
        (("" (insteep -)
          (("" (split -1)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (expand "beta_ok")
                  (("3" (skeep :preds? 1)
                    (("3" (inst? -)
                      (("3" (flatten) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "fpBExprRestriction" -)
              (("2" (propax) nil nil)) nil)
             ("3" (expand "wellFormed?" -) (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (assures_positive_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (assures_negative_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (val def-decl "bool" expressions_semantics nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (val def-decl "bool" expressions_semantics nil)
    (le_fp const-decl "bool" le_fp nil)
    (le const-decl "bool" le "orders/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FPBExpr type-decl nil expressions nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (wellFormed? def-decl "bool" expressions nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (size const-decl "nat" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (beta_TCC5-1 nil 3752249755
   ("" (skeep*)
    (("" (replace -1 :hide? t)
      (("" (expand "beta_ok")
        (("" (typepred "v(fpLocalEnv)(expr1)")
          (("" (typepred "v(fpLocalEnv)(expr2)")
            (("" (split -1)
              (("1" (split -2)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (use "evaluable_in_and")
                        (("1" (assert) nil nil)) nil)
                       ("2" (use "evaluable_in_and")
                        (("2" (assert) nil nil)) nil)
                       ("3" (skeep*)
                        (("3" (split 1)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil)
               ("3" (hide 2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (FPBExpr type-decl nil expressions nil)
    (evaluable_in_and formula-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FtoR def-decl "RBExpr" expressions nil))
   nil))
 (beta_TCC6 0
  (beta_TCC6-2 nil 3755972658 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil))
   nil)
  (beta_TCC6-1 nil 3752249755
   ("" (skeep*)
    (("" (replace -3 :hide? t)
      (("" (split 1)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (expand "beta_ok")
          (("3" (skeep*)
            (("3" (split 1)
              (("1" (expand "assures_positive_flow_on")
                (("1" (flatten)
                  (("1" (expand "val" -1)
                    (("1" (split 1)
                      (("1" (expand "val" 1)
                        (("1" (expand "eval" 1 1)
                          (("1" (assert)
                            (("1" (replace -3)
                              (("1"
                                (replace -4)
                                (("1"
                                  (expand "eval" -1 1)
                                  (("1"
                                    (rewrite "FltCorrect")
                                    (("1"
                                      (rewrite "FltCorrect")
                                      (("1"
                                        (typepred
                                         "error(fpLocalEnv)(expr2)")
                                        (("1"
                                          (rewrite "FleCorrect")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "FtoR" 1 2)
                        (("2" (expand "val" 1)
                          (("2" (replace -4)
                            (("2" (expand "eval" -1 1)
                              (("2"
                                (rewrite "FltCorrect")
                                (("2"
                                  (expand "FtoR" 1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -3)
                                      (("2"
                                        (expand "FtoR" 1 2)
                                        (("2"
                                          (expand "zero_fp")
                                          (("2"
                                            (expand "float_pair")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "eval" 1 1)
                                                (("2"
                                                  (typepred
                                                   "error(fpLocalEnv)(expr2)")
                                                  (("2"
                                                    (rewrite
                                                     "FleCorrect")
                                                    (("2"
                                                      (insteep -2)
                                                      (("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "assures_negative_flow_on")
                (("2" (flatten)
                  (("2" (expand "FPLEQ")
                    (("2" (expand "val" -1)
                      (("2" (expand "val" 1)
                        (("2" (replace -4 :hide? t)
                          (("2" (rewrite "FltCorrect")
                            (("2" (expand "eval" 1 1)
                              (("2"
                                (rewrite "FoppCorrect")
                                (("2"
                                  (split 2)
                                  (("1"
                                    (expand "val" 1)
                                    (("1"
                                      (expand "val" -1)
                                      (("1"
                                        (rewrite "FltCorrect")
                                        (("1"
                                          (expand "eval" -1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred
                                                   "error(fpLocalEnv)(expr2)")
                                                  (("1"
                                                    (rewrite
                                                     "FleCorrect")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "val" 1)
                                    (("2"
                                      (expand "FtoR" -1 2)
                                      (("2"
                                        (expand "val" -1)
                                        (("2"
                                          (expand "FtoR" -1 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "eval" -1 1)
                                                  (("2"
                                                    (typepred
                                                     "error(fpLocalEnv)(expr2)")
                                                    (("2"
                                                      (insteep -2)
                                                      (("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (beta_TCC7 0
  (beta_TCC7-2 nil 3755972458 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil))
   nil)
  (beta_TCC7-1 nil 3752249755
   ("" (skeep*)
    (("" (case "zero?(expr2)")
      (("1" (hide 1)
        (("1" (flatten)
          (("1" (replace -3 :hide? t)
            (("1" (expand "beta_ok")
              (("1" (split 1)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (skeep*)
                  (("3" (split 1)
                    (("1" (expand "assures_positive_flow_on")
                      (("1" (flatten)
                        (("1" (expand "val" -1)
                          (("1" (rewrite "FltCorrect")
                            (("1" (replace -5 :hide? t)
                              (("1"
                                (expand "eval" -1 2)
                                (("1"
                                  (rewrite "FoppCorrect")
                                  (("1"
                                    (typepred
                                     "error(fpLocalEnv)(expr1)")
                                    (("1"
                                      (rewrite "FleCorrect")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "val" 1)
                                          (("1"
                                            (expand "eval" 1 2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (rewrite
                                                   "FltCorrect")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "FtoR" 1 2)
                                          (("2"
                                            (expand "val" 1)
                                            (("2"
                                              (expand "FtoR" 1 4)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -5)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "eval"
                                                       1
                                                       2)
                                                      (("2"
                                                        (insteep -2)
                                                        (("2"
                                                          (grind-reals)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "assures_negative_flow_on")
                      (("2" (flatten)
                        (("2" (expand "FPLEQ" -1)
                          (("2" (expand "val" -1)
                            (("2" (expand "val" 1)
                              (("2"
                                (rewrite "FltCorrect")
                                (("2"
                                  (typepred "error(fpLocalEnv)(expr1)")
                                  (("2"
                                    (rewrite "FleCorrect")
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (expand "val" 1)
                                        (("1"
                                          (expand "val" -1)
                                          (("1"
                                            (rewrite "FltCorrect")
                                            (("1"
                                              (replace -6 :hide? t)
                                              (("1"
                                                (expand "eval" 1 2)
                                                (("1"
                                                  (expand "eval" -1 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -5
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "val" 1)
                                        (("2"
                                          (expand "FtoR" -1 2)
                                          (("2"
                                            (expand "val" -1)
                                            (("2"
                                              (expand "FtoR" -1 4)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "eval"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "eval"
                                                       1
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (insteep -3)
                                                          (("2"
                                                            (grind-reals)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-4 1 2 -1)) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((number adt-accessor-decl "[(FPConstant?) -> FPNumber]" expressions
            nil)
    (FPConstant? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (REnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (eval def-decl "RNumber" expressions_semantics nil)
    (InducedREnv nonempty-type-eq-decl nil expressions_semantics nil)
    (FtoR const-decl "InducedREnv(fpEnv)" expressions_semantics nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPLEQ const-decl "FPBExpr" expressions nil))
   nil))
 (beta_TCC8 0
  (beta_TCC8-2 nil 3755972390 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil)
  (beta_TCC8-1 nil 3755971967 ("" (subtype-tcc) nil nil) nil nil))
 (beta_TCC9 0
  (beta_TCC9-2 nil 3755972212
   ("" (skeep*)
    (("" (replace -1 :hide? t)
      (("" (expand "beta_ok")
        (("" (typepred "v(inputRest,fpLocalEnv)(expr1)")
          (("" (typepred "v(inputRest,fpLocalEnv)(expr2)")
            (("" (assert)
              (("" (insteep -1)
                (("" (insteep -2)
                  (("" (split -1)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split 1)
                          (("1" (expand "wellFormed?" 1)
                            (("1" (expand "wellFormed?" -12)
                              (("1"
                                (flatten)
                                (("1"
                                  (split 1)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "wellFormed?" 1)
                            (("2" (expand "wellFormed?" -12)
                              (("2"
                                (flatten)
                                (("2"
                                  (split 1)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep*)
                            (("3" (split 1)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "fpBExprRestriction" -)
                        (("2" (assert) nil nil)) nil)
                       ("3" (expand "wellFormed?" -7)
                        (("3" (assert) nil nil)) nil))
                      nil)
                     ("2" (expand "fpBExprRestriction" -)
                      (("2" (assert) nil nil)) nil)
                     ("3" (expand "wellFormed?" -7)
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (size const-decl "nat" u_local_environment nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (wellFormed? def-decl "bool" expressions nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (FPBExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (assures_negative_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (assures_positive_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (val def-decl "bool" expressions_semantics nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (val def-decl "bool" expressions_semantics nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (beta_TCC9-1 nil 3755971967 ("" (subtype-tcc) nil nil) nil nil))
 (beta_TCC10 0
  (beta_TCC10-1 nil 3756040371 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil))
   nil))
 (beta_TCC11 0
  (beta_TCC11-1 nil 3756040371 ("" (tcc))
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FPConstant? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil))
   nil))
 (beta_TCC12 0
  (beta_TCC12-2 "" 3756668954
   ("" (skeep*)
    (("" (replace -3 :hide? t)
      (("" (split 1)
        (("1" (expand "FPLEQ")
          (("1" (expand "wellFormed?" 1)
            (("1" (expand "wellFormed?")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (replace -4 :hide? t)
                    (("1" (expand "wellFormed?" 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wellFormed?" 1)
          (("2" (expand "wellFormed?" -)
            (("2" (flatten)
              (("2" (expand "wellFormed?" 1 1) (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "beta_ok")
          (("3" (skeep*)
            (("3" (split 1)
              (("1" (expand "assures_positive_flow_on")
                (("1" (flatten)
                  (("1" (expand "val" -1)
                    (("1" (split 1)
                      (("1" (expand "val" 1)
                        (("1" (expand "eval" 1 1)
                          (("1" (assert)
                            (("1" (replace -3)
                              (("1"
                                (replace -4)
                                (("1"
                                  (expand "eval" -1 1)
                                  (("1"
                                    (rewrite "lt_fp_lt_r")
                                    (("1"
                                      (rewrite "lt_fp_lt_r")
                                      (("1"
                                        (typepred
                                         "error(inputRest,fpLocalEnv)(expr2)")
                                        (("1"
                                          (insteep -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite "le_fp_le_r")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite "le_r_def")
                                                  (("1"
                                                    (case
                                                     "transitive?(lt_r)")
                                                    (("1"
                                                      (expand
                                                       "transitive?")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "zero_r"
                                                         "FtoR(error(inputRest, fpLocalEnv)(expr2))"
                                                         "FtoR(eval(fpParamEnv, fpLocalEnv)(expr2))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (typepred
                                                         "lt_r")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "FtoR" 1 2)
                        (("2" (expand "val" 1)
                          (("2" (replace -4)
                            (("2" (expand "eval" -1 1)
                              (("2"
                                (rewrite "lt_fp_lt_r")
                                (("2"
                                  (expand "FtoR" 1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "eval" 1 1)
                                          (("2"
                                            (typepred
                                             "error(inputRest,fpLocalEnv)(expr2)")
                                            (("2"
                                              (rewrite "le_fp_le_r")
                                              (("2"
                                                (insteep -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "le_r_def")
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (case
                                                           "FtoR(eval(fpParamEnv, fpLocalEnv)(expr2))=eval(FtoR(fpParamEnv), rLocalEnv)(FtoR(expr2))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (invoke
                                                             (case
                                                              "%1 = %2")
                                                             (! -1 1)
                                                             (! -1 2))
                                                            (("1"
                                                              (rewrite
                                                               "abs_eq_zero_r")
                                                              (("1"
                                                                (rewrite
                                                                 "subtraction_eq_zero_r")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "antisymmetric?(le_r)")
                                                              (("1"
                                                                (expand
                                                                 "antisymmetric?")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "abs_le_zero_r")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "le_r_total_order")
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "FORALL(a,b,c: RealNumber): le_r(abs(minus(a,b)),c) AND lt_r(c,a) IMPLIES lt_r(zero_r,b)")
                                                        (("1"
                                                          (inst?
                                                           -1
                                                           :where
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (use
                                                             "triangular_lemma_1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "assures_negative_flow_on")
                (("2" (flatten)
                  (("2" (expand "FPLEQ")
                    (("2" (expand "val" -1)
                      (("2" (expand "val" 1)
                        (("2" (replace -4 :hide? t)
                          (("2" (expand "eval" 1 1)
                            (("2" (split 2)
                              (("1"
                                (expand "val" 1)
                                (("1"
                                  (expand "val" -1)
                                  (("1"
                                    (rewrite "lt_fp_lt_r")
                                    (("1"
                                      (expand "eval" -1 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred
                                               "error(inputRest,fpLocalEnv)(expr2)")
                                              (("1"
                                                (insteep -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "le_fp_le_r")
                                                    (("1"
                                                      (rewrite
                                                       "lt_fp_lt_r")
                                                      (("1"
                                                        (rewrite
                                                         "le_r_def")
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (rewrite
                                                             "ftor_fopp")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "ropp_id")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "ftor_fopp")
                                                            (("2"
                                                              (use
                                                               "ropp_vs_zero")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "transitive?(lt_r)")
                                                                  (("1"
                                                                    (expand
                                                                     "transitive?")
                                                                    (("1"
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       1)
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "lt_r")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "val" 1)
                                (("2"
                                  (expand "FtoR" -1 2)
                                  (("2"
                                    (expand "val" -1)
                                    (("2"
                                      (expand "FtoR" -1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "eval" -1 1)
                                              (("2"
                                                (typepred
                                                 "error(inputRest,fpLocalEnv)(expr2)")
                                                (("2"
                                                  (insteep -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "lt_fp_lt_r"
                                                       1)
                                                      (("2"
                                                        (rewrite
                                                         "ftor_fopp")
                                                        (("2"
                                                          (lemma
                                                           "triangular_lemma_2")
                                                          (("2"
                                                            (inst?
                                                             -1
                                                             :where
                                                             1)
                                                            (("2"
                                                              (inst?
                                                               -1
                                                               :where
                                                               -3)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (le_fp const-decl "bool" le_fp nil)
    (le_r const-decl "bool" le_r nil)
    (abs formal-const-decl "[RealNumber -> RealNumber]"
         linear_ineq_zero_beta nil)
    (minus formal-const-decl "[RealNumber, RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (REnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (eval def-decl "RNumber" expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (InducedREnv nonempty-type-eq-decl nil expressions_semantics nil)
    (FtoR const-decl "InducedREnv(fpEnv)" expressions_semantics nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (error const-decl "(LAMBDA (err: FloatingPointNumber):
   FORALL (fpParamEnv: ValidInput(inputRest),
           (rLocalEnv:
              RLocalEnvironment
                  [Operator, RealNumber, lt_r, applyFun_r,
                   FloatingPointNumber, lt_fp, applyFun_fp, FtoR]
                | consistentLocalEnvironments?(fpLocalEnv, rLocalEnv))):
     le_fp(zero_fp, err) AND
      le_r(abs(minus(FtoR(eval(fpParamEnv, fpLocalEnv)(expr)),
                     eval(FtoR(fpParamEnv), rLocalEnv)(FtoR(expr)))),
           FtoR(err)))" linear_ineq_zero_beta nil)
    (le_fp_le_r formula-decl nil le_r_fp nil)
    (zero_r formal-const-decl "RealNumber" linear_ineq_zero_beta nil)
    (le_r_def formula-decl nil le_r nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ftor_zero formula-decl nil linear_ineq_zero_beta nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_fp formal-const-decl "FloatingPointNumber"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp_lt_r formula-decl nil linear_ineq_zero_beta nil)
    (val def-decl "bool" expressions_semantics nil)
    (antisymmetric? const-decl "bool" relations nil)
    (abs_le_zero_r formula-decl nil linear_ineq_zero_beta nil)
    (total_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (le const-decl "bool" le "orders/")
    (le_r_total_order formula-decl nil le_r nil)
    (abs_eq_zero_r formula-decl nil linear_ineq_zero_beta nil)
    (subtraction_eq_zero_r formula-decl nil linear_ineq_zero_beta nil)
    (triangular_lemma_1 formula-decl nil linear_ineq_zero_beta nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (val def-decl "bool" expressions_semantics nil)
    (assures_positive_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (Fopp formal-const-decl
     "[FloatingPointNumber -> FloatingPointNumber]"
     linear_ineq_zero_beta nil)
    (ropp_id formula-decl nil linear_ineq_zero_beta nil)
    (ftor_fopp formula-decl nil linear_ineq_zero_beta nil)
    (ropp_vs_zero formula-decl nil linear_ineq_zero_beta nil)
    (Ropp formal-const-decl "[RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (triangular_lemma_2 formula-decl nil linear_ineq_zero_beta nil)
    (assures_negative_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (FPLEQ const-decl "FPBExpr" expressions nil)
    (wellFormed? inductive-decl "bool" expressions nil)
    (wellFormed? def-decl "bool" expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (beta_TCC12-1 nil 3756040371
   ("" (skeep*)
    (("" (replace -3 :hide? t)
      (("" (split 1)
        (("1" (expand "FPLEQ")
          (("1" (expand "wellFormed?" 1)
            (("1" (expand "wellFormed?")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (replace -4 :hide? t)
                    (("1" (expand "wellFormed?" 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wellFormed?" 1)
          (("2" (expand "wellFormed?" -)
            (("2" (flatten)
              (("2" (expand "wellFormed?" 1 1) (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "beta_ok")
          (("3" (skeep*)
            (("3" (split 1)
              (("1" (expand "assures_positive_flow_on")
                (("1" (flatten)
                  (("1" (expand "val" -1)
                    (("1" (split 1)
                      (("1" (expand "val" 1)
                        (("1" (expand "eval" 1 1)
                          (("1" (assert)
                            (("1" (replace -3)
                              (("1"
                                (replace -4)
                                (("1"
                                  (expand "eval" -1 1)
                                  (("1"
                                    (rewrite "FltCorrect")
                                    (("1"
                                      (rewrite "FltCorrect")
                                      (("1"
                                        (typepred
                                         "error(inputRest,fpLocalEnv)(expr2)")
                                        (("1"
                                          (insteep -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite "FleCorrect")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "FtoR" 1 2)
                        (("2" (expand "val" 1)
                          (("2" (replace -4)
                            (("2" (expand "eval" -1 1)
                              (("2"
                                (rewrite "FltCorrect")
                                (("2"
                                  (expand "FtoR" 1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -3)
                                      (("2"
                                        (expand "FtoR" 1 2)
                                        (("2"
                                          (expand "zero_fp")
                                          (("2"
                                            (expand "float_pair")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "eval" 1 1)
                                                (("2"
                                                  (typepred
                                                   "error(inputRest,fpLocalEnv)(expr2)")
                                                  (("2"
                                                    (rewrite
                                                     "FleCorrect")
                                                    (("2"
                                                      (insteep -1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (grind-reals)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "assures_negative_flow_on")
                (("2" (flatten)
                  (("2" (expand "FPLEQ")
                    (("2" (expand "val" -1)
                      (("2" (expand "val" 1)
                        (("2" (replace -4 :hide? t)
                          (("2" (rewrite "FltCorrect")
                            (("2" (expand "eval" 1 1)
                              (("2"
                                (rewrite "FoppCorrect")
                                (("2"
                                  (split 2)
                                  (("1"
                                    (expand "val" 1)
                                    (("1"
                                      (expand "val" -1)
                                      (("1"
                                        (rewrite "FltCorrect")
                                        (("1"
                                          (expand "eval" -1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred
                                                   "error(inputRest,fpLocalEnv)(expr2)")
                                                  (("1"
                                                    (insteep -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "FleCorrect")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "val" 1)
                                    (("2"
                                      (expand "FtoR" -1 2)
                                      (("2"
                                        (expand "val" -1)
                                        (("2"
                                          (expand "FtoR" -1 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "eval" -1 1)
                                                  (("2"
                                                    (typepred
                                                     "error(inputRest,fpLocalEnv)(expr2)")
                                                    (("2"
                                                      (insteep -1)
                                                      (("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval def-decl "FPNumber" expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (REnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (eval def-decl "RNumber" expressions_semantics nil)
    (InducedREnv nonempty-type-eq-decl nil expressions_semantics nil)
    (FtoR const-decl "InducedREnv(fpEnv)" expressions_semantics nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (FPConstant adt-constructor-decl "[FPNumber -> (FPConstant?)]"
     expressions nil)
    (FPConstant? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPLEQ const-decl "FPBExpr" expressions nil)
    (wellFormed? inductive-decl "bool" expressions nil)
    (wellFormed? def-decl "bool" expressions nil))
   nil))
 (beta_TCC13 0
  (beta_TCC13-1 nil 3756040371 ("" (tcc))
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil))
   nil))
 (beta_TCC14 0
  (beta_TCC14-1 nil 3756040371 ("" (tcc))
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FPConstant? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (beta_TCC15 0
  (beta_TCC15-2 nil 3756672036
   ("" (skeep*)
    (("" (case "zero?(expr2)")
      (("1" (hide 1)
        (("1" (flatten)
          (("1" (replace -3 :hide? t)
            (("1" (expand "beta_ok")
              (("1" (split 1)
                (("1" (expand "FPLEQ")
                  (("1" (expand "wellFormed?")
                    (("1" (flatten)
                      (("1" (replace -3 :hide? t)
                        (("1" (expand "wellFormed?" 1)
                          (("1" (assert)
                            (("1" (expand "wellFormed?" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "wellFormed?")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (replace -4 :hide? t)
                        (("2" (expand "wellFormed?" 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep*)
                  (("3" (split 1)
                    (("1" (expand "assures_positive_flow_on")
                      (("1" (flatten)
                        (("1" (expand "val" -1)
                          (("1" (rewrite "lt_fp_lt_r")
                            (("1" (replace -5 :hide? t)
                              (("1"
                                (expand "eval" -1 2)
                                (("1"
                                  (typepred
                                   "error(inputRest,fpLocalEnv)(expr1)")
                                  (("1"
                                    (rewrite "le_fp_le_r")
                                    (("1"
                                      (insteep -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (expand "val" 1)
                                            (("1"
                                              (expand "eval" 1 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (rewrite
                                                     "lt_fp_lt_r")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -3 1))
                                                      (("1"
                                                        (rewrite
                                                         "ftor_fopp")
                                                        (("1"
                                                          (rewrite
                                                           "le_r_def")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (rewrite
                                                                 "ropp_id")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "ropp_vs_zero")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (case
                                                                     "transitive?(lt_r)")
                                                                    (("1"
                                                                      (expand
                                                                       "transitive?")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         1)
                                                                        (("1"
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "lt_r")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "FtoR" 1 2)
                                            (("2"
                                              (expand "val" 1)
                                              (("2"
                                                (expand "FtoR" 1 4)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -5)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "eval"
                                                         1
                                                         2)
                                                        (("2"
                                                          (lemma
                                                           "triangular_lemma_3")
                                                          (("2"
                                                            (inst?
                                                             -1
                                                             :where
                                                             1)
                                                            (("2"
                                                              (inst?
                                                               -1
                                                               :where
                                                               -3)
                                                              (("2"
                                                                (rewrite
                                                                 "ftor_fopp")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "assures_negative_flow_on")
                      (("2" (flatten)
                        (("2" (expand "FPLEQ" -1)
                          (("2" (expand "val" -1)
                            (("2" (expand "val" 1)
                              (("2"
                                (rewrite "lt_fp_lt_r")
                                (("2"
                                  (typepred
                                   "error(inputRest,fpLocalEnv)(expr1)")
                                  (("2"
                                    (rewrite "le_fp_le_r")
                                    (("2"
                                      (insteep -1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (expand "val" 1)
                                            (("1"
                                              (expand "val" -1)
                                              (("1"
                                                (rewrite "lt_fp_lt_r")
                                                (("1"
                                                  (replace -6 :hide? t)
                                                  (("1"
                                                    (expand "eval" 1 2)
                                                    (("1"
                                                      (expand
                                                       "eval"
                                                       -1
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                -2
                                                                1))
                                                              (("1"
                                                                (rewrite
                                                                 "le_r_def")
                                                                (("1"
                                                                  (case
                                                                   "transitive?(lt_r)")
                                                                  (("1"
                                                                    (expand
                                                                     "transitive?")
                                                                    (("1"
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       1)
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "lt_r")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "val" 1)
                                            (("2"
                                              (expand "FtoR" -1 2)
                                              (("2"
                                                (expand "val" -1)
                                                (("2"
                                                  (expand "FtoR" -1 4)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "eval"
                                                       -1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "eval"
                                                         1
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -6
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -5
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "triangular_lemma_4")
                                                                    (("2"
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       1)
                                                                      (("2"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-4 1 2 -1)) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((zero_fp formal-const-decl "FloatingPointNumber"
     linear_ineq_zero_beta nil)
    (number adt-accessor-decl "[(FPConstant?) -> FPNumber]" expressions
            nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FPConstant? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (assures_negative_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (triangular_lemma_4 formula-decl nil linear_ineq_zero_beta nil)
    (assures_positive_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (val def-decl "bool" expressions_semantics nil)
    (error const-decl "(LAMBDA (err: FloatingPointNumber):
   FORALL (fpParamEnv: ValidInput(inputRest),
           (rLocalEnv:
              RLocalEnvironment
                  [Operator, RealNumber, lt_r, applyFun_r,
                   FloatingPointNumber, lt_fp, applyFun_fp, FtoR]
                | consistentLocalEnvironments?(fpLocalEnv, rLocalEnv))):
     le_fp(zero_fp, err) AND
      le_r(abs(minus(FtoR(eval(fpParamEnv, fpLocalEnv)(expr)),
                     eval(FtoR(fpParamEnv), rLocalEnv)(FtoR(expr)))),
           FtoR(err)))" linear_ineq_zero_beta nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FtoR const-decl "InducedREnv(fpEnv)" expressions_semantics nil)
    (InducedREnv nonempty-type-eq-decl nil expressions_semantics nil)
    (eval def-decl "RNumber" expressions_semantics nil)
    (REnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (minus formal-const-decl "[RealNumber, RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (abs formal-const-decl "[RealNumber -> RealNumber]"
         linear_ineq_zero_beta nil)
    (le_r const-decl "bool" le_r nil)
    (le_fp const-decl "bool" le_fp nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_r formal-const-decl "RealNumber" linear_ineq_zero_beta nil)
    (le_r_def formula-decl nil le_r nil)
    (ropp_vs_zero formula-decl nil linear_ineq_zero_beta nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (Ropp formal-const-decl "[RealNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (transitive? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (ropp_id formula-decl nil linear_ineq_zero_beta nil)
    (ftor_fopp formula-decl nil linear_ineq_zero_beta nil)
    (val def-decl "bool" expressions_semantics nil)
    (triangular_lemma_3 formula-decl nil linear_ineq_zero_beta nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (ftor_zero formula-decl nil linear_ineq_zero_beta nil)
    (le_fp_le_r formula-decl nil le_r_fp nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_fp_lt_r formula-decl nil linear_ineq_zero_beta nil)
    (FPLEQ const-decl "FPBExpr" expressions nil)
    (wellFormed? inductive-decl "bool" expressions nil)
    (wellFormed? def-decl "bool" expressions nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (beta_TCC15-1 nil 3756040371
   ("" (skeep*)
    (("" (case "zero?(expr2)")
      (("1" (hide 1)
        (("1" (flatten)
          (("1" (replace -3 :hide? t)
            (("1" (expand "beta_ok")
              (("1" (split 1)
                (("1" (expand "FPLEQ")
                  (("1" (expand "wellFormed?")
                    (("1" (flatten)
                      (("1" (replace -3 :hide? t)
                        (("1" (expand "wellFormed?" 1)
                          (("1" (assert)
                            (("1" (expand "wellFormed?" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "wellFormed?")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (replace -4 :hide? t)
                        (("2" (expand "wellFormed?" 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep*)
                  (("3" (split 1)
                    (("1" (expand "assures_positive_flow_on")
                      (("1" (flatten)
                        (("1" (expand "val" -1)
                          (("1" (rewrite "FltCorrect")
                            (("1" (replace -5 :hide? t)
                              (("1"
                                (expand "eval" -1 2)
                                (("1"
                                  (rewrite "FoppCorrect")
                                  (("1"
                                    (typepred
                                     "error(inputRest,fpLocalEnv)(expr1)")
                                    (("1"
                                      (rewrite "FleCorrect")
                                      (("1"
                                        (insteep -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (expand "val" 1)
                                              (("1"
                                                (expand "eval" 1 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -5)
                                                    (("1"
                                                      (rewrite
                                                       "FltCorrect")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "FtoR" 1 2)
                                              (("2"
                                                (expand "val" 1)
                                                (("2"
                                                  (expand "FtoR" 1 4)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "eval"
                                                           1
                                                           2)
                                                          (("2"
                                                            (grind-reals)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "assures_negative_flow_on")
                      (("2" (flatten)
                        (("2" (expand "FPLEQ" -1)
                          (("2" (expand "val" -1)
                            (("2" (expand "val" 1)
                              (("2"
                                (rewrite "FltCorrect")
                                (("2"
                                  (typepred
                                   "error(inputRest,fpLocalEnv)(expr1)")
                                  (("2"
                                    (rewrite "FleCorrect")
                                    (("2"
                                      (insteep -1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (expand "val" 1)
                                            (("1"
                                              (expand "val" -1)
                                              (("1"
                                                (rewrite "FltCorrect")
                                                (("1"
                                                  (replace -6 :hide? t)
                                                  (("1"
                                                    (expand "eval" 1 2)
                                                    (("1"
                                                      (expand
                                                       "eval"
                                                       -1
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "val" 1)
                                            (("2"
                                              (expand "FtoR" -1 2)
                                              (("2"
                                                (expand "val" -1)
                                                (("2"
                                                  (expand "FtoR" -1 4)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "eval"
                                                         -1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "eval"
                                                           1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind-reals)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-4 1 2 -1)) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((number adt-accessor-decl "[(FPConstant?) -> FPNumber]" expressions
            nil)
    (FPConstant? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (REnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (eval def-decl "RNumber" expressions_semantics nil)
    (InducedREnv nonempty-type-eq-decl nil expressions_semantics nil)
    (FtoR const-decl "InducedREnv(fpEnv)" expressions_semantics nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPLEQ const-decl "FPBExpr" expressions nil)
    (wellFormed? inductive-decl "bool" expressions nil)
    (wellFormed? def-decl "bool" expressions nil))
   nil))
 (beta_TCC16 0
  (beta_TCC16-1 nil 3756040371 ("" (tcc))
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (beta_plus_prop_TCC1 0
  (beta_plus_prop_TCC1-1 nil 3755956119
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t)
        (("" (use "evaluable_in_wellformed_eq")
          (("" (replace -1 :hide? t)
            (("" (skolem - "nargs")
              (("" (expand "beta_plus")
                (("" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert) (("" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (beta_plus_prop_TCC2 0
  (beta_plus_prop_TCC2-1 nil 3755956119
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t)
        (("" (use "evaluable_in_wellformed_eq")
          (("" (replace -1 :hide? t)
            (("" (skolem - "nargs")
              (("" (expand "beta_plus")
                (("" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert) (("" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (beta_plus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (beta def-decl "{res: [FPBExpr, FPBExpr] |
         FORALL (nargs: nat):
           fpBExprRestriction(bexpr) AND
            wellFormed?(bexpr, nargs, size(fpLocalEnv))
            IMPLIES
            (wellFormed?(res`1, nargs, size(fpLocalEnv)) AND
              wellFormed?(res`2, nargs, size(fpLocalEnv)) AND
               beta_ok(inputRest, fpLocalEnv)(bexpr)(res))}"
     linear_ineq_zero_beta nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" u_local_environment nil)
    (wellFormed? def-decl "bool" expressions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (beta_plus_prop_TCC3 0
  (beta_plus_prop_TCC3-1 nil 3755956119
   ("" (skeep)
    (("" (use "evaluable_in_fp_evaluable_in_r") (("" (assert) nil nil))
      nil))
    nil)
   ((evaluable_in_fp_evaluable_in_r formula-decl nil
     expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil))
   nil))
 (beta_plus_prop 0
  (beta_plus_prop-1 nil 3743964523
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t)
        (("" (skolem - "nargs")
          (("" (expand "beta_plus")
            (("" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
              (("" (expand "beta_ok")
                (("" (expand "assures_positive_flow_on")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (flatten)
                        (("" (inst? -3)
                          (("" (assert)
                            (("" (flatten) (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (beta def-decl "{res: [FPBExpr, FPBExpr] |
         FORALL (nargs: nat):
           fpBExprRestriction(bexpr) AND
            wellFormed?(bexpr, nargs, size(fpLocalEnv))
            IMPLIES
            (wellFormed?(res`1, nargs, size(fpLocalEnv)) AND
              wellFormed?(res`2, nargs, size(fpLocalEnv)) AND
               beta_ok(inputRest, fpLocalEnv)(bexpr)(res))}"
     linear_ineq_zero_beta nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" u_local_environment nil)
    (wellFormed? def-decl "bool" expressions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (assures_positive_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (beta_plus const-decl "FPBExpr" linear_ineq_zero_beta nil))
   shostak))
 (beta_minus_prop_TCC1 0
  (beta_minus_prop_TCC1-3 nil 3756126560
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t)
        (("" (use "evaluable_in_wellformed_eq")
          (("" (replace -1 :hide? t)
            (("" (skolem - "nargs")
              (("" (expand "beta_minus")
                (("" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert) (("" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (beta_minus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (beta def-decl "{res: [FPBExpr, FPBExpr] |
         FORALL (nargs: nat):
           fpBExprRestriction(bexpr) AND
            wellFormed?(bexpr, nargs, size(fpLocalEnv))
            IMPLIES
            (wellFormed?(res`1, nargs, size(fpLocalEnv)) AND
              wellFormed?(res`2, nargs, size(fpLocalEnv)) AND
               beta_ok(inputRest, fpLocalEnv)(bexpr)(res))}"
     linear_ineq_zero_beta nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" u_local_environment nil)
    (wellFormed? def-decl "bool" expressions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil)
  (beta_minus_prop_TCC1-2 nil 3756034727
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t)
        (("" (use "evaluable_in_wellformed_eq")
          (("" (replace -1 :hide? t)
            (("" (skolem - "nargs")
              (("" (expand "beta_minus")
                (("" (typepred "beta(fpLocalEnv)(phi_fp)")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert) (("" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (wellFormed? def-decl "bool" expressions nil))
   shostak)
  (beta_minus_prop_TCC1-1 nil 3755956119 ("" (subtype-tcc) nil nil) nil
   nil))
 (beta_minus_prop_TCC2 0
  (beta_minus_prop_TCC2-1 nil 3755956119
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_not")
      (("" (replace -1 :hide? t) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((evaluable_in_not formula-decl nil expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil))
   nil))
 (beta_minus_prop_TCC3 0
  (beta_minus_prop_TCC3-1 nil 3755956119
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_r_not")
      (("" (replace -1 :hide? t)
        (("" (use "evaluable_in_fp_evaluable_in_r")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((evaluable_in_r_not formula-decl nil expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (RBExpr type-decl nil expressions nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (evaluable_in_fp_evaluable_in_r formula-decl nil
     expressions_semantics nil))
   nil))
 (beta_minus_prop 0
  (beta_minus_prop-3 nil 3756124253
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t)
        (("" (skolem - "nargs")
          (("" (expand "beta_minus")
            (("" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
              (("" (expand "beta_ok")
                (("" (expand "assures_negative_flow_on")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (flatten)
                        (("" (inst? -3)
                          (("" (assert)
                            (("" (flatten) (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (beta def-decl "{res: [FPBExpr, FPBExpr] |
         FORALL (nargs: nat):
           fpBExprRestriction(bexpr) AND
            wellFormed?(bexpr, nargs, size(fpLocalEnv))
            IMPLIES
            (wellFormed?(res`1, nargs, size(fpLocalEnv)) AND
              wellFormed?(res`2, nargs, size(fpLocalEnv)) AND
               beta_ok(inputRest, fpLocalEnv)(bexpr)(res))}"
     linear_ineq_zero_beta nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" u_local_environment nil)
    (wellFormed? def-decl "bool" expressions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (assures_negative_flow_on const-decl "bool" linear_ineq_zero_beta
     nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (beta_minus const-decl "FPBExpr" linear_ineq_zero_beta nil))
   nil)
  (beta_minus_prop-2 nil 3756033292
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t)
        (("" (skolem - "nargs")
          (("" (expand "beta_minus")
            (("" (typepred "beta(fpLocalEnv)(phi_fp)")
              (("" (expand "beta_ok")
                (("" (expand "assures_negative_flow_on")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (flatten)
                        (("" (inst? -3)
                          (("" (insteep -3)
                            (("" (assert)
                              ((""
                                (flatten)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (wellFormed? def-decl "bool" expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil))
   nil)
  (beta_minus_prop-1 nil 3752317086
   ("" (skeep)
    (("" (typepred "beta(fpLocalEnv)(phi_fp)")
      (("" (expand "beta_ok")
        (("" (flatten)
          (("" (expand "assures_negative_flow_on")
            (("" (inst?)
              (("" (insteep -3)
                (("" (flatten)
                  (("" (assert)
                    (("" (expand "beta_minus") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil))
   shostak))
 (IMP_transformation_TCC1 0
  (IMP_transformation_TCC1-2 nil 3756752170
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (iff)
        (("" (flatten)
          (("" (hide -1)
            (("" (split -1)
              (("1" (expand "beta_plus")
                (("1" (assert)
                  (("1" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (beta_minus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (beta_plus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wellFormed? def-decl "bool" expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (beta def-decl "{res: [FPBExpr, FPBExpr] |
         FORALL (nargs: nat):
           fpBExprRestriction(bexpr) AND
            wellFormed?(bexpr, nargs, size(fpLocalEnv))
            IMPLIES
            (wellFormed?(res`1, nargs, size(fpLocalEnv)) AND
              wellFormed?(res`2, nargs, size(fpLocalEnv)) AND
               beta_ok(inputRest, fpLocalEnv)(bexpr)(res))}"
     linear_ineq_zero_beta nil))
   nil)
  (IMP_transformation_TCC1-1 nil 3756664048
   ("" (use "lt_fp_lt_r") nil nil) nil nil))
 (IMP_transformation_TCC2 0
  (IMP_transformation_TCC2-4 nil 3756752186
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (iff)
        (("" (flatten)
          (("" (hide -1)
            (("" (split -1)
              (("1" (expand "beta_minus")
                (("1" (assert)
                  (("1" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (beta_minus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (beta_plus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wellFormed? def-decl "bool" expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (beta_ok const-decl "bool" linear_ineq_zero_beta nil)
    (beta def-decl "{res: [FPBExpr, FPBExpr] |
         FORALL (nargs: nat):
           fpBExprRestriction(bexpr) AND
            wellFormed?(bexpr, nargs, size(fpLocalEnv))
            IMPLIES
            (wellFormed?(res`1, nargs, size(fpLocalEnv)) AND
              wellFormed?(res`2, nargs, size(fpLocalEnv)) AND
               beta_ok(inputRest, fpLocalEnv)(bexpr)(res))}"
     linear_ineq_zero_beta nil))
   nil)
  (IMP_transformation_TCC2-3 nil 3756732017
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (iff)
        (("" (flatten)
          (("" (hide -1)
            (("" (split -1)
              (("1" (expand "beta_plus")
                (("1" (assert)
                  (("1" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" u_local_environment nil)
    (wellFormed? def-decl "bool" expressions nil)
    (FPBExpr type-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil))
   nil)
  (IMP_transformation_TCC2-2 nil 3756664436
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (iff)
        (("" (flatten)
          (("" (hide -1)
            (("" (split -1)
              (("1" (expand "beta_minus")
                (("1" (assert)
                  (("1" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPBExpr type-decl nil expressions nil)
    (wellFormed? def-decl "bool" expressions nil)
    (size const-decl "nat" u_local_environment nil))
   nil)
  (IMP_transformation_TCC2-1 nil 3756664048 ("" (assuming-tcc) nil nil)
   nil nil))
 (IMP_transformation_TCC3 0
  (IMP_transformation_TCC3-4 nil 3756752202
   ("" (skeep)
    (("" (lemma "beta_plus_prop")
      (("" (insteep -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((beta_plus_prop formula-decl nil linear_ineq_zero_beta nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (beta_plus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (beta_minus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FtoR def-decl "RBExpr" expressions nil))
   nil)
  (IMP_transformation_TCC3-3 nil 3756732003
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (iff)
        (("" (flatten)
          (("" (hide -1)
            (("" (split -1)
              (("1" (expand "beta_minus")
                (("1" (assert)
                  (("1" (typepred "beta(inputRest,fpLocalEnv)(phi_fp)")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" u_local_environment nil)
    (wellFormed? def-decl "bool" expressions nil)
    (FPBExpr type-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil))
   nil)
  (IMP_transformation_TCC3-2 nil 3756664464
   ("" (skeep)
    (("" (lemma "beta_plus_prop")
      (("" (insteep -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (FtoR def-decl "RBExpr" expressions nil))
   nil)
  (IMP_transformation_TCC3-1 nil 3756664048 ("" (assuming-tcc) nil nil)
   nil nil))
 (IMP_transformation_TCC4 2
  (IMP_transformation_TCC4-4 nil 3756752239
   ("" (skeep)
    (("" (lemma "beta_plus_prop")
      (("" (insteep -1) (("" (assert) nil))))))
    nil)
   ((ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (FtoR def-decl "RBExpr" expressions nil))
   nil)
  (IMP_transformation_TCC4-3 nil 3756731990
   ("" (skeep)
    (("" (lemma "beta_plus_prop")
      (("" (insteep -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((FtoR def-decl "RBExpr" expressions nil)
    (RBExpr type-decl nil expressions nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (FPBExpr type-decl nil expressions nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil))
   nil)
  (IMP_transformation_TCC4-2 nil 3756664488
   ("" (skeep)
    (("" (lemma "beta_minus_prop")
      (("" (insteep -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((beta_minus_prop formula-decl nil linear_ineq_zero_beta nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Operator formal-nonempty-type-decl nil linear_ineq_zero_beta nil)
    (RealNumber formal-nonempty-type-decl nil linear_ineq_zero_beta
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     linear_ineq_zero_beta nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     linear_ineq_zero_beta nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     linear_ineq_zero_beta nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]"
     linear_ineq_zero_beta nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" linear_ineq_zero_beta
     nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" linear_ineq_zero_beta nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (fpBExprRestriction def-decl "bool" linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil linear_ineq_zero_beta nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (beta_plus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (beta_minus const-decl "FPBExpr" linear_ineq_zero_beta nil)
    (RestrictedFPBExpr type-eq-decl nil transformation nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (ValidInput type-eq-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FtoR def-decl "RBExpr" expressions nil))
   nil)
  (IMP_transformation_TCC4-1 nil 3756664048 ("" (assuming-tcc) nil nil)
   nil nil)))

