(domain_props
 (IMP_domain_TCC1 0
  (IMP_domain_TCC1-1 nil 3756641051 ("" (use "lt_fp_lt_r") nil nil)
   ((lt_fp_lt_r formula-decl nil domain_props nil)) nil))
 (propag_union 0
  (propag_union-1 nil 3732313934
   ("" (skeep)
    (("" (expand "propag" 1 1)
      (("" (expand "map")
        (("" (expand "union" 1)
          (("" (apply-extensionality)
            (("" (hide 2)
              (("" (expand "member")
                (("" (iff)
                  (("" (split 1)
                    (("1" (flatten)
                      (("1" (skeep)
                        (("1" (expand "propag")
                          (("1" (expand "map")
                            (("1" (expand "make_ceb")
                              (("1"
                                (typepred "y")
                                (("1"
                                  (expand "union")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (inst 1 "y")
                                      (("1"
                                        (expand "member")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst 2 "y")
                                      (("2"
                                        (expand "member")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "propag")
                        (("2" (expand "map")
                          (("2" (split -1)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "y")
                                (("1"
                                  (expand "union")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "member")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst 1 "y")
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((propag const-decl "{result: Domain |
         (FORALL (ceb2: (result)):
            EXISTS (ceb: (sceb)):
              ceb2 =
               make_ceb(RAnd(rexpr, rconds(ceb)),
                        FPAnd(fpexpr, fpconds(ceb)), rresult(ceb),
                        fpresult(ceb), stable?(ceb)))
          AND
          (FORALL (ceb: (sceb)):
             EXISTS (ceb2: (result)):
               ceb2 =
                make_ceb(RAnd(rexpr, rconds(ceb)),
                         FPAnd(fpexpr, fpconds(ceb)), rresult(ceb),
                         fpresult(ceb), stable?(ceb)))}" domain nil)
    (union const-decl "set" sets nil)
    (y skolem-const-decl "(scebB)" domain_props nil)
    (y skolem-const-decl "(scebA)" domain_props nil)
    (scebA skolem-const-decl "Domain
    [Operator, RealNumber, lt_r, applyFun_r, FloatingPointNumber, lt_fp,
     applyFun_fp, FtoR]" domain_props nil)
    (scebB skolem-const-decl "Domain
    [Operator, RealNumber, lt_r, applyFun_r, FloatingPointNumber, lt_fp,
     applyFun_fp, FtoR]" domain_props nil)
    (y skolem-const-decl "(union(scebA, scebB))" domain_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (union_finite_nonempty_j application-judgement "(finite_nonempty?)"
     more_set_defs "sets_aux/")
    (set type-eq-decl nil sets nil)
    (finite_nonempty? const-decl "bool" more_set_defs "sets_aux/")
    (Domain type-eq-decl nil domain nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (make_ceb const-decl "CEB" domain nil)
    (RAnd? adt-recognizer-decl "[RBExpr -> boolean]" expressions nil)
    (RAnd adt-constructor-decl "[[RBExpr, RBExpr] -> (RAnd?)]"
     expressions nil)
    (FPAnd? adt-recognizer-decl "[FPBExpr -> boolean]" expressions nil)
    (FPAnd adt-constructor-decl "[[FPBExpr, FPBExpr] -> (FPAnd?)]"
     expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CEB type-eq-decl nil domain nil)
    (RAExprDomain type-decl nil domain nil)
    (RBExpr type-decl nil expressions nil)
    (FPAExprDomain type-decl nil domain nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" domain_props nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" domain_props nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]" domain_props
     nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     domain_props nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPBExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     domain_props nil)
    (FloatingPointNumber formal-nonempty-type-decl nil domain_props
     nil)
    (RealNumber formal-nonempty-type-decl nil domain_props nil)
    (Operator formal-nonempty-type-decl nil domain_props nil)
    (map const-decl "setof[T2]" more_set_props "sets_aux/"))
   shostak))
 (propag_fpresult_inv 0
  (propag_fpresult_inv-1 nil 3732314286
   ("" (skeep)
    (("" (split 1)
      (("1" (skeep :preds? t)
        (("1" (expand "propag")
          (("1" (expand "map")
            (("1" (skeep)
              (("1" (inst 1 "y")
                (("1" (replace -1 :hide? t)
                  (("1" (expand "make_ceb") (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep :preds? t)
        (("2" (typepred "propag(sceb, rphi, fpphi)")
          (("2" (inst -3 "ceb")
            (("2" (skeep -3 :preds? t)
              (("2" (inst 1 "ceb2")
                (("2" (expand "make_ceb") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((propag const-decl "{result: Domain |
         (FORALL (ceb2: (result)):
            EXISTS (ceb: (sceb)):
              ceb2 =
               make_ceb(RAnd(rexpr, rconds(ceb)),
                        FPAnd(fpexpr, fpconds(ceb)), rresult(ceb),
                        fpresult(ceb), stable?(ceb)))
          AND
          (FORALL (ceb: (sceb)):
             EXISTS (ceb2: (result)):
               ceb2 =
                make_ceb(RAnd(rexpr, rconds(ceb)),
                         FPAnd(fpexpr, fpconds(ceb)), rresult(ceb),
                         fpresult(ceb), stable?(ceb)))}" domain nil)
    (make_ceb const-decl "CEB" domain nil)
    (Domain type-eq-decl nil domain nil)
    (finite_nonempty? const-decl "bool" more_set_defs "sets_aux/")
    (set type-eq-decl nil sets nil) (CEB type-eq-decl nil domain nil)
    (RAExprDomain type-decl nil domain nil)
    (RBExpr type-decl nil expressions nil)
    (FPAExprDomain type-decl nil domain nil)
    (applyFun_fp formal-const-decl
     "[[Operator, FloatingPointNumber, FloatingPointNumber] ->
   FloatingPointNumber]" domain_props nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" domain_props nil)
    (applyFun_r formal-const-decl
     "[[Operator, RealNumber, RealNumber] -> RealNumber]" domain_props
     nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     domain_props nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPBExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     domain_props nil)
    (FloatingPointNumber formal-nonempty-type-decl nil domain_props
     nil)
    (RealNumber formal-nonempty-type-decl nil domain_props nil)
    (Operator formal-nonempty-type-decl nil domain_props nil)
    (map const-decl "setof[T2]" more_set_props "sets_aux/")
    (FPAnd adt-constructor-decl "[[FPBExpr, FPBExpr] -> (FPAnd?)]"
     expressions nil)
    (FPAnd? adt-recognizer-decl "[FPBExpr -> boolean]" expressions nil)
    (RAnd adt-constructor-decl "[[RBExpr, RBExpr] -> (RAnd?)]"
     expressions nil)
    (RAnd? adt-recognizer-decl "[RBExpr -> boolean]" expressions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)))

