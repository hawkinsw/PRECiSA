(expressions_semantics
 (IMP_le_r_fp_TCC1 0
  (IMP_le_r_fp_TCC1-1 nil 3756638612 ("" (use "lt_fp_lt_r") nil nil)
   ((lt_fp_lt_r formula-decl nil expressions_semantics nil)) nil))
 (induced_real_env?_not_empty 0
  (induced_real_env?_not_empty-1 nil 3732015487
   ("" (skeep) (("" (inst 1 "induced_real_env(fpEnv)") nil nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (REnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics
     nil))
   shostak))
 (InducedREnv_TCC1 0
  (InducedREnv_TCC1-1 nil 3732014262 ("" (existence-tcc) nil nil)
   ((induced_real_env?_not_empty formula-decl nil expressions_semantics
     nil))
   nil))
 (get_fple_TCC1 0
  (get_fple_TCC1-1 nil 3757112257
   ("" (skeep :preds? t)
    ((""
      (use "fp_local_env.local_definitions_are_evaluable_in_smaller_env")
      (("" (assert)
        (("" (expand "shrink_fple") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((local_definitions_are_evaluable_in_smaller_env formula-decl nil
     u_local_environment nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" u_local_environment nil)
    (< const-decl "bool" reals nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (shrink_fple const-decl "FPLocalEnvironment" expressions_semantics
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (doublelessp_swf_fpaexpr 0
  (doublelessp_swf_fpaexpr-1 nil 3757113332
   ("" (use "fp_local_env.doublelessp_swf") nil nil)
   ((<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (doublelessp_swf formula-decl nil u_local_environment nil))
   shostak))
 (evaluable_in_fpaexpr_def_op 0
  (evaluable_in_fpaexpr_def_op-1 nil 3754151298
   ("" (skeep)
    (("" (iff)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "bounded_by?")
            (("1" (split 1)
              (("1" (skeep 1 :preds? t)
                (("1" (inst -3 "v") (("1" (grind) nil nil)) nil)) nil)
               ("2" (skeep 1 :preds? t)
                (("2" (inst -3 "v") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "bounded_by?")
            (("2" (skeep :preds? t)
              (("2" (expand "<<" -2)
                (("2" (split -2)
                  (("1" (inst -3 "v") (("1" (grind) nil nil)) nil)
                   ("2" (inst -3 "v") (("2" (grind) nil nil)) nil)
                   ("3" (inst -4 "v") (("3" (grind) nil nil)) nil)
                   ("4" (inst -4 "v") (("4" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v skolem-const-decl
     "{v: (FPVariable?) | v << FPOperator(op, expr1, expr2)}"
     expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (FPOperator? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPOperator adt-constructor-decl
     "[[Operator, FPAExpr, FPAExpr] -> (FPOperator?)]" expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expr2 skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (op skolem-const-decl "Operator" expressions_semantics nil)
    (v skolem-const-decl "{v: (FPVariable?) | v = expr1 OR v << expr1}"
     expressions_semantics nil)
    (expr1 skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (v skolem-const-decl "{v: (FPVariable?) | v = expr2 OR v << expr2}"
     expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   shostak))
 (evaluable_in_raexpr_def_op 0
  (evaluable_in_raexpr_def_op-1 nil 3754224952
   ("" (skeep)
    (("" (iff)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "bounded_by?")
            (("1" (split 1)
              (("1" (skeep 1 :preds? t)
                (("1" (inst -3 "v") (("1" (grind) nil nil)) nil)) nil)
               ("2" (skeep 1 :preds? t)
                (("2" (inst -3 "v") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "bounded_by?")
            (("2" (skeep :preds? t)
              (("2" (expand "<<" -2)
                (("2" (split -2)
                  (("1" (inst -3 "v") (("1" (grind) nil nil)) nil)
                   ("2" (inst -3 "v") (("2" (grind) nil nil)) nil)
                   ("3" (inst -4 "v") (("3" (grind) nil nil)) nil)
                   ("4" (inst -4 "v") (("4" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v skolem-const-decl
     "{v: (RVariable?) | v << ROperator(op, expr1, expr2)}"
     expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (ROperator? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (ROperator adt-constructor-decl
     "[[Operator, RAExpr, RAExpr] -> (ROperator?)]" expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expr2 skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (op skolem-const-decl "Operator" expressions_semantics nil)
    (v skolem-const-decl "{v: (RVariable?) | v = expr1 OR v << expr1}"
     expressions_semantics nil)
    (expr1 skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (v skolem-const-decl "{v: (RVariable?) | v = expr2 OR v << expr2}"
     expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (evaluable_in_fpaexpr_wellformed_eq 0
  (evaluable_in_fpaexpr_wellformed_eq-1 nil 3755167703
   ("" (skeep)
    (("" (induct "aexpr")
      (("1" (skolem 1 "cnt")
        (("1" (expand "bounded_by?")
          (("1" (expand "wellFormed?") (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 "vidx")
        (("2" (expand "wellFormed?")
          (("2" (expand "bounded_by?")
            (("2" (grind)
              (("2" (inst -1 "FPVariable(vidx)")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skolem 1 "pidx")
        (("3" (expand "wellFormed?")
          (("3" (iff)
            (("3" (split 1)
              (("1" (flatten)
                (("1" (inst 1 "pidx+1") (("1" (assert) nil nil)) nil))
                nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("op" "expr1" "expr2"))
        (("4" (flatten)
          (("4" (rewrite "evaluable_in_fpaexpr_def_op")
            (("4" (iff 1)
              (("4" (split 1)
                (("1" (flatten)
                  (("1" (replace -1 :hide? t)
                    (("1" (replace -1 :hide? t)
                      (("1" (skolem -1 "nargs1")
                        (("1" (skolem -2 "nargs2")
                          (("1"
                            (use "wellFormed?_fpaexpr_monotonocity")
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "wellFormed?_fpaexpr_monotonocity")
                                (("1"
                                  (inst
                                   -1
                                   "expr2"
                                   "nargs2"
                                   "size(env)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "max(nargs1,nargs2)"
                                       "size(env)")
                                      (("1"
                                        (inst
                                         -2
                                         "max(nargs1,nargs2)"
                                         "size(env)")
                                        (("1"
                                          (use "wellFormed?_expr_op")
                                          (("1"
                                            (assert)
                                            (("1" (inst? 1) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "max")
                                          (("2"
                                            (lift-if 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "max")
                                        (("2"
                                          (lift-if 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skolem -1 "nargs")
                    (("2" (rewrite "wellFormed?_expr_op")
                      (("2" (flatten)
                        (("2" (replace -3 :hide? t)
                          (("2" (replace -3 :hide? t)
                            (("2" (split 1)
                              (("1" (inst?) nil nil)
                               ("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (wellFormed? inductive-decl "bool" expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (FPAExpr_induction formula-decl nil expressions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FPConstant? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPConstant adt-constructor-decl "[FPNumber -> (FPConstant?)]"
     expressions nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (FPVariable adt-constructor-decl "[DeBruijnIndex -> (FPVariable?)]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (FPParameter adt-constructor-decl
     "[ParameterIndex -> (FPParameter?)]" expressions nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nargs1 skolem-const-decl "nat" expressions_semantics nil)
    (nargs2 skolem-const-decl "nat" expressions_semantics nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (wellFormed?_expr_op formula-decl nil expressions nil)
    (wellFormed?_fpaexpr_monotonocity formula-decl nil expressions nil)
    (evaluable_in_fpaexpr_def_op formula-decl nil expressions_semantics
     nil))
   shostak))
 (evaluable_in_raexpr_wellformed_eq 0
  (evaluable_in_raexpr_wellformed_eq-1 nil 3755168743
   ("" (skeep)
    (("" (induct "aexpr")
      (("1" (skolem 1 "cnt")
        (("1" (expand "bounded_by?")
          (("1" (expand "wellFormed?_RAExpr") (("1" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 "vidx")
        (("2" (expand "wellFormed?_RAExpr")
          (("2" (expand "bounded_by?")
            (("2" (grind)
              (("2" (inst -1 "RVariable(vidx)")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skolem 1 "pidx")
        (("3" (expand "wellFormed?_RAExpr")
          (("3" (iff)
            (("3" (split 1)
              (("1" (flatten)
                (("1" (inst 1 "pidx+1") (("1" (assert) nil nil)) nil))
                nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("op" "expr1" "expr2"))
        (("4" (flatten)
          (("4" (rewrite "evaluable_in_raexpr_def_op")
            (("4" (iff 1)
              (("4" (split 1)
                (("1" (flatten)
                  (("1" (replace -1 :hide? t)
                    (("1" (replace -1 :hide? t)
                      (("1" (skolem -1 "nargs1")
                        (("1" (skolem -2 "nargs2")
                          (("1" (use "wellFormed?_RAExpr_monotonicity")
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "wellFormed?_RAExpr_monotonicity")
                                (("1"
                                  (inst
                                   -1
                                   "expr2"
                                   "nargs2"
                                   "size(env)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "max(nargs1,nargs2)"
                                       "size(env)")
                                      (("1"
                                        (inst
                                         -2
                                         "max(nargs1,nargs2)"
                                         "size(env)")
                                        (("1"
                                          (use "wellFormed?_rexpr_op")
                                          (("1"
                                            (assert)
                                            (("1" (inst? 1) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "max")
                                          (("2"
                                            (lift-if 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "max")
                                        (("2"
                                          (lift-if 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skolem -1 "nargs")
                    (("2" (rewrite "wellFormed?_rexpr_op")
                      (("2" (flatten)
                        (("2" (replace -3 :hide? t)
                          (("2" (replace -3 :hide? t)
                            (("2" (split 1)
                              (("1" (inst?) nil nil)
                               ("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (wellFormed?_RAExpr inductive-decl "bool" expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RAExpr_induction formula-decl nil expressions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (RConstant? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RConstant adt-constructor-decl "[RNumber -> (RConstant?)]"
     expressions nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (RVariable adt-constructor-decl "[DeBruijnIndex -> (RVariable?)]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RParameter adt-constructor-decl
     "[ParameterIndex -> (RParameter?)]" expressions nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nargs1 skolem-const-decl "nat" expressions_semantics nil)
    (nargs2 skolem-const-decl "nat" expressions_semantics nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (wellFormed?_rexpr_op formula-decl nil expressions nil)
    (wellFormed?_RAExpr_monotonicity formula-decl nil expressions nil)
    (evaluable_in_raexpr_def_op formula-decl nil expressions_semantics
     nil))
   nil))
 (no_local_vars_r_evaluable_in 0
  (no_local_vars_r_evaluable_in-1 nil 3756383613
   ("" (skeep 1 :preds? t)
    (("" (expand "NoLocalVars?")
      (("" (expand "bounded_by?")
        (("" (skeep 1 :preds? t)
          (("" (inst -3 "v")
            (("" (rewrite "appears?_rexpr_subterm")
              (("" (rewrite "subterm_doublelessp") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NoLocalVars? const-decl "bool" expressions nil)
    (appears?_rexpr_subterm formula-decl nil expressions nil)
    (subterm_doublelessp formula-decl nil expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (no_local_vars_evaluable_in 0
  (no_local_vars_evaluable_in-2 nil 3756490866
   ("" (skeep 1 :preds? t)
    (("" (expand "NoLocalVars?")
      (("" (expand "bounded_by?")
        (("" (skeep 1 :preds? t)
          (("" (inst -3 "v")
            (("" (rewrite "appears?_expr_subterm")
              (("" (rewrite "fpaexpr_subterm_doublelessp") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NoLocalVars? const-decl "bool" expressions nil)
    (appears?_expr_subterm formula-decl nil expressions nil)
    (fpaexpr_subterm_doublelessp formula-decl nil expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil)
  (no_local_vars_evaluable_in-1 nil 3756490764
   ("" (skeep 1 :preds? t)
    (("" (expand "NoLocalVars?")
      (("" (expand "bounded_by?")
        (("" (skeep 1 :preds? t)
          (("" (inst -3 "v")
            (("" (rewrite "appears?_expr_subterm")
              (("" (rewrite "subterm_doublelessp") nil))))))))))))
    nil)
   nil nil))
 (IMP_u_local_environment_trans_TCC1 0
  (IMP_u_local_environment_trans_TCC1-1 nil 3755878215
   ("" (skeep* :preds? t)
    (("" (typepred "FtoR(local)") (("" (propax) nil nil)) nil)) nil)
   ((FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FPAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ftor_fpvar_rvar_j application-judgement "(RVariable?)"
     expressions_semantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (IMP_u_local_environment_trans_TCC2 0
  (IMP_u_local_environment_trans_TCC2-1 nil 3755878215
   ("" (induct-and-simplify "expr") nil nil)
   ((FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (FPAExpr_induction formula-decl nil expressions nil))
   nil))
 (IMP_u_local_environment_trans_TCC3 0
  (IMP_u_local_environment_trans_TCC3-1 nil 3755878215
   ("" (induct-and-simplify "expr") (("" (grind) nil nil)) nil)
   ((fpVarIndex const-decl "nat" expressions_semantics nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil))
   nil))
 (IMP_u_local_environment_trans_TCC4 0
  (IMP_u_local_environment_trans_TCC4-1 nil 3755878215
   ("" (use "ftor_var") nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (ftor_var formula-decl nil expressions nil))
   nil))
 (FtoR_TCC1 0
  (FtoR_TCC1-1 nil 3752336025 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (size const-decl "nat" u_local_environment nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (evaluable_in_expr_FtoR 0
  (evaluable_in_expr_FtoR-1 nil 3755008030
   ("" (skeep)
    (("" (expand "bounded_by?")
      (("" (skeep :preds? t)
        (("" (split -2)
          (("1" (case "FPVariable?(aexpr)")
            (("1" (assert)
              (("1" (hide -1)
                (("1" (replace -1)
                  (("1" (inst -4 "aexpr")
                    (("1" (replace -3 :hide? t)
                      (("1"
                        (case "fpVarIndex(aexpr) = rVarIndex(FtoR(aexpr))")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (expand "FtoR" 1)
                            (("2" (assert)
                              (("2"
                                (expand "fpVarIndex")
                                (("2"
                                  (expand "rVarIndex")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1 :hide? t)
              (("2" (hide-all-but (-1 1))
                (("2" (expand "FtoR")
                  (("2" (lift-if -1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (case "EXISTS(local:(FPVariable?)): v=FtoR(local) AND local << aexpr")
            (("1" (skeep -1 :preds? t)
              (("1" (inst -7 "local")
                (("1" (replace -2)
                  (("1"
                    (case "fpVarIndex(local) = rVarIndex(FtoR(local))")
                    (("1" (assert) nil nil)
                     ("2" (expand "FtoR" 1)
                      (("2" (expand "fpVarIndex")
                        (("2" (expand "rVarIndex")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (rewrite "ftor_var") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_by? const-decl "bool" u_local_environment nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (ftor_var formula-decl nil expressions nil)
    (aexpr skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (local skolem-const-decl "(FPVariable?)" expressions_semantics nil)
    (ftor_fpvar_rvar_j application-judgement "(RVariable?)"
     expressions_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil))
   shostak))
 (ftor_shrink_TCC1 0
  (ftor_shrink_TCC1-1 nil 3756490730 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (size const-decl "nat" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FtoR const-decl "{rle: RLocalEnvironment |
         size(fle) = size(rle) AND
          (FORALL (i: below(size(rle))): get(rle)(i) = FtoR(get(fle)(i)))}"
     expressions_semantics nil))
   nil))
 (ftor_shrink 0
  (ftor_shrink-1 nil 3756561756
   ("" (skeep :but "i")
    (("" (expand "FtoR")
      (("" (skeep :preds? t)
        (("" (rewrite "u_local_environment_extensionality")
          (("" (split 1)
            (("1" (typepred "translate(shrink(fpLocalEnv, i))")
              (("1" (replace -1 :hide? t :dir rl)
                (("1" (use "fp_local_env.size_shrink")
                  (("1" (replace -1 :hide? t)
                    (("1" (use "r_local_env.size_shrink")
                      (("1" (replace -1 :hide? t)
                        (("1" (typepred "translate(fpLocalEnv)")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep :preds? t)
              (("2" (typepred "translate(shrink(fpLocalEnv, i))")
                (("2" (inst -2 "i_1")
                  (("2" (replace -2 :hide? t)
                    (("2" (use "fp_local_env.get_shrink")
                      (("2" (replace -1 :hide? t :dir rl)
                        (("2" (use "r_local_env.get_shrink")
                          (("2" (replace -1 :hide? t :dir rl)
                            (("2" (typepred "translate(fpLocalEnv)")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FtoR const-decl "{rle: RLocalEnvironment |
         size(fle) = size(rle) AND
          (FORALL (i: below(size(rle))): get(rle)(i) = FtoR(get(fle)(i)))}"
     expressions_semantics nil)
    (u_local_environment_extensionality formula-decl nil
     u_local_environment nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (size const-decl "nat" u_local_environment nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (get const-decl "T" u_local_environment nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (translate const-decl "(LAMBDA (rle: ule2.LocalEnvironment):
   size(fle) = size(rle) AND
    (FORALL (i: below(size(rle))): get(rle)(i) = t1ToT2(get(fle)(i))))"
     u_local_environment_trans nil)
    (shrink const-decl "LocalEnvironment" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (get_shrink formula-decl nil u_local_environment nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (size_shrink formula-decl nil u_local_environment nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (ftor_get 0
  (ftor_get-1 nil 3756563143
   ("" (skeep :but "i")
    (("" (expand "FtoR" 1 2)
      (("" (skeep :preds? t)
        (("" (typepred "translate(fpLocalEnv)")
          (("" (inst -2 "i") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((FtoR const-decl "{rle: RLocalEnvironment |
         size(fle) = size(rle) AND
          (FORALL (i: below(size(rle))): get(rle)(i) = FtoR(get(fle)(i)))}"
     expressions_semantics nil)
    (translate const-decl "(LAMBDA (rle: ule2.LocalEnvironment):
   size(fle) = size(rle) AND
    (FORALL (i: below(size(rle))): get(rle)(i) = t1ToT2(get(fle)(i))))"
     u_local_environment_trans nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (get const-decl "T" u_local_environment nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (size const-decl "nat" u_local_environment nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (FtoR_TCC2 0
  (FtoR_TCC2-1 nil 3754151120 ("" (existence-tcc) nil nil) nil nil))
 (valid_input_ftor 0
  (valid_input_ftor-1 nil 3756213406
   ("" (skeep 1)
    (("" (expand "FtoR")
      (("" (expand "rValidInput?")
        (("" (expand "validInput?")
          (("" (skeep 1)
            (("" (inst -1 "i_1")
              (("" (flatten)
                (("" (expand "FtoR")
                  (("" (use "le_fp_le_r")
                    (("" (assert)
                      (("" (lemma "le_fp_le_r")
                        (("" (inst? -1 :where 1)
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FtoR const-decl "InducedREnv(fpEnv)" expressions_semantics nil)
    (FtoR const-decl "RInputRestriction" expressions_semantics nil)
    (validInput? const-decl "bool" expressions_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (FtoR const-decl "RRange" expressions_semantics nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (InputRestriction type-eq-decl nil expressions_semantics nil)
    (Range type-eq-decl nil expressions_semantics nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (le_fp_le_r formula-decl nil le_r_fp nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])"
     expressions_semantics nil)
    (lt_fp formal-const-decl
     "(strict_total_order?[FloatingPointNumber])" expressions_semantics
     nil)
    (rValidInput? const-decl "bool" expressions_semantics nil))
   shostak))
 (fp_eval_termination_1_TCC1 0
  (fp_eval_termination_1_TCC1-1 nil 3752413356
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FPVariable adt-constructor-decl "[DeBruijnIndex -> (FPVariable?)]"
     expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (fp_eval_termination_1 0
  (fp_eval_termination_1-1 nil 3754134660
   ("" (skeep :preds? t)
    (("" (expand "<<")
      (("" (use "fp_local_env.size_shrink")
        (("" (assert)
          (("" (expand "bounded_by?")
            (("" (inst -2 "FPVariable(v)")
              (("" (assert)
                (("" (expand "fpVarIndex") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" u_local_environment nil)
    (< const-decl "bool" reals nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (size_shrink formula-decl nil u_local_environment nil))
   shostak))
 (eval_TCC1 0
  (eval_TCC1-1 nil 3743954556
   ("" (use "fp_local_env.doublelessp_swf")
    (("" (expand "strict_well_founded?")
      (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (doublelessp_swf formula-decl nil u_local_environment nil))
   nil))
 (eval_TCC2 0
  (eval_TCC2-1 nil 3743954556
   ("" (skeep :preds? t) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (local_definitions_are_evaluable_in_smaller_env formula-decl nil
     u_local_environment nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions
     nil))
   nil))
 (eval_TCC3 0
  (eval_TCC3-1 nil 3743954556
   ("" (skeep :preds? t)
    (("" (expand "<<")
      (("" (flatten)
        ((""
          (use "fp_local_env.local_definitions_are_evaluable_in_smaller_env")
          (("" (expand "bounded_by?" -2)
            (("" (inst -2 "aexpr")
              (("1" (replace -4 :hide? t)
                (("1" (expand "fpVarIndex")
                  (("1" (rewrite "size_shrink") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil)
    (local_definitions_are_evaluable_in_smaller_env formula-decl nil
     u_local_environment nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" u_local_environment nil)
    (< const-decl "bool" reals nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (fpLocalEnv skolem-const-decl "FPLocalEnvironment"
     expressions_semantics nil)
    (aexpr skolem-const-decl
     "(bounded_by?[FPAExpr, FPVariable?, fpVarIndex, <<](fpLocalEnv))"
     expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size_shrink formula-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (eval_TCC4 0
  (eval_TCC4-1 nil 3743954556 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FPOperator adt-constructor-decl
     "[[Operator, FPAExpr, FPAExpr] -> (FPOperator?)]" expressions nil)
    (FPOperator? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (arg2!1 skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (v!2 skolem-const-decl
     "{v: (FPVariable?) | v = arg2!1 OR v << arg2!1}"
     expressions_semantics nil)
    (arg1!1 skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil))
   nil))
 (eval_TCC5 0
  (eval_TCC5-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil))
   nil))
 (eval_TCC6 0
  (eval_TCC6-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (arg2!1 skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (v!1 skolem-const-decl
     "{v: (FPVariable?) | v = arg1!1 OR v << arg1!1}"
     expressions_semantics nil)
    (arg1!1 skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (FPOperator? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPOperator adt-constructor-decl
     "[[Operator, FPAExpr, FPAExpr] -> (FPOperator?)]" expressions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil))
   nil))
 (eval_TCC7 0
  (eval_TCC7-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil))
   nil))
 (eval_NoLocalVars?_TCC1 0
  (eval_NoLocalVars?_TCC1-1 nil 3756632437
   ("" (use "no_local_vars_evaluable_in") (("" (grind) nil nil)) nil)
   ((bounded_by? const-decl "bool" u_local_environment nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (appears? const-decl "bool" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (appearsFree? def-decl "bool" expressions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (no_local_vars_evaluable_in formula-decl nil expressions_semantics
     nil))
   nil))
 (eval_NoLocalVars?_TCC2 0
  (eval_NoLocalVars?_TCC2-1 nil 3756632437
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (appears? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil))
   nil))
 (eval_NoLocalVars?_TCC3 0
  (eval_NoLocalVars?_TCC3-1 nil 3756632437
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (appears? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil))
   nil))
 (eval_NoLocalVars?_TCC4 0
  (eval_NoLocalVars?_TCC4-1 nil 3756632437
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (appears? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (eval_NoLocalVars?_TCC5 0
  (eval_NoLocalVars?_TCC5-1 nil 3756632437
   ("" (skeep :preds? t)
    (("" (hide 1)
      (("" (expand "NoLocalVars?") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (appears? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil))
   nil))
 (eval_NoLocalVars?_TCC6 0
  (eval_NoLocalVars?_TCC6-1 nil 3756632437
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (appears? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (eval_NoLocalVars?_TCC7 0
  (eval_NoLocalVars?_TCC7-1 nil 3756632437
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (appears? const-decl "bool" expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil))
   nil))
 (eval_NoLocalVars?_TCC8 0
  (eval_NoLocalVars?_TCC8-1 nil 3756632437
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (appears? const-decl "bool" expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil))
   nil))
 (eval_NoLocalVars?_TCC9 1
  (eval_NoLocalVars?_TCC9-2 nil 3756634312
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_fpaexpr_def_op") (("" (assert) nil)))) nil)
   nil nil)
  (eval_NoLocalVars?_TCC9-1 nil 3756632437
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (eval def-decl "FPNumber" expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPEnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FPNumber nonempty-type-eq-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil))
   nil))
 (r_eval_termination_1_TCC1 0
  (r_eval_termination_1_TCC1-1 nil 3752413356
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (RVariable adt-constructor-decl "[DeBruijnIndex -> (RVariable?)]"
     expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (r_eval_termination_1 0
  (r_eval_termination_1-1 nil 3755518185
   ("" (skolem 1 ("rLocalEnv" "aexpr" "v"))
    (("" (expand "<<")
      (("" (use "r_local_env.size_shrink") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" u_local_environment nil)
    (below type-eq-decl nil naturalnumbers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (size_shrink formula-decl nil u_local_environment nil))
   nil))
 (eval_TCC8 0
  (eval_TCC8-2 nil 3754226855
   ("" (use "r_local_env.doublelessp_swf")
    (("" (expand "strict_well_founded?")
      (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (doublelessp_swf formula-decl nil u_local_environment nil))
   nil)
  (eval_TCC8-1 nil 3752405688
   ("" (skeep :preds? t) (("" (assert) nil nil)) nil) nil nil))
 (eval_TCC9 0
  (eval_TCC9-2 nil 3754226798
   ("" (skeep :but (("aexpr" "aexpr_")) :preds? t)
    (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (local_definitions_are_evaluable_in_smaller_env formula-decl nil
     u_local_environment nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil))
   nil)
  (eval_TCC9-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((ROperator adt-constructor-decl
     "[[Operator, RAExpr, RAExpr] -> (ROperator?)]" expressions nil)
    (ROperator? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil))
   nil))
 (eval_TCC10 0
  (eval_TCC10-2 nil 3754226888
   ("" (skeep :but (("aexpr" "aexpr_")) :preds? t)
    (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r_eval_termination_1 formula-decl nil expressions_semantics nil))
   nil)
  (eval_TCC10-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil))
   nil))
 (eval_TCC11 0
  (eval_TCC11-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ROperator adt-constructor-decl
     "[[Operator, RAExpr, RAExpr] -> (ROperator?)]" expressions nil)
    (ROperator? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (arg2!1 skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (v!2 skolem-const-decl
     "{v: (RVariable?) | v = arg2!1 OR v << arg2!1}"
     expressions_semantics nil)
    (arg1!1 skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil))
   nil))
 (eval_TCC12 0
  (eval_TCC12-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil))
   nil))
 (eval_TCC13 0
  (eval_TCC13-2 nil 3754226963 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (arg2!1 skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (v!1 skolem-const-decl
     "{v: (RVariable?) | v = arg1!1 OR v << arg1!1}"
     expressions_semantics nil)
    (arg1!1 skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (ROperator? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (ROperator adt-constructor-decl
     "[[Operator, RAExpr, RAExpr] -> (ROperator?)]" expressions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil))
   nil)
  (eval_TCC13-1 nil 3754160040 ("" (subtype-tcc) nil nil) nil nil))
 (eval_TCC14 0
  (eval_TCC14-1 nil 3754160040 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment nil))
   nil))
 (no_local_vars_eval_eq_TCC1 0
  (no_local_vars_eval_eq_TCC1-1 nil 3756383118
   ("" (skeep) (("" (use "no_local_vars_r_evaluable_in") nil nil)) nil)
   ((rexpr skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (no_local_vars_r_evaluable_in formula-decl nil
     expressions_semantics nil))
   nil))
 (no_local_vars_eval_eq 0
  (no_local_vars_eval_eq-2 nil 3756383644
   ("" (skeep 1 :but "rexpr")
    (("" (induct "rexpr")
      (("1" (grind) nil nil)
       ("2" (skeep 1)
        (("2" (expand "NoLocalVars?")
          (("2" (inst -1 "RVariable(RVariable1_var)")
            (("2" (expand "appears?") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil)
       ("4" (skolem 1 ("op" "rexpr1" "rexpr2"))
        (("4" (flatten)
          (("4" (split -1)
            (("1" (split -2)
              (("1" (expand "eval" 1) (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but (-2 1))
                (("2" (expand "NoLocalVars?")
                  (("2" (skeep)
                    (("2" (inst -2 "rlocal") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-2 1))
              (("2" (expand "NoLocalVars?")
                (("2" (skeep)
                  (("2" (inst -2 "rlocal") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (rewrite "no_local_vars_r_evaluable_in") nil nil)) nil)
       ("6" (skeep 1)
        (("6" (rewrite "no_local_vars_r_evaluable_in") nil nil)) nil))
      nil))
    nil)
   ((rLocalEnv1 skolem-const-decl "RLocalEnvironment"
     expressions_semantics nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (rLocalEnv2 skolem-const-decl "RLocalEnvironment"
     expressions_semantics nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (REnvironment nonempty-type-eq-decl nil expressions_semantics nil)
    (eval def-decl "RNumber" expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RAExpr_induction formula-decl nil expressions nil)
    (appears? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RVariable adt-constructor-decl "[DeBruijnIndex -> (RVariable?)]"
     expressions nil)
    (no_local_vars_r_evaluable_in formula-decl nil
     expressions_semantics nil))
   nil)
  (no_local_vars_eval_eq-1 nil 3756383228
   ("" (skeep 1 :but "rexpr")
    (("" (induct "rexpr")
      (("1" (grind) nil nil)
       ("2" (skeep 1)
        (("2" (expand "NoLocalVars?")
          (("2" (inst -1 "RVariable(RVariable1_var)")
            (("2" (expand "appears?") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil)
       ("4" (skolem 1 ("op" "rexpr1" "rexpr2"))
        (("4" (flatten)
          (("4" (split -1)
            (("1" (split -2)
              (("1" (expand "eval" 1) (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but (-2 1))
                (("2" (expand "NoLocalVars?")
                  (("2" (skeep)
                    (("2" (inst -2 "rlocal") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-2 1))
              (("2" (expand "NoLocalVars?")
                (("2" (skeep)
                  (("2" (inst -2 "rlocal") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (rewrite "no_local_var_r_evaluable_in") nil nil)) nil)
       ("6" (skeep 1)
        (("6" (rewrite "no_local_var_r_evaluable_in") nil nil)) nil))
      nil))
    nil)
   ((bounded_by? const-decl "bool" u_local_environment nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (RNumber nonempty-type-eq-decl nil expressions nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (RAExpr_induction formula-decl nil expressions nil)
    (RVariable adt-constructor-decl "[DeBruijnIndex -> (RVariable?)]"
     expressions nil))
   shostak))
 (bounded_by?_TCC1 0
  (bounded_by?_TCC1-1 nil 3753113185 ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (bounded_by?_TCC2 0
  (bounded_by?_TCC2-1 nil 3753113185 ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (bounded_by?_TCC3 0
  (bounded_by?_TCC3-1 nil 3753113185 ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (evaluable_in_and 0
  (evaluable_in_and-1 nil 3753112672 ("" (grind) nil nil)
   ((bounded_by? def-decl "bool" expressions_semantics nil)) shostak))
 (evaluable_in_not 0
  (evaluable_in_not-1 nil 3753113277 ("" (grind) nil nil)
   ((bounded_by? def-decl "bool" expressions_semantics nil)) shostak))
 (evaluable_in_lt 0
  (evaluable_in_lt-1 nil 3753113282 ("" (grind) nil nil)
   ((fpVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (bounded_by? def-decl "bool" expressions_semantics nil))
   shostak))
 (evaluable_in_wellformed_eq 0
  (evaluable_in_wellformed_eq-1 nil 3753112198
   ("" (skeep)
    (("" (induct "fpbexpr")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skolem 1 "subexpr")
        (("3" (flatten)
          (("3" (expand "wellFormed?" 1)
            (("3" (replace -1 :hide? t :dir rl)
              (("3" (use "evaluable_in_not") nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("e1" "e2"))
        (("4" (flatten)
          (("4" (use "evaluable_in_and")
            (("4" (replace -1 :hide? t)
              (("4" (replace -1 :hide? t)
                (("4" (replace -1 :hide? t)
                  (("4" (iff)
                    (("4" (split 1)
                      (("1" (flatten)
                        (("1" (skolem -1 "n1")
                          (("1" (skolem -2 "n2")
                            (("1" (inst 1 "max(n1,n2)")
                              (("1"
                                (expand "wellFormed?" 1)
                                (("1"
                                  (use "wellFormed?_motonocity")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma
                                         "wellFormed?_motonocity")
                                        (("1"
                                          (inst
                                           -1
                                           "e2"
                                           "n2"
                                           "size(env)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -1
                                               "max(n1,n2)"
                                               "size(env)")
                                              (("1"
                                                (inst
                                                 -2
                                                 "max(n1,n2)"
                                                 "size(env)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep -1)
                          (("2" (expand "wellFormed?" -1)
                            (("2" (flatten)
                              (("2"
                                (split 1)
                                (("1" (inst 1 "n") nil nil)
                                 ("2" (inst 1 "n") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skolem 1 ("a1" "a2"))
        (("5" (use "evaluable_in_lt")
          (("5" (replace -1 :hide? t)
            (("5" (lemma "evaluable_in_fpaexpr_wellformed_eq")
              (("5" (inst -1 "env" "a1")
                (("5" (replace -1 :hide? t)
                  (("5" (lemma "evaluable_in_fpaexpr_wellformed_eq")
                    (("5" (inst -1 "env" "a2")
                      (("5" (replace -1 :hide? t)
                        (("5" (iff)
                          (("5" (split 1)
                            (("1" (flatten)
                              (("1"
                                (skolem -1 "n1")
                                (("1"
                                  (skolem -2 "n2")
                                  (("1"
                                    (inst 1 "max(n1,n2)")
                                    (("1"
                                      (expand "wellFormed?" 1)
                                      (("1"
                                        (lemma
                                         "wellFormed?_fpaexpr_monotonocity")
                                        (("1"
                                          (inst
                                           -1
                                           "a1"
                                           "n1"
                                           "size(env)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wellFormed?_fpaexpr_monotonocity")
                                              (("1"
                                                (inst
                                                 -1
                                                 "a2"
                                                 "n2"
                                                 "size(env)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "max(n1,n2)"
                                                     "size(env)")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "max(n1,n2)"
                                                       "size(env)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "wellFormed?" -1)
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (split 1)
                                    (("1" (inst 1 "n") nil nil)
                                     ("2" (inst 1 "n") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (wellFormed? def-decl "bool" expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (FPBExpr_induction formula-decl nil expressions nil)
    (evaluable_in_not formula-decl nil expressions_semantics nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wellFormed?_motonocity formula-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (evaluable_in_and formula-decl nil expressions_semantics nil)
    (evaluable_in_lt formula-decl nil expressions_semantics nil)
    (evaluable_in_fpaexpr_wellformed_eq formula-decl nil
     expressions_semantics nil)
    (wellFormed?_fpaexpr_monotonocity formula-decl nil expressions
     nil))
   shostak))
 (evaluable_subterm_fp 0
  (evaluable_subterm_fp-1 nil 3753536908
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skolem 1 "form")
        (("3" (flatten)
          (("3" (expand "subterm" -2)
            (("3" (split -2)
              (("1" (grind) nil nil)
               ("2" (split -2)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("form1" "form2"))
        (("4" (flatten)
          (("4" (expand "subterm" -3)
            (("4" (split -3)
              (("1" (grind) nil nil)
               ("2" (split -2)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (use "evaluable_in_and") (("3" (assert) nil nil))
                  nil))
                nil)
               ("3" (split -3)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (use "evaluable_in_and") (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skolem 1 ("e1" "e2"))
        (("5" (flatten)
          (("5" (expand "subterm" -1)
            (("5" (replace -1 :hide? t) (("5" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (FPBExpr_induction formula-decl nil expressions nil)
    (evaluable_in_and formula-decl nil expressions_semantics nil))
   nil))
 (evaluable_and_fp 0
  (evaluable_and_fp-1 nil 3755427742
   ("" (skeep)
    (("" (use "evaluable_in_and") (("" (assert) nil nil)) nil)) nil)
   ((evaluable_in_and formula-decl nil expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil))
   shostak))
 (evaluable_not_fp 0
  (evaluable_not_fp-1 nil 3755427763
   ("" (skeep)
    (("" (use "evaluable_in_not") (("" (assert) nil nil)) nil)) nil)
   ((evaluable_in_not formula-decl nil expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil))
   shostak))
 (val_TCC1 0
  (val_TCC1-1 nil 3731863387 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil))
   nil))
 (val_TCC2 0
  (val_TCC2-1 nil 3731863387 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (val_TCC3 0
  (val_TCC3-1 nil 3731863387 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil))
   nil))
 (val_TCC4 0
  (val_TCC4-1 nil 3731863387 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (val_TCC5 0
  (val_TCC5-1 nil 3731863387 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil))
   nil))
 (val_TCC6 0
  (val_TCC6-1 nil 3731863387 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (val_TCC7 0
  (val_TCC7-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (val_TCC8 0
  (val_TCC8-1 nil 3752405688 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FPEvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (expr1!1 skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (v!1 skolem-const-decl
     "{v: (FPVariable?) | v = expr2!1 OR v << expr2!1}"
     expressions_semantics nil)
    (expr2!1 skolem-const-decl
     "FPAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (bounded_by?_TCC4 0
  (bounded_by?_TCC4-1 nil 3753537511 ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (bounded_by?_TCC5 0
  (bounded_by?_TCC5-1 nil 3753537511 ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (bounded_by?_TCC6 0
  (bounded_by?_TCC6-1 nil 3753537511 ("" (termination-tcc) nil nil)
   ((FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (evaluable_in_r_and 0
  (evaluable_in_r_and-2 nil 3753546422
   ("" (expand "bounded_by?" 1 1) (("" (propax) nil nil)) nil)
   ((bounded_by? def-decl "bool" expressions_semantics nil)) nil)
  (evaluable_in_r_and-1 nil 3753536341 ("" (grind) nil nil) nil
   shostak))
 (evaluable_in_r_not 0
  (evaluable_in_r_not-1 nil 3753546366
   ("" (expand "bounded_by?" 1 1) (("" (propax) nil nil)) nil)
   ((bounded_by? def-decl "bool" expressions_semantics nil)) shostak))
 (evaluable_in_r_lt 0
  (evaluable_in_r_lt-1 nil 3753546413
   ("" (expand "bounded_by?" 1 1) (("" (propax) nil nil)) nil)
   ((bounded_by? def-decl "bool" expressions_semantics nil)) nil))
 (evaluable_in_r_wellformed_eq 0
  (evaluable_in_r_wellformed_eq-3 nil 3755169568
   ("" (skeep)
    (("" (induct "rbexpr")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skolem 1 "subexpr")
        (("3" (flatten)
          (("3" (expand "wellFormed?_RBExpr" 1)
            (("3" (replace -1 :hide? t :dir rl)
              (("3" (use "evaluable_in_r_not") nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("e1" "e2"))
        (("4" (flatten)
          (("4" (use "evaluable_in_r_and")
            (("4" (replace -1 :hide? t)
              (("4" (replace -1 :hide? t)
                (("4" (replace -1 :hide? t)
                  (("4" (iff)
                    (("4" (split 1)
                      (("1" (flatten)
                        (("1" (skolem -1 "n1")
                          (("1" (skolem -2 "n2")
                            (("1" (inst 1 "max(n1,n2)")
                              (("1"
                                (expand "wellFormed?_RBExpr" 1)
                                (("1"
                                  (use
                                   "wellFormed?_RBExpr_monotonicity")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma
                                         "wellFormed?_RBExpr_monotonicity")
                                        (("1"
                                          (inst
                                           -1
                                           "e2"
                                           "n2"
                                           "size(env)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -1
                                               "max(n1,n2)"
                                               "size(env)")
                                              (("1"
                                                (inst
                                                 -2
                                                 "max(n1,n2)"
                                                 "size(env)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep -1)
                          (("2" (expand "wellFormed?_RBExpr" -1)
                            (("2" (flatten)
                              (("2"
                                (split 1)
                                (("1" (inst 1 "n") nil nil)
                                 ("2" (inst 1 "n") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skolem 1 ("a1" "a2"))
        (("5" (use "evaluable_in_r_lt")
          (("5" (replace -1 :hide? t)
            (("5" (lemma "evaluable_in_raexpr_wellformed_eq")
              (("5" (inst -1 "env" "a1")
                (("5" (replace -1 :hide? t)
                  (("5" (lemma "evaluable_in_raexpr_wellformed_eq")
                    (("5" (inst -1 "env" "a2")
                      (("5" (replace -1 :hide? t)
                        (("5" (iff)
                          (("5" (split 1)
                            (("1" (flatten)
                              (("1"
                                (skolem -1 "n1")
                                (("1"
                                  (skolem -2 "n2")
                                  (("1"
                                    (inst 1 "max(n1,n2)")
                                    (("1"
                                      (expand "wellFormed?_RBExpr" 1)
                                      (("1"
                                        (lemma
                                         "wellFormed?_RAExpr_monotonicity")
                                        (("1"
                                          (inst
                                           -1
                                           "a1"
                                           "n1"
                                           "size(env)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wellFormed?_RAExpr_monotonicity")
                                              (("1"
                                                (inst
                                                 -1
                                                 "a2"
                                                 "n2"
                                                 "size(env)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "max(n1,n2)"
                                                     "size(env)")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "max(n1,n2)"
                                                       "size(env)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "wellFormed?_RBExpr" -1)
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (split 1)
                                    (("1" (inst 1 "n") nil nil)
                                     ("2" (inst 1 "n") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (wellFormed?_RBExpr def-decl "bool" expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RBExpr_induction formula-decl nil expressions nil)
    (evaluable_in_r_not formula-decl nil expressions_semantics nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wellFormed?_RBExpr_monotonicity formula-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (evaluable_in_r_and formula-decl nil expressions_semantics nil)
    (evaluable_in_r_lt formula-decl nil expressions_semantics nil)
    (evaluable_in_raexpr_wellformed_eq formula-decl nil
     expressions_semantics nil)
    (wellFormed?_RAExpr_monotonicity formula-decl nil expressions nil))
   nil)
  (evaluable_in_r_wellformed_eq-2 nil 3755169506
   ("" (skeep)
    (("" (induct "rbexpr")
      (("1" (grind) nil) ("2" (grind) nil)
       ("3" (skolem 1 "subexpr")
        (("3" (flatten)
          (("3" (expand "wellFormed?" 1)
            (("3" (replace -1 :hide? t :dir rl)
              (("3" (use "evaluable_in_r_not") nil)))))))))
       ("4" (skolem 1 ("e1" "e2"))
        (("4" (flatten)
          (("4" (use "evaluable_in_r_and")
            (("4" (replace -1 :hide? t)
              (("4" (replace -1 :hide? t)
                (("4" (replace -1 :hide? t)
                  (("4" (iff)
                    (("4" (split 1)
                      (("1" (flatten)
                        (("1" (skolem -1 "n1")
                          (("1" (skolem -2 "n2")
                            (("1" (inst 1 "max(n1,n2)")
                              (("1"
                                (expand "wellFormed?" 1)
                                (("1"
                                  (use
                                   "wellFormed?_RBExpr_monotonicity")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma
                                         "wellFormed?_RBExpr_monotonicity")
                                        (("1"
                                          (inst
                                           -1
                                           "e2"
                                           "n2"
                                           "size(env)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -1
                                               "max(n1,n2)"
                                               "size(env)")
                                              (("1"
                                                (inst
                                                 -2
                                                 "max(n1,n2)"
                                                 "size(env)")
                                                (("1"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))
                       ("2" (flatten)
                        (("2" (skeep -1)
                          (("2" (expand "wellFormed?" -1)
                            (("2" (flatten)
                              (("2"
                                (split 1)
                                (("1" (inst 1 "n") nil)
                                 ("2"
                                  (inst 1 "n")
                                  nil)))))))))))))))))))))))))))
       ("5" (skolem 1 ("a1" "a2"))
        (("5" (use "evaluable_in_r_lt")
          (("5" (replace -1 :hide? t)
            (("5" (lemma "evaluable_in_raexpr_wellformed_eq")
              (("5" (inst -1 "env" "a1")
                (("5" (replace -1 :hide? t)
                  (("5" (lemma "evaluable_in_raexpr_wellformed_eq")
                    (("5" (inst -1 "env" "a2")
                      (("5" (replace -1 :hide? t)
                        (("5" (iff)
                          (("5" (split 1)
                            (("1" (flatten)
                              (("1"
                                (skolem -1 "n1")
                                (("1"
                                  (skolem -2 "n2")
                                  (("1"
                                    (inst 1 "max(n1,n2)")
                                    (("1"
                                      (expand "wellFormed?" 1)
                                      (("1"
                                        (lemma
                                         "wellFormed?_RAExpr_monotonicity")
                                        (("1"
                                          (inst
                                           -1
                                           "a1"
                                           "n1"
                                           "size(env)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wellFormed?_RAExpr_monotonicity")
                                              (("1"
                                                (inst
                                                 -1
                                                 "a2"
                                                 "n2"
                                                 "size(env)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "max(n1,n2)"
                                                     "size(env)")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "max(n1,n2)"
                                                       "size(env)")
                                                      (("1"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))
                             ("2" (flatten)
                              (("2"
                                (expand "wellFormed?" -1)
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (split 1)
                                    (("1" (inst 1 "n") nil)
                                     ("2"
                                      (inst 1 "n")
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (evaluable_in_r_wellformed_eq-1 nil 3755167684
   ("" (skeep)
    (("" (induct "rbexpr")
      (("1" (grind) nil) ("2" (grind) nil)
       ("3" (skolem 1 "subexpr")
        (("3" (flatten)
          (("3" (expand "wellFormed?" 1)
            (("3" (replace -1 :hide? t :dir rl)
              (("3" (use "evaluable_in_r_not") nil)))))))))
       ("4" (skolem 1 ("e1" "e2"))
        (("4" (flatten)
          (("4" (use "evaluable_in_r_and")
            (("4" (replace -1 :hide? t)
              (("4" (replace -1 :hide? t)
                (("4" (replace -1 :hide? t)
                  (("4" (iff)
                    (("4" (split 1)
                      (("1" (flatten)
                        (("1" (skolem -1 "n1")
                          (("1" (skolem -2 "n2")
                            (("1" (inst 1 "max(n1,n2)")
                              (("1"
                                (expand "wellFormed?" 1)
                                (("1"
                                  (use "wellFormed?_motonocity")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma
                                         "wellFormed?_motonocity")
                                        (("1"
                                          (inst
                                           -1
                                           "e2"
                                           "n2"
                                           "size(env)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -1
                                               "max(n1,n2)"
                                               "size(env)")
                                              (("1"
                                                (inst
                                                 -2
                                                 "max(n1,n2)"
                                                 "size(env)")
                                                (("1"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))
                       ("2" (flatten)
                        (("2" (skeep -1)
                          (("2" (expand "wellFormed?" -1)
                            (("2" (flatten)
                              (("2"
                                (split 1)
                                (("1" (inst 1 "n") nil)
                                 ("2"
                                  (inst 1 "n")
                                  nil)))))))))))))))))))))))))))
       ("5" (skolem 1 ("a1" "a2"))
        (("5" (use "evaluable_in_r_lt")
          (("5" (replace -1 :hide? t)
            (("5" (lemma "evaluable_in_raexpr_wellformed_eq")
              (("5" (inst -1 "env" "a1")
                (("5" (replace -1 :hide? t)
                  (("5" (lemma "evaluable_in_raexpr_wellformed_eq")
                    (("5" (inst -1 "env" "a2")
                      (("5" (replace -1 :hide? t)
                        (("5" (iff)
                          (("5" (split 1)
                            (("1" (flatten)
                              (("1"
                                (skolem -1 "n1")
                                (("1"
                                  (skolem -2 "n2")
                                  (("1"
                                    (inst 1 "max(n1,n2)")
                                    (("1"
                                      (expand "wellFormed?" 1)
                                      (("1"
                                        (lemma
                                         "wellFormed?_raexpr_motonocity")
                                        (("1"
                                          (inst
                                           -1
                                           "a1"
                                           "n1"
                                           "size(env)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wellFormed?_raexpr_motonocity")
                                              (("1"
                                                (inst
                                                 -1
                                                 "a2"
                                                 "n2"
                                                 "size(env)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "max(n1,n2)"
                                                     "size(env)")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "max(n1,n2)"
                                                       "size(env)")
                                                      (("1"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))
                             ("2" (flatten)
                              (("2"
                                (expand "wellFormed?" -1)
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (split 1)
                                    (("1" (inst 1 "n") nil)
                                     ("2"
                                      (inst 1 "n")
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (evaluable_subterm_r 0
  (evaluable_subterm_r-1 nil 3753533449
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skolem 1 "form")
        (("3" (flatten)
          (("3" (expand "subterm" -2)
            (("3" (split -2)
              (("1" (grind) nil nil)
               ("2" (split -2)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("form1" "form2"))
        (("4" (flatten)
          (("4" (expand "subterm" -3)
            (("4" (split -3)
              (("1" (grind) nil nil)
               ("2" (split -2)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (use "evaluable_in_r_and")
                  (("3" (assert) nil nil)) nil))
                nil)
               ("3" (split -3)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (use "evaluable_in_r_and")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skolem 1 ("e1" "e2"))
        (("5" (flatten)
          (("5" (expand "subterm")
            (("5" (replace -1 :hide? t) (("5" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RBExpr_induction formula-decl nil expressions nil)
    (evaluable_in_r_and formula-decl nil expressions_semantics nil))
   shostak))
 (val_TCC9 0
  (val_TCC9-1 nil 3752405688 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (REvaluableBExpr type-eq-decl nil expressions_semantics nil))
   nil))
 (val_TCC10 0
  (val_TCC10-1 nil 3752405688 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (REvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (val_TCC11 0
  (val_TCC11-1 nil 3753112147 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (REvaluableBExpr type-eq-decl nil expressions_semantics nil))
   nil))
 (val_TCC12 0
  (val_TCC12-1 nil 3753112147 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (REvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (val_TCC13 0
  (val_TCC13-1 nil 3753112147 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (REvaluableBExpr type-eq-decl nil expressions_semantics nil))
   nil))
 (val_TCC14 0
  (val_TCC14-1 nil 3753112147 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (REvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (val_TCC15 0
  (val_TCC15-1 nil 3753112147 ("" (tcc))
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (REvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (val_TCC16 0
  (val_TCC16-1 nil 3753112147 ("" (tcc))
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (bounded_by? def-decl "bool" expressions_semantics nil)
    (REvaluableBExpr type-eq-decl nil expressions_semantics nil)
    (expr1!1 skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (v!1 skolem-const-decl
     "{v: (RVariable?) | v = expr2!1 OR v << expr2!1}"
     expressions_semantics nil)
    (expr2!1 skolem-const-decl
     "RAExpr[Operator, RealNumber, FloatingPointNumber, FtoR]"
     expressions_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil))
   nil))
 (consistentLocalEnvironments?_TCC1 0
  (consistentLocalEnvironments?_TCC1-1 nil 3752405688
   ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (size const-decl "nat" u_local_environment nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (empty_env_are_consistent 0
  (empty_env_are_consistent-1 nil 3755002018 ("" (grind) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (empty_local_env const-decl "LocalEnvironment" u_local_environment
     nil)
    (size const-decl "nat" u_local_environment nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FPEmptyLocalEnv const-decl "FPLocalEnvironment"
     expressions_semantics nil)
    (REmptyLocalEnv const-decl "RLocalEnvironment"
     expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (size_empty formula-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil))
   shostak))
 (evaluable_in_fp_evaluable_in_r 0
  (evaluable_in_fp_evaluable_in_r-1 nil 3755010103
   ("" (skeep)
    (("" (use "evaluable_in_wellformed_eq")
      (("" (replace -1 :hide? t)
        (("" (skolem -2 "nargs")
          (("" (expand "consistentLocalEnvironments?")
            (("" (flatten)
              (("" (replace -1 :hide? t)
                (("" (use "evaluable_in_r_wellformed_eq")
                  (("" (replace -1 :hide? t)
                    (("" (inst 1 "nargs")
                      (("" (rewrite "ftor_form_wellFormed?") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_wellformed_eq formula-decl nil expressions_semantics
     nil)
    (FPBExpr type-decl nil expressions nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (evaluable_in_r_wellformed_eq formula-decl nil
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (RBExpr type-decl nil expressions nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (ftor_form_wellFormed? formula-decl nil expressions nil)
    (size const-decl "nat" u_local_environment nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil))
   shostak))
 (consistent_local_environments_ext_TCC1 0
  (consistent_local_environments_ext_TCC1-1 nil 3755688799
   ("" (subtype-tcc) nil nil)
   ((consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil))
   nil))
 (consistent_local_environments_ext_TCC2 0
  (consistent_local_environments_ext_TCC2-1 nil 3755688799
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_expr_FtoR")
      (("" (assert)
        (("" (expand "consistentLocalEnvironments?")
          (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((evaluable_in_expr_FtoR formula-decl nil expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil))
   nil))
 (consistent_local_environments_ext 0
  (consistent_local_environments_ext-1 nil 3755002132
   ("" (skeep :preds? t)
    (("" (use "evaluable_in_expr_FtoR")
      (("" (expand "consistentLocalEnvironments?")
        (("" (flatten)
          (("" (assert)
            (("" (skeep :preds? t)
              (("" (assert)
                (("" (case "i=0")
                  (("1" (replace -1 :hide? t)
                    (("1" (rewrite "get_last_added")
                      (("1" (rewrite "get_last_added") nil nil)) nil))
                    nil)
                   ("2" (inst -5 "i-1")
                    (("1" (rewrite "get_env_monotonocity")
                      (("1" (rewrite "get_env_monotonocity") nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((evaluable_in_expr_FtoR formula-decl nil expressions_semantics nil)
    (bounded_by? const-decl "bool" u_local_environment nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" u_local_environment nil)
    (cons const-decl "LocalEnvironment" u_local_environment nil)
    (below type-eq-decl nil naturalnumbers nil)
    (get_last_added formula-decl nil u_local_environment nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (get_env_monotonocity formula-decl nil u_local_environment nil)
    (i skolem-const-decl "below(size(cons(aexpr, fpLocalEnv)))"
     expressions_semantics nil)
    (aexpr skolem-const-decl "{aexpr | bounded_by?(fpLocalEnv)(aexpr)}"
     expressions_semantics nil)
    (fpLocalEnv skolem-const-decl "FPLocalEnvironment"
     expressions_semantics nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size_cons_def formula-decl nil u_local_environment nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil))
   shostak))
 (consistent_local_environments_eq 0
  (consistent_local_environments_eq-1 nil 3756212656
   ("" (skeep :preds? t)
    (("" (expand "consistentLocalEnvironments?")
      (("" (flatten)
        (("" (use "r_local_env.u_local_environment_extensionality")
          (("" (replace -1 :hide? t)
            (("" (assert)
              (("" (typepred "FtoR(fpLocalEnv)")
                (("" (assert)
                  (("" (skeep 1)
                    (("" (inst -2 "i")
                      (("" (replace -2 :hide? t)
                        (("" (inst -3 "i") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((consistentLocalEnvironments? const-decl "bool"
     expressions_semantics nil)
    (u_local_environment_extensionality formula-decl nil
     u_local_environment nil)
    (Operator formal-nonempty-type-decl nil expressions_semantics nil)
    (RealNumber formal-nonempty-type-decl nil expressions_semantics
     nil)
    (FloatingPointNumber formal-nonempty-type-decl nil
     expressions_semantics nil)
    (FtoR formal-const-decl "[FloatingPointNumber -> RealNumber]"
     expressions_semantics nil)
    (RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rVarIndex const-decl "nat" expressions_semantics nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (FtoR const-decl "{rle: RLocalEnvironment |
         size(fle) = size(rle) AND
          (FORALL (i: below(size(rle))): get(rle)(i) = FtoR(get(fle)(i)))}"
     expressions_semantics nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (get const-decl "T" u_local_environment nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" u_local_environment nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (FPLocalEnvironment type-eq-decl nil expressions_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (fpVarIndex const-decl "nat" expressions_semantics nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (LocalEnvironment nonempty-type-decl nil u_local_environment nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)))

