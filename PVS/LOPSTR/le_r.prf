(le_r
 (le_r_def 0
  (le_r_def-1 nil 3756558003
   ("" (use "le.le_def") (("" (grind) nil nil)) nil)
   ((le_r const-decl "bool" le_r nil)
    (le const-decl "bool" le "orders/")
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])" le_r
     nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RealNumber formal-nonempty-type-decl nil le_r nil)
    (le_def formula-decl nil le "orders/"))
   shostak))
 (le_r_total_order 0
  (le_r_total_order-1 nil 3756558931
   ("" (use "le.le_total_order") (("" (grind) nil nil)) nil)
   ((le const-decl "bool" le "orders/")
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (total_order? const-decl "bool" orders nil)
    (le_r const-decl "bool" le_r nil)
    (lt_r formal-const-decl "(strict_total_order?[RealNumber])" le_r
     nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RealNumber formal-nonempty-type-decl nil le_r nil)
    (le_total_order formula-decl nil le "orders/"))
   nil)))

