(u_local_environment__list_interpretation
 (shrink_TCC1 0
  (shrink_TCC1-1 nil 3755606811 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (get_TCC1 0
  (get_TCC1-1 nil 3755605386 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (LocalEnvironment_TCC1 0
  (LocalEnvironment_TCC1-1 nil 3755605386 ("" (subtype-tcc) nil nil)
   ((size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (LocalEnvironment_TCC2 0
  (LocalEnvironment_TCC2-1 nil 3755605386
   ("" (inst 1 "null") (("" (grind) nil nil)) nil)
   ((takeFromRight def-decl "list[T]" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< formal-const-decl "(strict_well_founded?[T])"
     u_local_environment__list_interpretation nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (variable? formal-const-decl "PRED[T]"
               u_local_environment__list_interpretation nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil))
   nil))
 (shrink_le_j 0
  (shrink_le_j-1 nil 3755605497
   ("" (skeep :preds? t)
    (("" (expand "shrink" :assert? none)
      (("" (expand "get" :assert? none)
        (("" (rewrite "takeFromRight_length")
          (("" (use "nth_takeFromRight")
            (("" (replace -1 :hide? t)
              ((""
                (case "length(env) - (length(env) - (i + 1)) + i_1 = i + i_1 + 1")
                (("1" (replace -1 :hide? t)
                  (("1" (use "takeFromRight_takeFromRight")
                    (("1" (replace -1 :hide? t)
                      (("1" (inst -1 "i+i_1+1")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (takeFromRight_length formula-decl nil more_list_props
     "structures/")
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (env skolem-const-decl "LocalEnvironment"
     u_local_environment__list_interpretation nil)
    (i skolem-const-decl "below(length(env))"
     u_local_environment__list_interpretation nil)
    (i_1 skolem-const-decl "below(length(shrink(env, i)))"
     u_local_environment__list_interpretation nil)
    (takeFromRight_takeFromRight formula-decl nil more_list_props
     "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (nth_takeFromRight formula-decl nil more_list_props "structures/")
    (get const-decl "T" u_local_environment__list_interpretation nil))
   nil))
 (cons_TCC1 0
  (cons_TCC1-1 nil 3755870389
   ("" (skeep* :preds? t)
    (("" (case "i=0")
      (("1" (replace -1 :hide? t)
        (("1" (hide-all-but (1 -3)) (("1" (grind) nil nil)) nil)) nil)
       ("2" (inst -2 "i-1")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expr skolem-const-decl "T"
          u_local_environment__list_interpretation nil)
    (env skolem-const-decl "{env | bounded_by?(env)(expr)}"
     u_local_environment__list_interpretation nil)
    (i skolem-const-decl "below(length(cons(expr, env)))"
     u_local_environment__list_interpretation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (empty_local_env_TCC1 0
  (empty_local_env_TCC1-1 nil 3755871705 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (variable? formal-const-decl "PRED[T]"
               u_local_environment__list_interpretation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< formal-const-decl "(strict_well_founded?[T])"
     u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (length_null formula-decl nil more_list_props "structures/")
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil))
   nil))
 (size_cons_TCC1 0
  (size_cons_TCC1-1 nil 3755871825 ("" (subtype-tcc) nil nil) nil nil))
 (size_cons 0
  (size_cons-1 nil 3755871837 ("" (grind) nil nil)
   ((size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (size_cons_def 0
  (size_cons_def-1 nil 3755871847 ("" (grind) nil nil)
   ((cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   shostak))
 (size_empty 0
  (size_empty-1 nil 3755871852 ("" (grind) nil nil)
   ((empty_local_env const-decl "LocalEnvironment"
     u_local_environment__list_interpretation nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   shostak))
 (size_shrink 0
  (size_shrink-1 nil 3755871864
   ("" (skeep :preds? t)
    (("" (expand "size")
      (("" (expand "shrink")
        (("" (rewrite "takeFromRight_length") nil nil)) nil))
      nil))
    nil)
   ((size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (takeFromRight_length formula-decl nil more_list_props
     "structures/")
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (shrink_env_monotonocity_TCC1 0
  (shrink_env_monotonocity_TCC1-1 nil 3755871825 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (shrink_env_monotonocity_TCC2 0
  (shrink_env_monotonocity_TCC2-1 nil 3755871825
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (shrink_env_monotonocity 0
  (shrink_env_monotonocity-1 nil 3755872044 ("" (grind) nil nil)
   ((cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (length def-decl "nat" list_props nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil))
   shostak))
 (shrink_env_monotonocity__unint_TCC1 0
  (shrink_env_monotonocity__unint_TCC1-1 nil 3757590702
   ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (shrink_env_monotonocity__unint_TCC2 0
  (shrink_env_monotonocity__unint_TCC2-1 nil 3757590702
   ("" (grind) nil nil)
   ((size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (shrink_env_monotonocity__unint 0
  (shrink_env_monotonocity__unint-1 nil 3757674920 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil))
   nil))
 (shrink_for_last_added_TCC1 0
  (shrink_for_last_added_TCC1-1 nil 3755872069 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (shrink_for_last_added 0
  (shrink_for_last_added-1 nil 3755872074 ("" (grind) nil nil)
   ((cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (length def-decl "nat" list_props nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil))
   shostak))
 (shrink_for_last_added_unint_TCC1 0
  (shrink_for_last_added_unint_TCC1-1 nil 3757673716
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (shrink_for_last_added_unint 0
  (shrink_for_last_added_unint-1 nil 3757674955 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil))
   nil))
 (get_env_monotonicity 0
  (get_env_monotonicity-1 nil 3755872092 ("" (grind) nil nil)
   ((cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (nth def-decl "T" list_props nil)
    (get const-decl "T" u_local_environment__list_interpretation nil))
   shostak))
 (get_env_monotonicity_unint 0
  (get_env_monotonicity_unint-1 nil 3757674981 ("" (grind) nil nil)
   ((nth def-decl "T" list_props nil)
    (get const-decl "T" u_local_environment__list_interpretation nil))
   nil))
 (get_last_added 0
  (get_last_added-1 nil 3755872098 ("" (grind) nil nil)
   ((cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (nth def-decl "T" list_props nil)
    (get const-decl "T" u_local_environment__list_interpretation nil))
   shostak))
 (u_local_environment_extensionality_TCC1 0
  (u_local_environment_extensionality_TCC1-1 nil 3756575616
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (u_local_environment_extensionality 0
  (u_local_environment_extensionality-1 nil 3756575620
   ("" (use "list_extensionality") (("" (grind) nil nil)) nil)
   ((size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (nth def-decl "T" list_props nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< formal-const-decl "(strict_well_founded?[T])"
     u_local_environment__list_interpretation nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "below(length(env1!1))"
     u_local_environment__list_interpretation nil)
    (below type-eq-decl nil nat_types nil)
    (variable? formal-const-decl "PRED[T]"
               u_local_environment__list_interpretation nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n!1 skolem-const-decl "below(length(env1!1))"
     u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (env2!1 skolem-const-decl "LocalEnvironment"
     u_local_environment__list_interpretation nil)
    (env1!1 skolem-const-decl "LocalEnvironment"
     u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list_extensionality formula-decl nil more_list_props
     "structures/"))
   shostak))
 (get_shrink_TCC1 0
  (get_shrink_TCC1-1 nil 3756575120
   ("" (skeep :preds? t)
    (("" (rewrite "size_shrink") (("" (assert) nil nil)) nil)) nil)
   ((size_shrink formula-decl nil
     u_local_environment__list_interpretation nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (get_shrink 0
  (get_shrink-1 nil 3756575122
   ("" (skeep :preds? t)
    (("" (expand "get")
      (("" (expand "shrink")
        (("" (rewrite "nth_takeFromRight") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((get const-decl "T" u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth_takeFromRight formula-decl nil more_list_props "structures/")
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (local_definitions_are_evaluable_in_smaller_env 0
  (local_definitions_are_evaluable_in_smaller_env-1 nil 3755872112
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (PRED type-eq-decl nil defined_types nil)
    (variable? formal-const-decl "PRED[T]"
               u_local_environment__list_interpretation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< formal-const-decl "(strict_well_founded?[T])"
     u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (env_cons_eta_TCC1 0
  (env_cons_eta_TCC1-1 nil 3757693257 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil))
   nil))
 (env_cons_eta_TCC2 0
  (env_cons_eta_TCC2-1 nil 3757693257
   ("" (skeep :preds? t)
    (("" (split 1)
      (("1" (use "shrink_le_j")
        (("1" (expand "size") (("1" (propax) nil nil)) nil)
         ("2" (expand "size") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (inst -1 "0")
        (("2" (expand "size") (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (env skolem-const-decl "{env | 0 < size(env)}"
     u_local_environment__list_interpretation nil)
    (shrink_le_j judgement-tcc nil
     u_local_environment__list_interpretation nil))
   nil))
 (env_cons_eta 0
  (env_cons_eta-1 nil 3757693262
   ("" (skeep 1 :preds? t)
    (("" (expand "get")
      (("" (expand "nth")
        (("" (expand "shrink")
          (("" (expand "takeFromRight")
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (expand "takeFromRight")
                    (("2" (lift-if 2)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (use "list_cons_eta[T]")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "cons")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get const-decl "T" u_local_environment__list_interpretation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (length def-decl "nat" list_props nil)
    (cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (nth def-decl "T" list_props nil))
   shostak))
 (lenv_induction_TCC1 0
  (lenv_induction_TCC1-1 nil 3757676368 ("" (subtype-tcc) nil nil)
   ((empty_local_env const-decl "LocalEnvironment"
     u_local_environment__list_interpretation nil))
   nil))
 (lenv_induction 0
  (lenv_induction-2 "" 3757590352
   ("" (skeep 1 :preds? t)
    (("" (induct "env")
      (("1" (typepred "env!1") (("1" (propax) nil nil)) nil)
       ("2" (grind) nil nil)
       ("3" (skolem 1 ("t" "lT"))
        (("3" (flatten)
          (("3" (inst -4 "lT" "t")
            (("1" (split -4)
              (("1" (expand "cons") (("1" (propax) nil nil)) nil)
               ("2" (assert)
                (("2" (skeep 2 :preds? t)
                  (("2" (inst -2 "i+1")
                    (("1" (lemma "shrink_env_monotonocity__unint")
                      (("1" (inst -1 "lT" "i+1" "t")
                        (("1" (replace -1 :hide? t)
                          (("1" (lemma "get_env_monotonicity_unint")
                            (("1" (inst -1 "lT" "i+1" "t")
                              (("1"
                                (expand "get")
                                (("1"
                                  (replace -1 :dir rl)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "bounded_by?")
              (("2" (inst -2 "0")
                (("1" (skeep 1 :preds? t)
                  (("1" (inst -4 "v")
                    (("1" (lemma "shrink_for_last_added_unint")
                      (("1" (inst? -1 :where -5)
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (expand "get")
                      (("2" (expand "nth" 1) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" 1) (("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("3" (skolem 1 "i!1" :skolem-typepreds? t)
              (("3" (expand "bounded_by?")
                (("3" (skeep :preds? t)
                  (("3" (inst -5 "i!1+1")
                    (("1" (inst -5 "v")
                      (("1" (expand "shrink")
                        (("1" (expand "takeFromRight" -5)
                          (("1" (expand "length" -5)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "get" 1)
                        (("2" (expand "nth" 1)
                          (("2" (expand "get" -2)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (grind) nil nil))
      nil))
    nil)
   ((size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bounded_by? const-decl "bool"
     u_local_environment__list_interpretation nil)
    (shrink const-decl "list[T]"
     u_local_environment__list_interpretation nil)
    (get const-decl "T" u_local_environment__list_interpretation nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (list_induction formula-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_local_env const-decl "LocalEnvironment"
     u_local_environment__list_interpretation nil)
    (v skolem-const-decl
     "{v: (variable?) | v = get(lT)(i!1) OR v << get(lT)(i!1)}"
     u_local_environment__list_interpretation nil)
    (i!1 skolem-const-decl "below(length(lT))"
     u_local_environment__list_interpretation nil)
    (nth def-decl "T" list_props nil)
    (shrink_for_last_added_unint formula-decl nil
     u_local_environment__list_interpretation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (takeFromRight def-decl "list[T]" more_list_props "structures/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (variable? formal-const-decl "PRED[T]"
               u_local_environment__list_interpretation nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< formal-const-decl "(strict_well_founded?[T])"
     u_local_environment__list_interpretation nil)
    (v skolem-const-decl "{v: (variable?) | v = t OR v << t}"
     u_local_environment__list_interpretation nil)
    (cons const-decl "LocalEnvironment"
          u_local_environment__list_interpretation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (shrink_env_monotonocity__unint formula-decl nil
     u_local_environment__list_interpretation nil)
    (get_env_monotonicity_unint formula-decl nil
     u_local_environment__list_interpretation nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (i skolem-const-decl "below(length(lT))"
     u_local_environment__list_interpretation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (t skolem-const-decl "T" u_local_environment__list_interpretation
     nil)
    (lT skolem-const-decl "list[T]"
     u_local_environment__list_interpretation nil))
   shostak)
  (lenv_induction-1 nil 3757589414
   ("" (lemma "list_induction[T]")
    (("" (skeep)
      (("" (inst -1 "p")
        (("1" (split -1)
          (("1" (skeep)
            (("1" (inst -1 "env")
              (("1" (assert)
                (("1" (expand "extend") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (postpone) nil nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (doublelessp_swf 0
  (doublelessp_swf-2 nil 3755872177
   ("" (typepred "<<::(strict_well_founded?[T])")
    (("" (expand "strict_well_founded?")
      (("" (flatten)
        (("" (split 1)
          (("1" (expand "strict_order?")
            (("1" (flatten)
              (("1" (split 1)
                (("1" (expand "irreflexive?") (("1" (grind) nil nil))
                  nil)
                 ("2" (expand "transitive?")
                  (("2" (skeep*)
                    (("2" (expand "<<")
                      (("2" (inst -4 "expr(x)" "expr(y)" "expr(z)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "well_founded?")
            (("2" (skeep 1)
              (("2" (use "wf_nat")
                (("2" (expand "well_founded?")
                  (("2"
                    (name "is_size_of_evaluation_context_in_p?"
                          "LAMBDA(n:nat): EXISTS(ec:EvaluationContext): p(ec) AND size(locals(ec)) = n")
                    (("2"
                      (inst -2 "is_size_of_evaluation_context_in_p?")
                      (("2" (split -2)
                        (("1"
                          (skolem -1 "min_size" :skolem-typepreds? t)
                          (("1"
                            (name "is_expr_of_an_evaluation_context_in_p_with_minimum_size?"
                                  "LAMBDA(x:T): EXISTS(ec:EvaluationContext): p(ec) AND expr(ec) = x AND size(locals(ec)) = min_size")
                            (("1"
                              (inst -7
                               "is_expr_of_an_evaluation_context_in_p_with_minimum_size?")
                              (("1"
                                (split -7)
                                (("1"
                                  (skolem
                                   -1
                                   "expr_min"
                                   :skolem-typepreds?
                                   t)
                                  (("1"
                                    (expand
                                     "is_expr_of_an_evaluation_context_in_p_with_minimum_size?"
                                     -1)
                                    (("1"
                                      (skolem -1 "ec_min")
                                      (("1"
                                        (inst 1 "ec_min")
                                        (("1"
                                          (skolem
                                           1
                                           "ec"
                                           :skolem-typepreds?
                                           t)
                                          (("1"
                                            (expand "<<")
                                            (("1"
                                              (split -9)
                                              (("1"
                                                (inst
                                                 -7
                                                 "size(locals(ec))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand
                                                   "is_size_of_evaluation_context_in_p?")
                                                  (("2"
                                                    (inst 1 "ec")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -4 "expr(ec)")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "is_expr_of_an_evaluation_context_in_p_with_minimum_size?")
                                                  (("2"
                                                    (inst 1 "ec")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand
                                   "is_size_of_evaluation_context_in_p?"
                                   -2)
                                  (("2"
                                    (skeep -2)
                                    (("2"
                                      (inst 1 "expr(ec)")
                                      (("2"
                                        (expand
                                         "is_expr_of_an_evaluation_context_in_p_with_minimum_size?")
                                        (("2"
                                          (inst 1 "ec")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep -2)
                          (("2" (inst 1 "size(locals(y))")
                            (("2"
                              (expand "is_size_of_evaluation_context_in_p?")
                              (("2" (inst 1 "y") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (irreflexive? const-decl "bool" relations nil)
    (LocalEnvironment nonempty-type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (EvaluationContext type-eq-decl nil
     u_local_environment__list_interpretation nil)
    (<< const-decl "[EvaluationContext, EvaluationContext -> bool]"
     u_local_environment__list_interpretation nil)
    (size const-decl "nat" u_local_environment__list_interpretation
     nil)
    (well_founded? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (ec skolem-const-decl "(p)"
     u_local_environment__list_interpretation nil)
    (is_size_of_evaluation_context_in_p? skolem-const-decl
     "[nat -> boolean]" u_local_environment__list_interpretation nil)
    (ec_min skolem-const-decl "EvaluationContext"
     u_local_environment__list_interpretation nil)
    (p skolem-const-decl "pred[EvaluationContext]"
     u_local_environment__list_interpretation nil)
    (is_expr_of_an_evaluation_context_in_p_with_minimum_size?
     skolem-const-decl "[T -> boolean]"
     u_local_environment__list_interpretation nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil
     u_local_environment__list_interpretation nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< formal-const-decl "(strict_well_founded?[T])"
     u_local_environment__list_interpretation nil))
   nil)
  (doublelessp_swf-1 nil 3755872127 ("" (postpone) nil nil) nil
   shostak)))

