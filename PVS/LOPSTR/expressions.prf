(expressions
 (maxParamIndex_TCC1 0
  (maxParamIndex_TCC1-1 nil 3754239476 ("" (tcc))
   ((subterm adt-def-decl "boolean" expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (FPAExpr type-decl nil expressions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (maxParamIndex_TCC2 0
  (maxParamIndex_TCC2-1 nil 3754239476 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPAExpr type-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (subterm adt-def-decl "boolean" expressions nil))
   nil))
 (maxParamIndex_TCC3 0
  (maxParamIndex_TCC3-1 nil 3754239476 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FPAExpr type-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (subterm adt-def-decl "boolean" expressions nil))
   nil))
 (maxParamIndex_TCC4 0
  (maxParamIndex_TCC4-1 nil 3754239476 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions
     nil))
   nil))
 (maxParamIndex_TCC5 0
  (maxParamIndex_TCC5-1 nil 3754239476 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions
     nil))
   nil))
 (maxParamIndex_TCC6 0
  (maxParamIndex_TCC6-1 nil 3754239476
   ("" (skeep* :preds? t)
    (("" (typepred "v1(arg1!1)")
      (("1" (typepred "v1(arg2!1)")
        (("1" (split 1)
          (("1" (skeep :preds? t)
            (("1" (replace -7)
              (("1" (expand "subterm")
                (("1" (split -2)
                  (("1" (inst -6 "v")
                    (("1" (expand "max")
                      (("1" (lift-if 1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst -4 "v")
                    (("2" (expand "max")
                      (("2" (lift-if 1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (replace -3)
          (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (replace -1)
        (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (FPAExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (arg1!1 skolem-const-decl "FPAExpr" expressions nil)
    (v skolem-const-decl "{v: (FPParameter?) | subterm(v, expr)}"
     expressions nil)
    (expr skolem-const-decl "FPAExpr" expressions nil)
    (arg2!1 skolem-const-decl "FPAExpr" expressions nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (maxFreeLocalIndex_TCC1 0
  (maxFreeLocalIndex_TCC1-1 nil 3753112107 ("" (tcc))
   ((subterm adt-def-decl "boolean" expressions nil)) nil))
 (maxFreeLocalIndex_TCC2 0
  (maxFreeLocalIndex_TCC2-1 nil 3753112107 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" expressions nil))
   shostak))
 (maxFreeLocalIndex_TCC3 0
  (maxFreeLocalIndex_TCC3-1 nil 3753112107 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" expressions nil))
   nil))
 (maxFreeLocalIndex_TCC4 0
  (maxFreeLocalIndex_TCC4-1 nil 3753112107
   ("" (skeep :preds? t)
    (("" (replace -1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (skeep -1)
            (("1" (typepred "v(arg1!1)")
              (("1" (typepred "v(arg2!1)")
                (("1" (split -2)
                  (("1" (split -5)
                    (("1" (flatten)
                      (("1" (skolem -1 "local1" :skolem-typepreds? t)
                        (("1" (skolem -5 "local2" :skolem-typepreds? t)
                          (("1" (case "index(local2)<=index(local1)")
                            (("1" (split 1)
                              (("1"
                                (inst 1 "local1")
                                (("1"
                                  (replace -6 :hide? t :dir rl)
                                  (("1"
                                    (replace -7 :hide? t :dir rl)
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -15 :hide? t)
                                  (("2"
                                    (expand "subterm" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -7 "local!1")
                                  (("1"
                                    (inst -9 "local!1")
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "local!1")
                                    (("2"
                                      (replace -16 :hide? y)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split 2)
                              (("1"
                                (inst 1 "local2")
                                (("1"
                                  (replace -5 :hide? t :dir rl)
                                  (("1"
                                    (replace -6 :hide? t :dir rl)
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -14 :hide? t)
                                  (("2"
                                    (expand "subterm" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -6 "local!1")
                                  (("1"
                                    (inst -8 "local!1")
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "local!1")
                                    (("2"
                                      (replace -15 :hide? y)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (split -5)
                        (("1" (replace -1)
                          (("1" (flatten)
                            (("1"
                              (skolem -2 "local2" :skolem-typepreds? t)
                              (("1"
                                (split 2)
                                (("1"
                                  (inst 1 "local2")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (skolem
                                   1
                                   "localx"
                                   :skolem-typepreds?
                                   t)
                                  (("2"
                                    (inst -7 "localx")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (split -4)
                      (("1" (flatten)
                        (("1" (skolem -1 "local1" :skolem-typepreds? t)
                          (("1" (replace -5)
                            (("1" (replace -3 :dir rl)
                              (("1"
                                (split 2)
                                (("1"
                                  (inst 1 "local1")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (skolem
                                   1
                                   "localx"
                                   :skolem-typepreds?
                                   t)
                                  (("2"
                                    (inst -6 "localx")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replace -11)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (inst 3 "localx")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split -4)
                        (("1" (hide 3)
                          (("1" (expand "subterm" -5)
                            (("1" (split -5)
                              (("1" (inst 1 "local") nil nil)
                               ("2" (inst 2 "local") nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (replace -5)
                  (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -2)
                (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (typepred "v(arg1!1)")
            (("2" (typepred "v(arg2!1)")
              (("2" (split -3)
                (("1" (replace -1 :hide? t)
                  (("1" (split -5)
                    (("1" (replace -1 :hide? t)
                      (("1" (expand "max") (("1" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (skeep -1 :preds? t)
                      (("2" (inst 1 "local")
                        (("2" (expand "subterm" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep -1 :preds? t)
                  (("2" (inst 1 "local")
                    (("2" (expand "subterm" 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (FPAExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (localx skolem-const-decl
     "{local: (FPVariable?) | subterm(local, expr)}" expressions nil)
    (local2 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, arg2!1)}" expressions nil)
    (local2 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, arg2!1)}" expressions nil)
    (local!1 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, expr)}" expressions nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expr skolem-const-decl "FPAExpr" expressions nil)
    (local1 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, arg1!1)}" expressions nil)
    (arg1!1 skolem-const-decl "FPAExpr" expressions nil)
    (local!1 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, expr)}" expressions nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (arg2!1 skolem-const-decl "FPAExpr" expressions nil)
    (localx skolem-const-decl
     "{local: (FPVariable?) | subterm(local, expr)}" expressions nil)
    (local1 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, arg1!1)}" expressions
     nil))
   shostak))
 (max_local_index_expr_op_def 0
  (max_local_index_expr_op_def-1 nil 3753554680
   ("" (expand "maxFreeLocalIndex" 1 1) (("" (propax) nil nil)) nil)
   ((maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil))
   shostak))
 (max_local_index_fpexpr_def 0
  (max_local_index_fpexpr_def-1 nil 3754921332
   ("" (skeep)
    (("" (typepred "maxFreeLocalIndex(expr)") (("" (grind) nil nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<= const-decl "bool" reals nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (FPAExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (wellFormed?_fpaexpr_monotonocity 0
  (wellFormed?_fpaexpr_monotonocity-1 nil 3753114030
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (skolem 1 "c")
        (("1" (flatten)
          (("1" (expand "wellFormed?") (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (expand "wellFormed?")
        (("2" (skeep) (("2" (assert) nil nil)) nil)) nil)
       ("3" (expand "wellFormed?") (("3" (grind) nil nil)) nil)
       ("4" (skolem 1 ("o" "a1" "a2"))
        (("4" (flatten)
          (("4" (expand "wellFormed?" (-3 1))
            (("4" (flatten)
              (("4" (assert)
                (("4" (skeep)
                  (("4" (inst -1 "n" "m")
                    (("4" (inst -2 "n" "m") (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed? inductive-decl "bool" expressions nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (FPAExpr_induction formula-decl nil expressions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil))
   shostak))
 (wellFormed?_expr_op 0
  (wellFormed?_expr_op-1 nil 3753467151
   ("" (skeep)
    (("" (expand "wellFormed?" 1 1) (("" (propax) nil nil)) nil)) nil)
   ((wellFormed? inductive-decl "bool" expressions nil)) shostak))
 (wellFormed?_expr_int_def 0
  (wellFormed?_expr_int_def-1 nil 3754849196
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (skolem 1 "cnst")
        (("1" (expand "wellFormed?")
          (("1" (expand "maxFreeLocalIndex")
            (("1" (expand "maxParamIndex") (("1" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 "vidx")
        (("2" (expand "wellFormed?")
          (("2" (expand "maxFreeLocalIndex")
            (("2" (expand "maxParamIndex") (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skolem 1 "pidx")
        (("3" (expand "wellFormed?")
          (("3" (expand "maxFreeLocalIndex")
            (("3" (expand "maxParamIndex") (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("op_" "expr1_" "expr2_"))
        (("4" (flatten)
          (("4" (rewrite "wellFormed?_expr_op")
            (("4" (rewrite "max_local_index_expr_op_def")
              (("4" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed? inductive-decl "bool" expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (<= const-decl "bool" reals nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (maxParamIndex def-decl "{maxInd: upfrom(-1) |
         FORALL (v: (FPParameter?) | subterm(v, expr)): index(v) <= maxInd}"
     expressions nil)
    (FPAExpr_induction formula-decl nil expressions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (max_local_index_expr_op_def formula-decl nil expressions nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (wellFormed?_expr_op formula-decl nil expressions nil)
    (Operator formal-nonempty-type-decl nil expressions nil))
   shostak))
 (subterm_doublelessp 0
  (subterm_doublelessp-1 nil 3756382723
   ("" (skeep 1 :but "rexpr2")
    (("" (induct-and-simplify "rexpr2") nil nil)) nil)
   ((RAExpr_induction formula-decl nil expressions nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RAExpr type-decl nil expressions nil))
   shostak))
 (fpaexpr_subterm_doublelessp 0
  (fpaexpr_subterm_doublelessp-1 nil 3756490838
   ("" (skeep 1 :but "expr2")
    (("" (induct-and-simplify "expr2") nil nil)) nil)
   ((FPAExpr_induction formula-decl nil expressions nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil))
   nil))
 (maxParamIndex_TCC7 0
  (maxParamIndex_TCC7-1 nil 3754243159 ("" (tcc))
   ((subterm adt-def-decl "boolean" expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (maxParamIndex_TCC8 0
  (maxParamIndex_TCC8-1 nil 3754243159 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RAExpr type-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (subterm adt-def-decl "boolean" expressions nil))
   nil))
 (maxParamIndex_TCC9 0
  (maxParamIndex_TCC9-1 nil 3755352508 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (RAExpr type-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (subterm adt-def-decl "boolean" expressions nil))
   nil))
 (maxParamIndex_TCC10 0
  (maxParamIndex_TCC10-1 nil 3755352508 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil))
   nil))
 (maxParamIndex_TCC11 0
  (maxParamIndex_TCC11-1 nil 3755352508 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil))
   nil))
 (maxParamIndex_TCC12 0
  (maxParamIndex_TCC12-2 nil 3755423533
   ("" (skeep :but (("expr" "expr_")) :preds? t)
    (("" (typepred "v1(arg1!1)")
      (("1" (typepred "v1(arg2!1)")
        (("1" (split 1)
          (("1" (skeep :but (("expr" "expr_")) :preds? t)
            (("1" (replace -7)
              (("1" (expand "subterm")
                (("1" (split -2)
                  (("1" (inst -6 "v")
                    (("1" (expand "max")
                      (("1" (lift-if 1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst -4 "v")
                    (("2" (expand "max")
                      (("2" (lift-if 1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (replace -3)
          (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (replace -1)
        (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (RAExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (arg1!1 skolem-const-decl "RAExpr" expressions nil)
    (v skolem-const-decl "{v: (RParameter?) | subterm(v, expr_)}"
     expressions nil)
    (expr_ skolem-const-decl "RAExpr" expressions nil)
    (arg2!1 skolem-const-decl "RAExpr" expressions nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil))
   nil)
  (maxParamIndex_TCC12-1 nil 3755352508 ("" (subtype-tcc) nil nil) nil
   shostak))
 (wellFormed?_RAExpr_monotonicity 0
  (wellFormed?_RAExpr_monotonicity-1 nil 3755168818
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (skolem 1 "c")
        (("1" (flatten)
          (("1" (expand "wellFormed?_RAExpr") (("1" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "wellFormed?_RAExpr")
        (("2" (skeep) (("2" (assert) nil nil)) nil)) nil)
       ("3" (expand "wellFormed?_RAExpr") (("3" (grind) nil nil)) nil)
       ("4" (skolem 1 ("o" "a1" "a2"))
        (("4" (flatten)
          (("4" (expand "wellFormed?_RAExpr" (-3 1))
            (("4" (flatten)
              (("4" (assert)
                (("4" (skeep)
                  (("4" (inst -1 "n" "m")
                    (("4" (inst -2 "n" "m") (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed?_RAExpr inductive-decl "bool" expressions nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (RAExpr_induction formula-decl nil expressions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil))
   nil))
 (wellFormed?_rexpr_op 0
  (wellFormed?_rexpr_op-1 nil 3755168844
   ("" (skeep)
    (("" (expand "wellFormed?_RAExpr" 1 1) (("" (propax) nil nil))
      nil))
    nil)
   ((wellFormed?_RAExpr inductive-decl "bool" expressions nil)) nil))
 (maxFreeLocalIndex_RAExpr_TCC1 0
  (maxFreeLocalIndex_RAExpr_TCC1-1 nil 3753112107 ("" (tcc))
   ((subterm adt-def-decl "boolean" expressions nil)) nil))
 (maxFreeLocalIndex_RAExpr_TCC2 0
  (maxFreeLocalIndex_RAExpr_TCC2-1 nil 3753112107 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" expressions nil))
   nil))
 (maxFreeLocalIndex_RAExpr_TCC3 0
  (maxFreeLocalIndex_RAExpr_TCC3-1 nil 3753112107 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ParameterIndex nonempty-type-eq-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" expressions nil))
   nil))
 (maxFreeLocalIndex_RAExpr_TCC4 0
  (maxFreeLocalIndex_RAExpr_TCC4-2 nil 3755353262
   ("" (skeep :preds? t)
    (("" (replace -1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (skeep -1)
            (("1" (typepred "v(arg1!1)")
              (("1" (typepred "v(arg2!1)")
                (("1" (split -2)
                  (("1" (split -5)
                    (("1" (flatten)
                      (("1" (skolem -1 "local1" :skolem-typepreds? t)
                        (("1" (skolem -5 "local2" :skolem-typepreds? t)
                          (("1" (case "index(local2)<=index(local1)")
                            (("1" (split 1)
                              (("1"
                                (inst 1 "local1")
                                (("1"
                                  (replace -6 :hide? t :dir rl)
                                  (("1"
                                    (replace -7 :hide? t :dir rl)
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -15 :hide? t)
                                  (("2"
                                    (expand "subterm" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -7 "local!1")
                                  (("1"
                                    (inst -9 "local!1")
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "local!1")
                                    (("2"
                                      (replace -16 :hide? y)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split 2)
                              (("1"
                                (inst 1 "local2")
                                (("1"
                                  (replace -5 :hide? t :dir rl)
                                  (("1"
                                    (replace -6 :hide? t :dir rl)
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -14 :hide? t)
                                  (("2"
                                    (expand "subterm" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -6 "local!1")
                                  (("1"
                                    (inst -8 "local!1")
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "local!1")
                                    (("2"
                                      (replace -15 :hide? y)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (split -5)
                        (("1" (replace -1)
                          (("1" (flatten)
                            (("1"
                              (skolem -2 "local2" :skolem-typepreds? t)
                              (("1"
                                (split 2)
                                (("1"
                                  (inst 1 "local2")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (skolem
                                   1
                                   "localx"
                                   :skolem-typepreds?
                                   t)
                                  (("2"
                                    (inst -7 "localx")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (split -4)
                      (("1" (flatten)
                        (("1" (skolem -1 "local1" :skolem-typepreds? t)
                          (("1" (replace -5)
                            (("1" (replace -3 :dir rl)
                              (("1"
                                (split 2)
                                (("1"
                                  (inst 1 "local1")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (skolem
                                   1
                                   "localx"
                                   :skolem-typepreds?
                                   t)
                                  (("2"
                                    (inst -6 "localx")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replace -11)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (inst 3 "localx")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split -4)
                        (("1" (hide 3)
                          (("1" (expand "subterm" -5)
                            (("1" (split -5)
                              (("1" (inst 1 "local") nil nil)
                               ("2" (inst 2 "local") nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (replace -5)
                  (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -2)
                (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (typepred "v(arg1!1)")
            (("2" (typepred "v(arg2!1)")
              (("2" (split -3)
                (("1" (replace -1 :hide? t)
                  (("1" (split -5)
                    (("1" (replace -1 :hide? t)
                      (("1" (expand "max") (("1" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (skolem -1 "local_" :skolem-typepreds? t)
                      (("2" (inst 1 "local_")
                        (("2" (expand "subterm" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem -1 "local_" :skolem-typepreds? t)
                  (("2" (inst 1 "local_")
                    (("2" (expand "subterm" 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (RAExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (localx skolem-const-decl
     "{local: (RVariable?) | subterm(local, rexpr)}" expressions nil)
    (local2 skolem-const-decl
     "{local: (RVariable?) | subterm(local, arg2!1)}" expressions nil)
    (local2 skolem-const-decl
     "{local: (RVariable?) | subterm(local, arg2!1)}" expressions nil)
    (local!1 skolem-const-decl
     "{local: (RVariable?) | subterm(local, rexpr)}" expressions nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rexpr skolem-const-decl "RAExpr" expressions nil)
    (local1 skolem-const-decl
     "{local: (RVariable?) | subterm(local, arg1!1)}" expressions nil)
    (arg1!1 skolem-const-decl "RAExpr" expressions nil)
    (local!1 skolem-const-decl
     "{local: (RVariable?) | subterm(local, rexpr)}" expressions nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (arg2!1 skolem-const-decl "RAExpr" expressions nil)
    (localx skolem-const-decl
     "{local: (RVariable?) | subterm(local, rexpr)}" expressions nil)
    (local1 skolem-const-decl
     "{local: (RVariable?) | subterm(local, arg1!1)}" expressions nil))
   nil)
  (maxFreeLocalIndex_RAExpr_TCC4-1 nil 3753112107
   ("" (termination-tcc) nil nil) nil shostak))
 (max_local_index_rexpr_def 0
  (max_local_index_rexpr_def-1 nil 3755351273
   ("" (skeep)
    (("" (typepred "maxFreeLocalIndex_RAExpr(rexpr)")
      (("" (grind) nil nil)) nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (<= const-decl "bool" reals nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (RAExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (max_local_index_rexpr_op_def 0
  (max_local_index_rexpr_op_def-1 nil 3755425053
   ("" (expand "maxFreeLocalIndex_RAExpr" 1 1) (("" (propax) nil nil))
    nil)
   ((maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil))
   shostak))
 (wellFormed?_rexpr_int_def 0
  (wellFormed?_rexpr_int_def-1 nil 3755425236
   ("" (skeep :but "rexpr")
    (("" (induct "rexpr")
      (("1" (skolem 1 "cnst")
        (("1" (expand "maxFreeLocalIndex_RAExpr")
          (("1" (expand "maxParamIndex")
            (("1" (assert)
              (("1" (grind)
                (("1" (expand "wellFormed?_RAExpr")
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 "vidx")
        (("2" (expand "maxFreeLocalIndex_RAExpr")
          (("2" (expand "maxParamIndex")
            (("2" (expand "wellFormed?_RAExpr")
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skolem 1 "pidx")
        (("3" (expand "maxFreeLocalIndex_RAExpr")
          (("3" (expand "maxParamIndex")
            (("3" (expand "wellFormed?_RAExpr")
              (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("op_" "expr1_" "expr2_"))
        (("4" (flatten)
          (("4" (rewrite "wellFormed?_rexpr_op")
            (("4" (rewrite "max_local_index_rexpr_op_def")
              (("4" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed?_RAExpr inductive-decl "bool" expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (<= const-decl "bool" reals nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (maxParamIndex def-decl "{maxInd: upfrom(-1) |
         FORALL (v: (RParameter?) | subterm(v, expr)): index(v) <= maxInd}"
     expressions nil)
    (RAExpr_induction formula-decl nil expressions nil)
    (max_local_index_rexpr_op_def formula-decl nil expressions nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (wellFormed?_rexpr_op formula-decl nil expressions nil)
    (Operator formal-nonempty-type-decl nil expressions nil))
   nil))
 (ftor_var 0
  (ftor_var-1 nil 3755009611
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil)
       ("4" (skolem 1 ("op_" "expr1" "expr2"))
        (("4" (flatten)
          (("4" (expand "FtoR" -3)
            (("4" (expand "<<" -3)
              (("4" (split -3)
                (("1" (replace -1)
                  (("1" (inst 1 "expr1")
                    (("1" (expand "<<") (("1" (propax) nil nil)) nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (typepred "rlocal")
                        (("2" (replace -2 :hide? t)
                          (("2" (expand "FtoR")
                            (("2" (lift-if -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skeep -2)
                    (("2" (inst 1 "local")
                      (("2" (assert)
                        (("2" (expand "<<" 1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (inst 1 "expr2")
                    (("1" (expand "<<") (("1" (propax) nil nil)) nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (typepred "rlocal")
                        (("2" (replace -2 :hide? t)
                          (("2" (expand "FtoR")
                            (("2" (lift-if -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (assert)
                  (("4" (skeep -3)
                    (("4" (inst 1 "local")
                      (("4" (assert)
                        (("4" (expand "<<" 1) (("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (RAExpr type-decl nil expressions nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RAExpr])" expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<< adt-def-decl "(strict_well_founded?[FPAExpr])" expressions nil)
    (FPAExpr_induction formula-decl nil expressions nil)
    (expr2 skolem-const-decl "FPAExpr" expressions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expr1 skolem-const-decl "FPAExpr" expressions nil))
   shostak))
 (ftor_expr_wellFormed? 0
  (ftor_expr_wellFormed?-1 nil 3755169777
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (skolem 1 "cnt")
        (("1" (expand "wellFormed?")
          (("1" (expand "FtoR")
            (("1" (expand "wellFormed?_RAExpr")
              (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "FtoR")
        (("2" (skolem 1 "vidx")
          (("2" (expand "wellFormed?")
            (("2" (expand "wellFormed?_RAExpr")
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skolem 1 "pidx")
        (("3" (expand "FtoR")
          (("3" (expand "wellFormed?")
            (("3" (expand "wellFormed?_RAExpr")
              (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("op_" "expr1_" "expr2_"))
        (("4" (flatten)
          (("4" (expand "wellFormed?" 1)
            (("4" (expand "FtoR" 1)
              (("4" (expand "wellFormed?_RAExpr" 1)
                (("4" (replace -1 :hide? t)
                  (("4" (replace -1 :hide? t) (("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed? inductive-decl "bool" expressions nil)
    (RAExpr type-decl nil expressions nil)
    (wellFormed?_RAExpr inductive-decl "bool" expressions nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FPAExpr_induction formula-decl nil expressions nil))
   shostak))
 (ftor_fpvar_rvar_j 0
  (ftor_fpvar_rvar_j-2 nil 3756638569 ("" (tcc) nil nil)
   ((FtoR def-decl "RAExpr" expressions nil)) nil)
  (ftor_fpvar_rvar_j-1 nil 3756638563 ("" (judgement-tcc) nil nil) nil
   nil))
 (ftor_fpvar_rvar 0
  (ftor_fpvar_rvar-1 nil 3756638599 ("" (tcc) nil nil)
   ((FtoR def-decl "RAExpr" expressions nil)) shostak))
 (FtoR_TCC1 0
  (FtoR_TCC1-1 nil 3731863387 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (FtoR_TCC2 0
  (FtoR_TCC2-1 nil 3753113610 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (FtoR_TCC3 0
  (FtoR_TCC3-1 nil 3754243159 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions
     nil))
   nil))
 (maxParamIndex_TCC13 0
  (maxParamIndex_TCC13-1 nil 3755352508 ("" (tcc))
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil))
 (maxParamIndex_TCC14 0
  (maxParamIndex_TCC14-1 nil 3755352508 ("" (tcc))
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil))
 (maxParamIndex_TCC15 0
  (maxParamIndex_TCC15-1 nil 3755352508 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (maxParamIndex_TCC16 0
  (maxParamIndex_TCC16-1 nil 3755352508 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (maxParamIndex_TCC17 0
  (maxParamIndex_TCC17-1 nil 3755352508 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil))
   nil))
 (maxParamIndex_TCC18 0
  (maxParamIndex_TCC18-1 nil 3755352508 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (maxParamIndex_TCC19 0
  (maxParamIndex_TCC19-1 nil 3755352508 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (appearsFree?_expr_int_def_var 0
  (appearsFree?_expr_int_def_var-1 nil 3754836095
   ("" (expand "appearsFree?" 1 1) (("" (propax) nil nil)) nil)
   ((appearsFree? def-decl "bool" expressions nil)) shostak))
 (appearsFree?_expr_int_def 0
  (appearsFree?_expr_int_def-1 nil 3754835877
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (grind) nil nil)
       ("2" (skolem 1 "vidx")
        (("2" (rewrite "appearsFree?_expr_int_def_var")
          (("2" (expand "subterm")
            (("2" (grind)
              (("2" (decompose-equality -1) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (appearsFree? def-decl "bool" expressions nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPVariable adt-constructor-decl "[DeBruijnIndex -> (FPVariable?)]"
     expressions nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (FPAExpr_induction formula-decl nil expressions nil)
    (appearsFree?_expr_int_def_var formula-decl nil expressions nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (appears?_expr_int_def 0
  (appears?_expr_int_def-1 nil 3754937350 ("" (grind) nil nil)
   ((appears? const-decl "bool" expressions nil)) shostak))
 (appears?_expr_subterm 0
  (appears?_expr_subterm-1 nil 3754996894
   ("" (expand "appears?")
    (("" (skeep 1 :but "expr")
      (("" (induct-and-simplify "expr")
        (("1" (apply-extensionality) nil nil)
         ("2" (decompose-equality) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FPVariable adt-constructor-decl "[DeBruijnIndex -> (FPVariable?)]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPAExpr_FPVariable_extensionality formula-decl nil expressions
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (appearsFree? def-decl "bool" expressions nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (FPAExpr_induction formula-decl nil expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (appears_in?_expr_int_def_lt 0
  (appears_in?_expr_int_def_lt-1 nil 3754835738
   ("" (expand "appears_in?" 1 1) (("" (propax) nil nil)) nil)
   ((appears_in? def-decl "bool" expressions nil)) shostak))
 (appearsFree?_form_int_def_lt 0
  (appearsFree?_form_int_def_lt-1 nil 3754835760
   ("" (expand "appearsFree?" 1 1) (("" (propax) nil nil)) nil)
   ((appearsFree? def-decl "bool" expressions nil)) shostak))
 (appearsFree?_form_int_def 0
  (appearsFree?_form_int_def-1 nil 3754835404
   ("" (skeep :but "form")
    (("" (induct "form")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (skeep)
        (("5" (rewrite "appearsFree?_form_int_def_lt")
          (("5" (rewrite "appears_in?_expr_int_def_lt")
            (("5" (rewrite "appearsFree?_expr_int_def")
              (("5" (rewrite "appearsFree?_expr_int_def") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (FPBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (appearsFree? def-decl "bool" expressions nil)
    (appears_in? def-decl "bool" expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPVariable adt-constructor-decl "[DeBruijnIndex -> (FPVariable?)]"
     expressions nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (FPBExpr_induction formula-decl nil expressions nil)
    (appearsFree?_form_int_def_lt formula-decl nil expressions nil)
    (appearsFree?_expr_int_def formula-decl nil expressions nil)
    (appears_in?_expr_int_def_lt formula-decl nil expressions nil))
   shostak))
 (appears?_form_int_def 0
  (appears?_form_int_def-1 nil 3754828793
   ("" (expand "appears?" 1 1) (("" (propax) nil nil)) nil)
   ((appears? const-decl "bool" expressions nil)) shostak))
 (appears?_form_int_def_and 0
  (appears?_form_int_def_and-1 nil 3754572085 ("" (grind) nil nil)
   ((appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (appears?_form_int_def_not 0
  (appears?_form_int_def_not-1 nil 3754829152 ("" (grind) nil nil)
   ((appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (appears?_form_int_def_lt 0
  (appears?_form_int_def_lt-1 nil 3754838801 ("" (grind) nil nil)
   ((appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (maxFreeLocalIndex_TCC5 0
  (maxFreeLocalIndex_TCC5-1 nil 3753112107
   ("" (skeep)
    (("" (typepred "v(e)")
      (("1" (split -2)
        (("1" (hide -3)
          (("1" (flatten)
            (("1" (skeep -1 :preds? t)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (split 1)
                    (("1" (inst 1 "local")
                      (("1" (replace -7)
                        (("1" (rewrite "appears?_form_int_def_not") nil
                          nil))
                        nil))
                      nil)
                     ("2" (skeep 1 :but (("local" "localx")) :preds? t)
                      (("2" (inst -7 "localx")
                        (("2" (replace -8)
                          (("2" (rewrite "appears?_form_int_def_not")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -6)
                    (("2" (inst 1 "local")
                      (("2" (rewrite "appears?_form_int_def_not") nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (split -2)
          (("1" (replace -3)
            (("1" (split 2)
              (("1" (flatten)
                (("1" (skeep -1)
                  (("1" (inst 2 "local")
                    (("1" (rewrite "appears?_form_int_def_not") nil
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) nil nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil)
       ("2" (replace -1)
        (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (appears? const-decl "bool" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (FPBExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (localx skolem-const-decl
     "{local: (FPVariable?) | appears?(form)(local)}" expressions nil)
    (form skolem-const-decl "FPBExpr" expressions nil)
    (e skolem-const-decl "FPBExpr" expressions nil)
    (local skolem-const-decl
     "{local: (FPVariable?) | appears?(e)(local)}" expressions nil)
    (appears?_form_int_def_not formula-decl nil expressions nil))
   shostak))
 (maxFreeLocalIndex_TCC6 0
  (maxFreeLocalIndex_TCC6-1 nil 3754911223
   ("" (skeep)
    (("" (replace -1)
      (("" (typepred "v(e1)")
        (("1" (split -2)
          (("1" (hide -3)
            (("1" (typepred "v(e2)")
              (("1" (split -2)
                (("1" (hide -3)
                  (("1" (flatten)
                    (("1"
                      (skeep -1 :but (("local" "local2")) :preds? t)
                      (("1"
                        (skeep -6 :but (("local" "local1")) :preds? t)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (case "v(e2)<=v(e1)")
                              (("1"
                                (split 1)
                                (("1"
                                  (inst 1 "local1")
                                  (("1"
                                    (expand "max")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -13)
                                    (("2"
                                      (rewrite
                                       "appears?_form_int_def_and")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep
                                   1
                                   :but
                                   (("local" "localx"))
                                   :preds?
                                   t)
                                  (("2"
                                    (replace -15)
                                    (("2"
                                      (rewrite
                                       "appears?_form_int_def_and")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (inst -13 "localx")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst -10 "localx")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split 2)
                                (("1"
                                  (inst 1 "local2")
                                  (("1"
                                    (expand "max")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -12)
                                    (("2"
                                      (rewrite
                                       "appears?_form_int_def_and")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep
                                   1
                                   :but
                                   (("local" "localx"))
                                   :preds?
                                   t)
                                  (("2"
                                    (replace -14)
                                    (("2"
                                      (rewrite
                                       "appears?_form_int_def_and")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (inst -12 "localx")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst -9 "localx")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (inst 1 "local1")
                              (("2"
                                (rewrite "appears?_form_int_def_and")
                                nil
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split -2)
                  (("1" (flatten)
                    (("1" (split 2)
                      (("1" (flatten)
                        (("1" (replace -2)
                          (("1" (expand "max")
                            (("1" (assert)
                              (("1"
                                (skeep
                                 -4
                                 :but
                                 (("local" "local1"))
                                 :preds?
                                 t)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (inst 1 "local1")
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (rewrite
                                         "appears?_form_int_def_and")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep
                                     1
                                     :but
                                     (("local" "localx"))
                                     :preds?
                                     t)
                                    (("2"
                                      (inst -9 "localx")
                                      (("2"
                                        (replace -10)
                                        (("2"
                                          (rewrite
                                           "appears?_form_int_def_and")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 3 "localx")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (skeep -3 :but (("local" "local1")) :preds?
                           t)
                          (("2" (inst 1 "local1")
                            (("2" (rewrite "appears?_form_int_def_and")
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (replace -3)
                (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (split -2)
            (("1" (typepred "v(e2)")
              (("1" (split -2)
                (("1" (hide -3)
                  (("1" (flatten)
                    (("1"
                      (skeep -1 :but (("local" "local2")) :preds? t)
                      (("1" (split 2)
                        (("1" (flatten)
                          (("1" (replace -7)
                            (("1" (expand "max")
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (inst 1 "local2")
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (rewrite
                                         "appears?_form_int_def_and")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep
                                     1
                                     :but
                                     (("local" "localx"))
                                     :preds?
                                     t)
                                    (("2"
                                      (inst -7 "localx")
                                      (("2"
                                        (replace -10)
                                        (("2"
                                          (rewrite
                                           "appears?_form_int_def_and")
                                          (("2"
                                            (inst 3 "localx")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst 1 "local2")
                            (("2" (rewrite "appears?_form_int_def_and")
                              nil nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split 3)
                  (("1" (flatten)
                    (("1" (skeep -1 :but (("local" "local")) :preds? t)
                      (("1" (rewrite "appears?_form_int_def_and")
                        (("1" (split -2)
                          (("1" (inst 3 "local") nil nil)
                           ("2" (inst 2 "local") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -2)
                      (("1" (expand "max") (("1" (assert) nil nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil)
               ("2" (replace -3)
                (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil)
         ("2" (replace -)
          (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((local1 skolem-const-decl
     "{local: (FPVariable?) | appears?(e1)(local)}" expressions nil)
    (localx skolem-const-decl
     "{local: (FPVariable?) | appears?(form)(local)}" expressions nil)
    (e2 skolem-const-decl "FPBExpr" expressions nil)
    (localx skolem-const-decl
     "{local: (FPVariable?) | appears?(form)(local)}" expressions nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (form skolem-const-decl "FPBExpr" expressions nil)
    (e1 skolem-const-decl "FPBExpr" expressions nil)
    (local1 skolem-const-decl
     "{local: (FPVariable?) | appears?(e1)(local)}" expressions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (appears?_form_int_def_and formula-decl nil expressions nil)
    (localx skolem-const-decl
     "{local: (FPVariable?) | appears?(form)(local)}" expressions nil)
    (local2 skolem-const-decl
     "{local: (FPVariable?) | appears?(e2)(local)}" expressions nil)
    (local2 skolem-const-decl
     "{local: (FPVariable?) | appears?(e2)(local)}" expressions nil)
    (localx skolem-const-decl
     "{local: (FPVariable?) | appears?(form)(local)}" expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (FPBExpr type-decl nil expressions nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[FPBExpr])" expressions nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (appears? const-decl "bool" expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (maxFreeLocalIndex_TCC7 0
  (maxFreeLocalIndex_TCC7-1 nil 3754911223
   ("" (skeep)
    (("" (replace -1)
      (("" (lemma "max_local_index_fpexpr_def")
        (("" (inst -1 "a1")
          (("" (lemma "max_local_index_fpexpr_def")
            (("" (inst -1 "a2")
              (("" (split -1)
                (("1" (flatten)
                  (("1" (hide -1)
                    (("1"
                      (skeep -1 :but (("local" "local2")) :preds? t)
                      (("1" (split -5)
                        (("1" (flatten)
                          (("1" (hide -1)
                            (("1"
                              (skeep -1 :but (("local" "local1"))
                               :preds? t)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (case
                                       "maxFreeLocalIndex(a2) <= maxFreeLocalIndex(a1)")
                                      (("1"
                                        (inst 1 "local1")
                                        (("1"
                                          (expand "max")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (replace -11)
                                          (("2"
                                            (rewrite
                                             "appears?_form_int_def_lt")
                                            (("2"
                                              (rewrite
                                               "appears?_expr_subterm")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst 2 "local2")
                                        (("1"
                                          (expand "max")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (replace -10)
                                          (("2"
                                            (rewrite
                                             "appears?_form_int_def_lt")
                                            (("2"
                                              (rewrite
                                               "appears?_expr_subterm")
                                              (("2"
                                                (rewrite
                                                 "appears?_expr_subterm")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep
                                       1
                                       :but
                                       (("local" "local"))
                                       :preds?
                                       t)
                                      (("2"
                                        (replace -12)
                                        (("2"
                                          (rewrite
                                           "appears?_form_int_def_lt")
                                          (("2"
                                            (split -2)
                                            (("1"
                                              (inst -7 "local")
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "appears?_expr_subterm")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -11 "local")
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "appears?_expr_subterm")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst 1 "local1")
                                    (("2"
                                      (rewrite
                                       "appears?_form_int_def_lt")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite
                                           "appears?_expr_subterm")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 :hide? t)
                            (("2" (expand "max")
                              (("2"
                                (assert)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (inst 1 "local2")
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (rewrite
                                             "appears?_form_int_def_lt")
                                            (("1"
                                              (rewrite
                                               "appears?_expr_subterm")
                                              (("1"
                                                (rewrite
                                                 "appears?_expr_subterm")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep 1 :preds? t)
                                        (("2"
                                          (inst -7 "local")
                                          (("2"
                                            (replace -7)
                                            (("2"
                                              (rewrite
                                               "appears?_form_int_def_lt")
                                              (("2"
                                                (rewrite
                                                 "appears?_expr_subterm")
                                                (("2"
                                                  (rewrite
                                                   "appears?_expr_subterm")
                                                  (("2"
                                                    (inst 3 "local")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "local2")
                                    (("2"
                                      (rewrite
                                       "appears?_form_int_def_lt")
                                      (("2"
                                        (rewrite
                                         "appears?_expr_subterm")
                                        (("2"
                                          (rewrite
                                           "appears?_expr_subterm")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -1 :hide? t)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (hide -1)
                          (("1"
                            (skeep -1 :but (("local" "local1")) :preds?
                             t)
                            (("1" (expand "max")
                              (("1"
                                (assert)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (inst 1 "local1")
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (rewrite
                                             "appears?_form_int_def_lt")
                                            (("1"
                                              (rewrite
                                               "appears?_expr_subterm")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep 1 :preds? t)
                                        (("2"
                                          (inst -7 "local")
                                          (("2"
                                            (replace -7)
                                            (("2"
                                              (rewrite
                                               "appears?_form_int_def_lt")
                                              (("2"
                                                (rewrite
                                                 "appears?_expr_subterm")
                                                (("2"
                                                  (rewrite
                                                   "appears?_expr_subterm")
                                                  (("2"
                                                    (inst 3 "local")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "local1")
                                    (("2"
                                      (rewrite
                                       "appears?_form_int_def_lt")
                                      (("2"
                                        (rewrite
                                         "appears?_expr_subterm")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace -1 :hide? t)
                          (("2" (expand "max")
                            (("2" (split 3)
                              (("1"
                                (flatten)
                                (("1"
                                  (skeep -1 :preds? t)
                                  (("1"
                                    (rewrite
                                     "appears?_form_int_def_lt")
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (inst 2 "local")
                                        (("1"
                                          (rewrite
                                           "appears?_expr_subterm")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (inst 3 "local")
                                        (("2"
                                          (rewrite
                                           "appears?_expr_subterm")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPAExpr type-decl nil expressions nil)
    (local1 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, a1)}" expressions nil)
    (local skolem-const-decl
     "{local: (FPVariable?) | appears?(form)(local)}" expressions nil)
    (local skolem-const-decl
     "{local: (FPVariable?) | appears?(form)(local)}" expressions nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (local skolem-const-decl
     "{local: (FPVariable?) | appears?(form)(local)}" expressions nil)
    (maxFreeLocalIndex def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): subterm(local, expr)
           THEN (EXISTS (local: (FPVariable?) | subterm(local, expr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (FPVariable?) | subterm(local, expr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (appears?_expr_subterm formula-decl nil expressions nil)
    (appears?_form_int_def_lt formula-decl nil expressions nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (local1 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, a1)}" expressions nil)
    (a1 skolem-const-decl "FPAExpr" expressions nil)
    (form skolem-const-decl "FPBExpr" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (FPBExpr type-decl nil expressions nil)
    (local2 skolem-const-decl
     "{local: (FPVariable?) | subterm(local, a2)}" expressions nil)
    (a2 skolem-const-decl "FPAExpr" expressions nil)
    (max_local_index_fpexpr_def formula-decl nil expressions nil))
   shostak))
 (maxFreeLocalIndex_TCC8 0
  (maxFreeLocalIndex_TCC8-1 nil 3754911223 ("" (tcc))
   ((appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   nil))
 (max_local_index_fpform_def 0
  (max_local_index_fpform_def-1 nil 3754921378
   ("" (skeep)
    (("" (typepred "maxFreeLocalIndex(form)") (("" (grind) nil nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (maxFreeLocalIndex def-decl "{max: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): appears?(form)(local)
           THEN (EXISTS (local: (FPVariable?) | appears?(form)(local)):
                   index(local) = max)
                 AND
                 (FORALL (local: (FPVariable?) | appears?(form)(local)):
                    index(local) <= max)
         ELSE max = -1
         ENDIF}" expressions nil)
    (<= const-decl "bool" reals nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (appears? const-decl "bool" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (FPBExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (max_local_index_stmt_and_def 0
  (max_local_index_stmt_and_def-2 nil 3753550761
   ("" (expand "maxFreeLocalIndex" 1 1) (("" (propax) nil)) nil)
   ((maxFreeLocalIndex def-decl "{max: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): appears?(form)(local)
           THEN (EXISTS (local: (FPVariable?) | appears?(form)(local)):
                   index(local) = max)
                 AND
                 (FORALL (local: (FPVariable?) | appears?(form)(local)):
                    index(local) <= max)
         ELSE max = -1
         ENDIF}" expressions nil))
   nil)
  (max_local_index_stmt_and_def-1 nil 3753402031
   ("" (expand "maxFreeLocalIndex" 1 1) (("" (propax) nil nil)) nil)
   nil shostak))
 (max_local_index_stmt_lt_def 0
  (max_local_index_stmt_lt_def-1 nil 3753550744
   ("" (expand "maxFreeLocalIndex" 1 1) (("" (propax) nil nil)) nil)
   ((maxFreeLocalIndex def-decl "{max: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): appears?(form)(local)
           THEN (EXISTS (local: (FPVariable?) | appears?(form)(local)):
                   index(local) = max)
                 AND
                 (FORALL (local: (FPVariable?) | appears?(form)(local)):
                    index(local) <= max)
         ELSE max = -1
         ENDIF}" expressions nil))
   shostak))
 (wellFormed?_form_true 0
  (wellFormed?_form_true-1 nil 3753464087 ("" (grind) nil nil)
   ((wellFormed? def-decl "bool" expressions nil)) shostak))
 (wellFormed?_form_int_def 0
  (wellFormed?_form_int_def-1 nil 3754850566
   ("" (skeep :but "form")
    (("" (induct "form")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (skolem 1 ("expr1_" "expr2_"))
        (("5" (rewrite "max_local_index_stmt_lt_def")
          (("5" (lemma "wellFormed?_expr_int_def")
            (("5" (inst -1 "expr1_" "nargs" "nlocals")
              (("5" (lemma "wellFormed?_expr_int_def")
                (("5" (inst -1 "expr2_" "nargs" "nlocals")
                  (("5" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed? def-decl "bool" expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (appears? const-decl "bool" expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (<= const-decl "bool" reals nil)
    (maxFreeLocalIndex def-decl "{max: upfrom(-1) |
         IF EXISTS (local: (FPVariable?)): appears?(form)(local)
           THEN (EXISTS (local: (FPVariable?) | appears?(form)(local)):
                   index(local) = max)
                 AND
                 (FORALL (local: (FPVariable?) | appears?(form)(local)):
                    index(local) <= max)
         ELSE max = -1
         ENDIF}" expressions nil)
    (maxParamIndex def-decl "upfrom(-1)" expressions nil)
    (FPBExpr_induction formula-decl nil expressions nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_local_index_stmt_lt_def formula-decl nil expressions nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (wellFormed?_expr_int_def formula-decl nil expressions nil))
   shostak))
 (wellFormed?_motonocity 0
  (wellFormed?_motonocity-1 nil 3753113629
   ("" (skeep :but "expr")
    (("" (induct "expr")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skolem 1 "subexpr")
        (("3" (flatten)
          (("3" (skeep :preds? t)
            (("3" (expand "wellFormed?" (-4 1))
              (("3" (assert) (("3" (inst -3 "n" "m") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("e1" "e2"))
        (("4" (flatten)
          (("4" (skeep)
            (("4" (expand "wellFormed?" (-3 1))
              (("4" (flatten)
                (("4" (assert)
                  (("4" (inst -1 "n" "m")
                    (("4" (inst -2 "n" "m") (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skolem 1 ("a1" "a2"))
        (("5" (flatten)
          (("5" (expand "wellFormed?" -1)
            (("5" (flatten)
              (("5" (use "wellFormed?_fpaexpr_monotonocity")
                (("5" (assert)
                  (("5" (lemma "wellFormed?_fpaexpr_monotonocity")
                    (("5" (inst -1 "a2" "nargs" "localsCount")
                      (("5" (assert)
                        (("5" (skeep 1)
                          (("5" (inst -1 "n" "m")
                            (("5" (inst -2 "n" "m")
                              (("5"
                                (expand "wellFormed?" 1)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed? def-decl "bool" expressions nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (FPBExpr_induction formula-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FPAExpr type-decl nil expressions nil)
    (wellFormed?_fpaexpr_monotonocity formula-decl nil expressions
     nil))
   shostak))
 (wellFormed?_RBExpr_monotonicity 0
  (wellFormed?_RBExpr_monotonicity-2 nil 3755169393
   ("" (skeep :but "form")
    (("" (induct "form")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skolem 1 "subexpr")
        (("3" (flatten)
          (("3" (skeep :preds? t)
            (("3" (expand "wellFormed?_RBExpr" (-4 1))
              (("3" (assert) (("3" (inst -3 "n" "m") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skolem 1 ("e1" "e2"))
        (("4" (flatten)
          (("4" (skeep)
            (("4" (expand "wellFormed?_RBExpr" (-3 1))
              (("4" (flatten)
                (("4" (assert)
                  (("4" (inst -1 "n" "m")
                    (("4" (inst -2 "n" "m") (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skolem 1 ("a1" "a2"))
        (("5" (flatten)
          (("5" (expand "wellFormed?_RBExpr" -1)
            (("5" (flatten)
              (("5" (use "wellFormed?_RAExpr_monotonicity")
                (("5" (assert)
                  (("5" (lemma "wellFormed?_RAExpr_monotonicity")
                    (("5" (inst -1 "a2" "nargs" "localsCount")
                      (("5" (assert)
                        (("5" (skeep 1)
                          (("5" (inst -1 "n" "m")
                            (("5" (inst -2 "n" "m")
                              (("5"
                                (expand "wellFormed?_RBExpr" 1)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed?_RBExpr def-decl "bool" expressions nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (RBExpr_induction formula-decl nil expressions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (RAExpr type-decl nil expressions nil)
    (wellFormed?_RAExpr_monotonicity formula-decl nil expressions nil))
   nil)
  (wellFormed?_RBExpr_monotonicity-1 nil 3755169218
   ("" (skeep :but "expr")
    (("" (induct "form")
      (("1" (grind) nil) ("2" (grind) nil)
       ("3" (skolem 1 "subexpr")
        (("3" (flatten)
          (("3" (skeep :preds? t)
            (("3" (expand "wellFormed?_RBExpr" (-4 1))
              (("3" (assert) (("3" (inst -3 "n" "m") nil)))))))))))
       ("4" (skolem 1 ("e1" "e2"))
        (("4" (flatten)
          (("4" (skeep)
            (("4" (expand "wellFormed?_RBExpr" (-3 1))
              (("4" (flatten)
                (("4" (assert)
                  (("4" (inst -1 "n" "m")
                    (("4" (inst -2 "n" "m")
                      (("4" (assert) nil)))))))))))))))))
       ("5" (skolem 1 ("a1" "a2"))
        (("5" (flatten)
          (("5" (expand "wellFormed?_RBExpr" -1)
            (("5" (flatten)
              (("5" (use "wellFormed?_RBExpr_RAExpr_monotonicity")
                (("5" (assert)
                  (("5"
                    (lemma "wellFormed?_RBExpr_RAExpr_monotonicity")
                    (("5" (inst -1 "a2" "nargs" "localsCount")
                      (("5" (assert)
                        (("5" (skeep 1)
                          (("5" (inst -1 "n" "m")
                            (("5" (inst -2 "n" "m")
                              (("5"
                                (expand "wellFormed?_RBExpr" 1)
                                (("5"
                                  (assert)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (ftor_form_wellFormed? 0
  (ftor_form_wellFormed?-1 nil 3755169622
   ("" (skeep :but "form")
    (("" (induct "form")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (skolem 1 ("expr1_" "expr2_"))
        (("5" (expand "wellFormed?")
          (("5" (expand "FtoR")
            (("5" (expand "wellFormed?_RBExpr")
              (("5" (rewrite "ftor_expr_wellFormed?")
                (("5" (rewrite "ftor_expr_wellFormed?") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FPBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed? def-decl "bool" expressions nil)
    (RBExpr type-decl nil expressions nil)
    (wellFormed?_RBExpr def-decl "bool" expressions nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (FPBExpr_induction formula-decl nil expressions nil)
    (ftor_expr_wellFormed? formula-decl nil expressions nil)
    (FPAExpr type-decl nil expressions nil))
   shostak))
 (appearsFree?_expr_rexpr 0
  (appearsFree?_expr_rexpr-1 nil 3755347428
   ("" (induct-and-simplify "expr") nil nil)
   ((ftor_fpvar_rvar_j application-judgement "(RVariable?)" expressions
     nil)
    (FPAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (appearsFree? def-decl "bool" expressions nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (appearsFree? def-decl "bool" expressions nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FPAExpr_induction formula-decl nil expressions nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (appears?_rexpr_subterm 0
  (appears?_rexpr_subterm-1 nil 3755351941
   ("" (expand "appears?")
    (("" (skeep 1 :but "rexpr")
      (("" (induct-and-simplify "rexpr")
        (("1" (apply-extensionality) nil nil)
         ("2" (decompose-equality) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (RVariable adt-constructor-decl "[DeBruijnIndex -> (RVariable?)]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RAExpr_RVariable_extensionality formula-decl nil expressions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (appearsFree? def-decl "bool" expressions nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (RAExpr_induction formula-decl nil expressions nil)
    (appears? const-decl "bool" expressions nil))
   nil))
 (appears?_expr_rexpr 0
  (appears?_expr_rexpr-1 nil 3755347481
   ("" (expand "appears?")
    (("" (lemma "appearsFree?_expr_rexpr") (("" (propax) nil nil))
      nil))
    nil)
   ((appearsFree?_expr_rexpr formula-decl nil expressions nil)
    (appears? const-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (NoLocalVars?_fp_op 0
  (NoLocalVars?_fp_op-1 nil 3756578851
   ("" (skeep)
    (("" (expand "NoLocalVars?")
      (("" (iff)
        (("" (split 1)
          (("1" (ground)
            (("1" (skeep)
              (("1" (inst -2 "local")
                (("1" (rewrite "appears?_expr_subterm")
                  (("1" (use "appears?_expr_subterm")
                    (("1" (replace -1 :hide? t) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst -2 "local")
                (("2" (use "appears?_expr_subterm")
                  (("2" (replace -1 :hide? t)
                    (("2" (use "appears?_expr_subterm")
                      (("2" (replace -1 :hide? t)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (skeep)
              (("2" (inst -1 "local")
                (("2" (inst -1 "local") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NoLocalVars? const-decl "bool" expressions nil)
    (appears?_expr_subterm formula-decl nil expressions nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (Operator formal-nonempty-type-decl nil expressions nil)
    (FPOperator? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (FPOperator adt-constructor-decl
     "[[Operator, FPAExpr, FPAExpr] -> (FPOperator?)]" expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (NoLocalVars?_r_op 0
  (NoLocalVars?_r_op-1 nil 3756579026
   ("" (skeep)
    (("" (expand "NoLocalVars?")
      (("" (iff)
        (("" (split 1)
          (("1" (ground)
            (("1" (skeep)
              (("1" (use "appears?_expr_subterm")
                (("1" (grind) nil nil)) nil))
              nil)
             ("2" (skeep)
              (("2" (use "appears?_expr_subterm")
                (("2" (use "appears?_expr_subterm")
                  (("2" (replace -1 :hide? t) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (skeep) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NoLocalVars? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (RAExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (appears?_expr_subterm formula-decl nil expressions nil)
    (rexpr2 skolem-const-decl "RAExpr" expressions nil))
   nil))
 (noLocalVars_FtoR 0
  (noLocalVars_FtoR-1 nil 3756578399
   ("" (induct "expr")
    (("1" (grind) nil nil)
     ("2" (skolem 1 "vidx")
      (("2" (expand "FtoR")
        (("2" (expand "NoLocalVars?")
          (("2" (iff)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (inst -1 "FPVariable(index(rlocal))")
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (skeep)
                  (("2" (inst -1 "RVariable(index(local))")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil)
     ("4" (skolem 1 ("operator" "e1" "e2"))
      (("4" (flatten)
        (("4" (expand "FtoR" 1)
          (("4" (rewrite "NoLocalVars?_fp_op")
            (("4" (rewrite "NoLocalVars?_r_op") (("4" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NoLocalVars?_r_op formula-decl nil expressions nil)
    (NoLocalVars?_fp_op formula-decl nil expressions nil)
    (Operator formal-nonempty-type-decl nil expressions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FPVariable adt-constructor-decl "[DeBruijnIndex -> (FPVariable?)]"
     expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (index shared-adt-accessor-decl
           "[{x: FPAExpr | FPVariable?(x) OR FPParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (FPParameter? adt-recognizer-decl "[FPAExpr -> boolean]"
     expressions nil)
    (RVariable adt-constructor-decl "[DeBruijnIndex -> (RVariable?)]"
     expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (FPAExpr_induction formula-decl nil expressions nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (RAExpr type-decl nil expressions nil)
    (NoLocalVars? const-decl "bool" expressions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FPAExpr type-decl nil expressions nil))
   shostak))
 (appearsFree?_form_rform 0
  (appearsFree?_form_rform-1 nil 3755347507
   ("" (skeep :but "form")
    (("" (induct "form")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (skolem 1 ("expr1_" "expr2_"))
        (("5" (expand "appearsFree?" 1 1)
          (("5" (expand "FtoR" 1 1)
            (("5" (expand "appearsFree?" 1 3)
              (("5" (use "appearsFree?_expr_rexpr")
                (("5" (replace -1 :hide? t)
                  (("5" (use "appearsFree?_expr_rexpr")
                    (("5" (replace -1 :hide? t)
                      (("5" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (grind) nil nil))
      nil))
    nil)
   ((ftor_fpvar_rvar_j application-judgement "(RVariable?)" expressions
     nil)
    (FPBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FPAExpr type-decl nil expressions nil)
    (FPVariable? adt-recognizer-decl "[FPAExpr -> boolean]" expressions
     nil)
    (appearsFree? def-decl "bool" expressions nil)
    (RBExpr type-decl nil expressions nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (appearsFree? def-decl "bool" expressions nil)
    (FtoR def-decl "RBExpr" expressions nil)
    (FtoR def-decl "RAExpr" expressions nil)
    (FPBExpr_induction formula-decl nil expressions nil)
    (appearsFree?_expr_rexpr formula-decl nil expressions nil))
   shostak))
 (appears?_rform_int_def_and 0
  (appears?_rform_int_def_and-1 nil 3755256880 ("" (grind) nil nil)
   ((appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (appears?_rform_int_def_not 0
  (appears?_rform_int_def_not-1 nil 3755257163 ("" (grind) nil nil)
   ((appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (appears?_rform_int_def_lt 0
  (appears?_rform_int_def_lt-1 nil 3755349536 ("" (grind) nil nil)
   ((appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   shostak))
 (appears?_rform_int_def 0
  (appears?_rform_int_def-1 nil 3755256924
   ("" (expand "appears?") (("" (propax) nil nil)) nil)
   ((appears? const-decl "bool" expressions nil)) shostak))
 (maxFreeLocalIndex_TCC9 0
  (maxFreeLocalIndex_TCC9-2 nil 3755350954
   ("" (skeep)
    (("" (typepred "v(e)")
      (("1" (split -2)
        (("1" (hide -3)
          (("1" (flatten)
            (("1" (skolem -1 "local_" :skolem-typepreds? t)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (split 1)
                    (("1" (inst 1 "local_")
                      (("1" (replace -7)
                        (("1" (rewrite "appears?_rform_int_def_not")
                          nil nil))
                        nil))
                      nil)
                     ("2" (skeep 1 :but (("local" "localx")) :preds? t)
                      (("2" (inst -7 "localx")
                        (("2" (replace -8)
                          (("2" (rewrite "appears?_rform_int_def_not")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -6)
                    (("2" (inst 1 "local_")
                      (("2" (rewrite "appears?_rform_int_def_not") nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (split -2)
          (("1" (replace -3)
            (("1" (split 2)
              (("1" (flatten)
                (("1" (skeep -1)
                  (("1" (inst 2 "local")
                    (("1" (rewrite "appears?_rform_int_def_not") nil
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) nil nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil)
       ("2" (replace -1)
        (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (appears? const-decl "bool" expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (RBExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (localx skolem-const-decl
     "{local: (RVariable?) | appears?(rform)(local)}" expressions nil)
    (rform skolem-const-decl "RBExpr" expressions nil)
    (e skolem-const-decl "RBExpr" expressions nil)
    (local_ skolem-const-decl
     "{local: (RVariable?) | appears?(e)(local)}" expressions nil)
    (appears?_rform_int_def_not formula-decl nil expressions nil))
   nil)
  (maxFreeLocalIndex_TCC9-1 nil 3755256878 ("" (existence-tcc) nil nil)
   nil nil))
 (maxFreeLocalIndex_TCC10 0
  (maxFreeLocalIndex_TCC10-2 nil 3755424342
   ("" (skeep)
    (("" (replace -1)
      (("" (typepred "v(e1)")
        (("1" (split -2)
          (("1" (hide -3)
            (("1" (typepred "v(e2)")
              (("1" (split -2)
                (("1" (hide -3)
                  (("1" (flatten)
                    (("1"
                      (skeep -1 :but (("local" "local2")) :preds? t)
                      (("1"
                        (skeep -6 :but (("local" "local1")) :preds? t)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (case "v(e2)<=v(e1)")
                              (("1"
                                (split 1)
                                (("1"
                                  (inst 1 "local1")
                                  (("1"
                                    (expand "max")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -13)
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_and")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep
                                   1
                                   :but
                                   (("local" "localx"))
                                   :preds?
                                   t)
                                  (("2"
                                    (replace -15)
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_and")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (inst -13 "localx")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst -10 "localx")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split 2)
                                (("1"
                                  (inst 1 "local2")
                                  (("1"
                                    (expand "max")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -12)
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_and")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep
                                   1
                                   :but
                                   (("local" "localx"))
                                   :preds?
                                   t)
                                  (("2"
                                    (replace -14)
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_and")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (inst -12 "localx")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst -9 "localx")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (inst 1 "local1")
                              (("2"
                                (rewrite "appears?_rform_int_def_and")
                                nil
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split -2)
                  (("1" (flatten)
                    (("1" (split 2)
                      (("1" (flatten)
                        (("1" (replace -2)
                          (("1" (expand "max")
                            (("1" (assert)
                              (("1"
                                (skeep
                                 -4
                                 :but
                                 (("local" "local1"))
                                 :preds?
                                 t)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (inst 1 "local1")
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (rewrite
                                         "appears?_rform_int_def_and")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep
                                     1
                                     :but
                                     (("local" "localx"))
                                     :preds?
                                     t)
                                    (("2"
                                      (inst -9 "localx")
                                      (("2"
                                        (replace -10)
                                        (("2"
                                          (rewrite
                                           "appears?_rform_int_def_and")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 3 "localx")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (skeep -3 :but (("local" "local1")) :preds?
                           t)
                          (("2" (inst 1 "local1")
                            (("2"
                              (rewrite "appears?_rform_int_def_and")
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (replace -3)
                (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (split -2)
            (("1" (typepred "v(e2)")
              (("1" (split -2)
                (("1" (hide -3)
                  (("1" (flatten)
                    (("1"
                      (skeep -1 :but (("local" "local2")) :preds? t)
                      (("1" (split 2)
                        (("1" (flatten)
                          (("1" (replace -7)
                            (("1" (expand "max")
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (inst 1 "local2")
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (rewrite
                                         "appears?_rform_int_def_and")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep
                                     1
                                     :but
                                     (("local" "localx"))
                                     :preds?
                                     t)
                                    (("2"
                                      (inst -7 "localx")
                                      (("2"
                                        (replace -10)
                                        (("2"
                                          (rewrite
                                           "appears?_rform_int_def_and")
                                          (("2"
                                            (inst 3 "localx")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst 1 "local2")
                            (("2"
                              (rewrite "appears?_rform_int_def_and")
                              nil nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split 3)
                  (("1" (flatten)
                    (("1"
                      (skeep -1 :but (("local" "local_")) :preds? t)
                      (("1" (rewrite "appears?_rform_int_def_and")
                        (("1" (split -2)
                          (("1" (inst 3 "local_") nil nil)
                           ("2" (inst 2 "local_") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -2)
                      (("1" (expand "max") (("1" (assert) nil nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil)
               ("2" (replace -3)
                (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil)
         ("2" (replace -)
          (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((local1 skolem-const-decl
     "{local: (RVariable?) | appears?(e1)(local)}" expressions nil)
    (localx skolem-const-decl
     "{local: (RVariable?) | appears?(rform)(local)}" expressions nil)
    (e2 skolem-const-decl "RBExpr" expressions nil)
    (localx skolem-const-decl
     "{local: (RVariable?) | appears?(rform)(local)}" expressions nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (rform skolem-const-decl "RBExpr" expressions nil)
    (e1 skolem-const-decl "RBExpr" expressions nil)
    (local1 skolem-const-decl
     "{local: (RVariable?) | appears?(e1)(local)}" expressions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (appears?_rform_int_def_and formula-decl nil expressions nil)
    (localx skolem-const-decl
     "{local: (RVariable?) | appears?(rform)(local)}" expressions nil)
    (local2 skolem-const-decl
     "{local: (RVariable?) | appears?(e2)(local)}" expressions nil)
    (local2 skolem-const-decl
     "{local: (RVariable?) | appears?(e2)(local)}" expressions nil)
    (localx skolem-const-decl
     "{local: (RVariable?) | appears?(rform)(local)}" expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (RBExpr type-decl nil expressions nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[RBExpr])" expressions nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (appears? const-decl "bool" expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil)
  (maxFreeLocalIndex_TCC10-1 nil 3755350614
   ("" (termination-tcc) nil nil) nil shostak))
 (maxFreeLocalIndex_TCC11 0
  (maxFreeLocalIndex_TCC11-3 nil 3755424012
   ("" (skeep)
    (("" (replace -1)
      (("" (lemma "max_local_index_rexpr_def")
        (("" (inst -1 "a1")
          (("" (lemma "max_local_index_rexpr_def")
            (("" (inst -1 "a2")
              (("" (split -1)
                (("1" (flatten)
                  (("1" (hide -1)
                    (("1"
                      (skeep -1 :but (("local" "local2")) :preds? t)
                      (("1" (split -5)
                        (("1" (flatten)
                          (("1" (hide -1)
                            (("1"
                              (skeep -1 :but (("local" "local1"))
                               :preds? t)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (case
                                       "maxFreeLocalIndex_RAExpr(a2) <= maxFreeLocalIndex_RAExpr(a1)")
                                      (("1"
                                        (inst 1 "local1")
                                        (("1"
                                          (expand "max")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (replace -11)
                                          (("2"
                                            (rewrite
                                             "appears?_rform_int_def_lt")
                                            (("2"
                                              (rewrite
                                               "appears?_rexpr_subterm")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst 2 "local2")
                                        (("1"
                                          (expand "max")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (replace -10)
                                          (("2"
                                            (rewrite
                                             "appears?_rform_int_def_lt")
                                            (("2"
                                              (rewrite
                                               "appears?_rexpr_subterm")
                                              (("2"
                                                (rewrite
                                                 "appears?_rexpr_subterm")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep
                                       1
                                       :but
                                       (("local" "local_"))
                                       :preds?
                                       t)
                                      (("2"
                                        (replace -12)
                                        (("2"
                                          (rewrite
                                           "appears?_rform_int_def_lt")
                                          (("2"
                                            (split -2)
                                            (("1"
                                              (inst -7 "local_")
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "appears?_rexpr_subterm")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -11 "local_")
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "appears?_rexpr_subterm")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst 1 "local1")
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_lt")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite
                                           "appears?_rexpr_subterm")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 :hide? t)
                            (("2" (expand "max")
                              (("2"
                                (assert)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (inst 1 "local2")
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (rewrite
                                             "appears?_rform_int_def_lt")
                                            (("1"
                                              (rewrite
                                               "appears?_rexpr_subterm")
                                              (("1"
                                                (rewrite
                                                 "appears?_rexpr_subterm")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep
                                         1
                                         :but
                                         (("local" "local_"))
                                         :preds?
                                         t)
                                        (("2"
                                          (inst -7 "local_")
                                          (("2"
                                            (replace -7)
                                            (("2"
                                              (rewrite
                                               "appears?_rform_int_def_lt")
                                              (("2"
                                                (rewrite
                                                 "appears?_rexpr_subterm")
                                                (("2"
                                                  (rewrite
                                                   "appears?_rexpr_subterm")
                                                  (("2"
                                                    (inst 3 "local_")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "local2")
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_lt")
                                      (("2"
                                        (rewrite
                                         "appears?_rexpr_subterm")
                                        (("2"
                                          (rewrite
                                           "appears?_rexpr_subterm")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -1 :hide? t)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (hide -1)
                          (("1"
                            (skeep -1 :but (("local" "local1")) :preds?
                             t)
                            (("1" (expand "max")
                              (("1"
                                (assert)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (inst 1 "local1")
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (rewrite
                                             "appears?_rform_int_def_lt")
                                            (("1"
                                              (rewrite
                                               "appears?_rexpr_subterm")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep
                                         :but
                                         (("local" "local_"))
                                         :preds?
                                         t)
                                        (("2"
                                          (inst -7 "local_")
                                          (("2"
                                            (replace -7)
                                            (("2"
                                              (rewrite
                                               "appears?_rform_int_def_lt")
                                              (("2"
                                                (rewrite
                                                 "appears?_rexpr_subterm")
                                                (("2"
                                                  (rewrite
                                                   "appears?_rexpr_subterm")
                                                  (("2"
                                                    (inst 3 "local_")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "local1")
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_lt")
                                      (("2"
                                        (rewrite
                                         "appears?_rexpr_subterm")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace -1 :hide? t)
                          (("2" (expand "max")
                            (("2" (split 3)
                              (("1"
                                (flatten)
                                (("1"
                                  (skeep
                                   -1
                                   :but
                                   (("local" "local_"))
                                   :preds?
                                   t)
                                  (("1"
                                    (rewrite
                                     "appears?_rform_int_def_lt")
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (inst 2 "local_")
                                        (("1"
                                          (rewrite
                                           "appears?_rexpr_subterm")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (inst 3 "local_")
                                        (("2"
                                          (rewrite
                                           "appears?_rexpr_subterm")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RAExpr type-decl nil expressions nil)
    (local1 skolem-const-decl
     "{local: (RVariable?) | subterm(local, a1)}" expressions nil)
    (local_ skolem-const-decl
     "{local: (RVariable?) | appears?(rform)(local)}" expressions nil)
    (local_ skolem-const-decl
     "{local: (RVariable?) | appears?(rform)(local)}" expressions nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (local_ skolem-const-decl
     "{local: (RVariable?) | appears?(rform)(local)}" expressions nil)
    (maxFreeLocalIndex_RAExpr def-decl "{maxInd: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): subterm(local, rexpr)
           THEN (EXISTS (local: (RVariable?) | subterm(local, rexpr)):
                   index(local) = maxInd)
                 AND
                 (FORALL (local: (RVariable?) | subterm(local, rexpr)):
                    index(local) <= maxInd)
         ELSE maxInd = -1
         ENDIF}" expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (appears?_rexpr_subterm formula-decl nil expressions nil)
    (appears?_rform_int_def_lt formula-decl nil expressions nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (local1 skolem-const-decl
     "{local: (RVariable?) | subterm(local, a1)}" expressions nil)
    (a1 skolem-const-decl "RAExpr" expressions nil)
    (rform skolem-const-decl "RBExpr" expressions nil)
    (appears? const-decl "bool" expressions nil)
    (RBExpr type-decl nil expressions nil)
    (local2 skolem-const-decl
     "{local: (RVariable?) | subterm(local, a2)}" expressions nil)
    (a2 skolem-const-decl "RAExpr" expressions nil)
    (max_local_index_rexpr_def formula-decl nil expressions nil))
   nil)
  (maxFreeLocalIndex_TCC11-1 nil 3755423707
   ("" (skeep :preds? t)
    (("" (replace -1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (skeep -1)
            (("1" (typepred "v(arg1!1)")
              (("1" (typepred "v(arg2!1)")
                (("1" (split -2)
                  (("1" (split -5)
                    (("1" (flatten)
                      (("1" (skolem -1 "local1" :skolem-typepreds? t)
                        (("1" (skolem -5 "local2" :skolem-typepreds? t)
                          (("1" (case "index(local2)<=index(local1)")
                            (("1" (split 1)
                              (("1"
                                (inst 1 "local1")
                                (("1"
                                  (replace -6 :hide? t :dir rl)
                                  (("1"
                                    (replace -7 :hide? t :dir rl)
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil)))))))
                                 ("2"
                                  (replace -15 :hide? t)
                                  (("2"
                                    (expand "subterm" 1)
                                    (("2" (propax) nil)))))))
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -7 "local!1")
                                  (("1"
                                    (inst -9 "local!1")
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil)))
                                     ("2" (assert) nil)))
                                   ("2"
                                    (typepred "local!1")
                                    (("2"
                                      (replace -16 :hide? y)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (grind)
                                            nil)))))))))))))))
                             ("2" (split 2)
                              (("1"
                                (inst 1 "local2")
                                (("1"
                                  (replace -5 :hide? t :dir rl)
                                  (("1"
                                    (replace -6 :hide? t :dir rl)
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil)))))))
                                 ("2"
                                  (replace -14 :hide? t)
                                  (("2"
                                    (expand "subterm" 1)
                                    (("2" (propax) nil)))))))
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -6 "local!1")
                                  (("1"
                                    (inst -8 "local!1")
                                    (("1"
                                      (expand "max")
                                      (("1" (assert) nil)))
                                     ("2" (assert) nil)))
                                   ("2"
                                    (typepred "local!1")
                                    (("2"
                                      (replace -15 :hide? y)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (grind)
                                            nil)))))))))))))))))))))))
                     ("2" (assert)
                      (("2" (split -5)
                        (("1" (replace -1)
                          (("1" (flatten)
                            (("1"
                              (skolem -2 "local2" :skolem-typepreds? t)
                              (("1"
                                (split 2)
                                (("1"
                                  (inst 1 "local2")
                                  (("1" (grind) nil)
                                   ("2" (grind) nil)))
                                 ("2"
                                  (skolem
                                   1
                                   "localx"
                                   :skolem-typepreds?
                                   t)
                                  (("2"
                                    (inst -7 "localx")
                                    (("1" (grind) nil)
                                     ("2" (grind) nil)))))))))))))
                         ("2" (propax) nil)))))))
                   ("2" (split -2)
                    (("1" (split -4)
                      (("1" (flatten)
                        (("1" (skolem -1 "local1" :skolem-typepreds? t)
                          (("1" (replace -5)
                            (("1" (replace -3 :dir rl)
                              (("1"
                                (split 2)
                                (("1"
                                  (inst 1 "local1")
                                  (("1" (grind) nil)
                                   ("2" (grind) nil)))
                                 ("2"
                                  (skolem
                                   1
                                   "localx"
                                   :skolem-typepreds?
                                   t)
                                  (("2"
                                    (inst -6 "localx")
                                    (("1" (grind) nil)
                                     ("2"
                                      (replace -11)
                                      (("2"
                                        (expand "subterm" -2)
                                        (("2"
                                          (inst 3 "localx")
                                          (("2"
                                            (assert)
                                            nil)))))))))))))))))))))
                       ("2" (split -4)
                        (("1" (hide 3)
                          (("1" (expand "subterm" -5)
                            (("1" (split -5)
                              (("1" (inst 1 "local") nil)
                               ("2" (inst 2 "local") nil)))))))
                         ("2" (propax) nil)))))
                     ("2" (propax) nil)))))
                 ("2" (replace -5)
                  (("2" (expand "<<") (("2" (propax) nil)))))))
               ("2" (replace -2)
                (("2" (expand "<<") (("2" (propax) nil)))))))))))
         ("2" (flatten)
          (("2" (typepred "v(arg1!1)")
            (("2" (typepred "v(arg2!1)")
              (("2" (split -3)
                (("1" (replace -1 :hide? t)
                  (("1" (split -5)
                    (("1" (replace -1 :hide? t)
                      (("1" (expand "max") (("1" (propax) nil)))))
                     ("2" (skeep -1 :preds? t)
                      (("2" (inst 1 "local")
                        (("2" (expand "subterm" 1)
                          (("2" (assert) nil)))))))))))
                 ("2" (skeep -1 :preds? t)
                  (("2" (inst 1 "local")
                    (("2" (expand "subterm" 1)
                      (("2" (assert) nil)))))))))))))))
         ("3" (assert) nil))))))
    nil)
   nil nil)
  (maxFreeLocalIndex_TCC11-2 nil 3755351128
   ("" (skeep)
    (("" (replace -1)
      (("" (typepred "v(e1)")
        (("1" (split -2)
          (("1" (hide -3)
            (("1" (typepred "v(e2)")
              (("1" (split -2)
                (("1" (hide -3)
                  (("1" (flatten)
                    (("1"
                      (skeep -1 :but (("local" "local2")) :preds? t)
                      (("1"
                        (skeep -6 :but (("local" "local1")) :preds? t)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (case "v(e2)<=v(e1)")
                              (("1"
                                (split 1)
                                (("1"
                                  (inst 1 "local1")
                                  (("1"
                                    (expand "max")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -13)
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_and")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep
                                   1
                                   :but
                                   (("local" "localx"))
                                   :preds?
                                   t)
                                  (("2"
                                    (replace -15)
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_and")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (inst -13 "localx")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst -10 "localx")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split 2)
                                (("1"
                                  (inst 1 "local2")
                                  (("1"
                                    (expand "max")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -12)
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_and")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep
                                   1
                                   :but
                                   (("local" "localx"))
                                   :preds?
                                   t)
                                  (("2"
                                    (replace -14)
                                    (("2"
                                      (rewrite
                                       "appears?_rform_int_def_and")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (inst -12 "localx")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst -9 "localx")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (inst 1 "local1")
                              (("2"
                                (rewrite "appears?_rform_int_def_and")
                                nil
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split -2)
                  (("1" (flatten)
                    (("1" (split 2)
                      (("1" (flatten)
                        (("1" (replace -2)
                          (("1" (expand "max")
                            (("1" (assert)
                              (("1"
                                (skeep
                                 -4
                                 :but
                                 (("local" "local1"))
                                 :preds?
                                 t)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (inst 1 "local1")
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (rewrite
                                         "appears?_rform_int_def_and")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep
                                     1
                                     :but
                                     (("local" "localx"))
                                     :preds?
                                     t)
                                    (("2"
                                      (inst -9 "localx")
                                      (("2"
                                        (replace -10)
                                        (("2"
                                          (rewrite
                                           "appears?_rform_int_def_and")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 3 "localx")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (skeep -3 :but (("local" "local1")) :preds?
                           t)
                          (("2" (inst 1 "local1")
                            (("2"
                              (rewrite "appears?_rform_int_def_and")
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (replace -3)
                (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (split -2)
            (("1" (typepred "v(e2)")
              (("1" (split -2)
                (("1" (hide -3)
                  (("1" (flatten)
                    (("1"
                      (skeep -1 :but (("local" "local2")) :preds? t)
                      (("1" (split 2)
                        (("1" (flatten)
                          (("1" (replace -7)
                            (("1" (expand "max")
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (inst 1 "local2")
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (rewrite
                                         "appears?_rform_int_def_and")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep
                                     1
                                     :but
                                     (("local" "localx"))
                                     :preds?
                                     t)
                                    (("2"
                                      (inst -7 "localx")
                                      (("2"
                                        (replace -10)
                                        (("2"
                                          (rewrite
                                           "appears?_rform_int_def_and")
                                          (("2"
                                            (inst 3 "localx")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst 1 "local2")
                            (("2"
                              (rewrite "appears?_rform_int_def_and")
                              nil nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split 3)
                  (("1" (flatten)
                    (("1"
                      (skeep -1 :but (("local" "local_")) :preds? t)
                      (("1" (rewrite "appears?_rform_int_def_and")
                        (("1" (split -2)
                          (("1" (inst 3 "local_") nil nil)
                           ("2" (inst 2 "local_") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -2)
                      (("1" (expand "max") (("1" (assert) nil nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil)
               ("2" (replace -3)
                (("2" (expand "<<") (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil)
         ("2" (replace -)
          (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (maxFreeLocalIndex_TCC12 0
  (maxFreeLocalIndex_TCC12-3 nil 3755423966 ("" (tcc) nil nil)
   ((appearsFree? def-decl "bool" expressions nil)
    (appears? const-decl "bool" expressions nil))
   nil)
  (maxFreeLocalIndex_TCC12-2 nil 3755351531 ("" (tcc)) nil nil)
  (maxFreeLocalIndex_TCC12-1 nil 3755350614 ("" (subtype-tcc) nil nil)
   nil nil))
 (max_local_index_rform_def 0
  (max_local_index_rform_def-1 nil 3755350639
   ("" (skeep :preds? t)
    (("" (typepred "maxFreeLocalIndex(rform)")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (maxFreeLocalIndex def-decl "{max: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): appears?(rform)(local)
           THEN (EXISTS (local: (RVariable?) | appears?(rform)(local)):
                   index(local) = max)
                 AND
                 (FORALL (local: (RVariable?) | appears?(rform)(local)):
                    index(local) <= max)
         ELSE max = -1
         ENDIF}" expressions nil)
    (<= const-decl "bool" reals nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (appears? const-decl "bool" expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (RAExpr type-decl nil expressions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (RBExpr type-decl nil expressions nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (max_local_index_rform_lt_def 0
  (max_local_index_rform_lt_def-1 nil 3755424609
   ("" (expand "maxFreeLocalIndex" 1 1) (("" (propax) nil nil)) nil)
   ((maxFreeLocalIndex def-decl "{max: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): appears?(rform)(local)
           THEN (EXISTS (local: (RVariable?) | appears?(rform)(local)):
                   index(local) = max)
                 AND
                 (FORALL (local: (RVariable?) | appears?(rform)(local)):
                    index(local) <= max)
         ELSE max = -1
         ENDIF}" expressions nil))
   shostak))
 (wellFormed?_rform_int_def 0
  (wellFormed?_rform_int_def-1 nil 3755424797
   ("" (skeep :but "rform")
    (("" (induct "rform")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (skolem 1 ("rexpr1_" "rexpr2_"))
        (("5" (rewrite "max_local_index_rform_lt_def")
          (("5" (lemma "wellFormed?_rexpr_int_def")
            (("5" (inst -1 "nargs" "nlocals" "rexpr1_")
              (("5" (lemma "wellFormed?_rexpr_int_def")
                (("5" (inst -1 "nargs" "nlocals" "rexpr2_")
                  (("5" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RBExpr type-decl nil expressions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wellFormed?_RBExpr def-decl "bool" expressions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (RAExpr type-decl nil expressions nil)
    (RVariable? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (appears? const-decl "bool" expressions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (RParameter? adt-recognizer-decl "[RAExpr -> boolean]" expressions
     nil)
    (DeBruijnIndex nonempty-type-eq-decl nil expressions nil)
    (index shared-adt-accessor-decl
           "[{x: RAExpr | RVariable?(x) OR RParameter?(x)} -> DeBruijnIndex]"
           expressions nil)
    (<= const-decl "bool" reals nil)
    (maxFreeLocalIndex def-decl "{max: upfrom(-1) |
         IF EXISTS (local: (RVariable?)): appears?(rform)(local)
           THEN (EXISTS (local: (RVariable?) | appears?(rform)(local)):
                   index(local) = max)
                 AND
                 (FORALL (local: (RVariable?) | appears?(rform)(local)):
                    index(local) <= max)
         ELSE max = -1
         ENDIF}" expressions nil)
    (maxParamIndex def-decl "upfrom(-1)" expressions nil)
    (RBExpr_induction formula-decl nil expressions nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_local_index_rform_lt_def formula-decl nil expressions nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (wellFormed?_rexpr_int_def formula-decl nil expressions nil))
   nil)))

